b'|donate|\n\n|Build\\_Status|\n\nGDriveFS is an innovative *FUSE* wrapper for *Google Drive*. It is Python 2/3 compatible.\n\n\n--------------\nLatest Changes\n--------------\n\n- Though you can still use the previous authorization flow, there is now a very simple authorization flow that may be used instead by using the \'auth_automatic\' subcommand on the \'gdfstool\'. Whe you run this command, the browser will automatically be opened, you may or may not be prompted for authorization by Google, a redirection will occur, and we will then automatically record the authorization code. GDFS will temporarily open a small webserver on a random port in order to receive the response. **This effectively makes authorization a one-step process for the user.** See below for more details.\n\n- There is now a default file-path for the credentials ("auth storage file"). Just use "default" and "$HOME/.gdfs/creds" will be the file-path used. See below for more details.\n\n- The \'auth\' subcommand on the \'gdfstool\' command is now obsolete. Though you may continue to use this subcommand, please start using the \'auth_get_url\' and \'auth_write\' subcommands as this subcommand will be removed in the future.\n\n\n------------\nInstallation\n------------\n\nIn order to install his, we\'re going to use PIP (to access PyPI). Under Ubuntu,\nthis is done via::\n\n    $ sudo apt-get install python-pip\n\nYou\'ll also need to equip your system to perform builds in order to install\nsome of the dependencies. Under Ubuntu, this is done via::\n\n    $ sudo apt-get install build-essential python-dev\n\nNow, to install GDriveFS::\n\n    $ sudo pip install gdrivefs\n\n\n-----\nUsage\n-----\n\nImportant\n=========\n\nIf you wish to mount your Google Drive account at bootup, we recommend that you wrap it as a service. If you list it in /etc/fstab, you have bootup issues since your networking system may not be active when your filesystems are mounted unless you have deliberately configured the order in order to give you a guarantee.\n\n\nOverview\n========\n\nBefore you can mount the account, you must authorize *GDriveFS* to access it.\n*GDriveFS* works by producing a URL that you must visit in a browser. Google\nwill ask for your log-in information and authorization, and then give you an\nauthorization code. You then pass this code back to the *GDriveFS* utility\nalong with a file-path of where you want it to store the authorization\ninformation ("auth storage file" or "credentials file"). Then, you can mount it\nwhenever you\'d like.\n\nSince this is *FUSE*, you must be running as root or under the right group to mount.\n\n\nCredentials File\n================\n\nAlso referred to as the "auth storage" file.\n\nIn previous versions, you were required to provide a file-path to write and read the authorization code to. There is now a default ($HOME/.gdfs/creds). Just literally use the string "default" whereever the credentials file-path is required in order to use this default file-path.\n\n\nAutomatic Authorization Flow\n----------------------------\n\nThere is now a simplified flow that will automatically open the system Web browser, do any authentication necessary, and automatically write the authorization-code to disk::\n\n    $ gdfstool auth_automatic\n    Authorization code recorded.\n\n    $ gdfs default /mnt/gdrivefs\n\nThis automatic flow will require GDFS to temporarily start a small, internal webserver on the first available port.\n\n\nManual Authorization Flow\n-------------------------\n\n\nIf you need to manually get the URL, browse to it, get the authorization code, and then call the \'auth_write\' subcommand to store it:\n\n1. To get an authorization URL::\n\n    $ gdfstool auth_get_url\n    To authorize FUSE to use your Google Drive account, visit the following URL to produce an authorization code:\n\n    https://accounts.google.com/o/oauth2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.file&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&response_type=code&client_id=626378760250.apps.googleusercontent.com&access_type=offline\n\n2. To set the authorization-code, you must also provide the auth-storage file\n   that you would like to save it as. The name and location of this file is\n   arbitrary::\n\n    $ gdfstool auth_write "4/WUsOa-Sm2RhgQtf9_NFAMMbRC.cj4LQYdXfshQV0ieZDAqA-C7ecwI"\n    Authorization code recorded.\n\n\nMounting\n========\n\nOnce you\'re ready to mount::\n\n    $ gdfs -o allow_other default /mnt/gdrivefs\n\n\nOptimization\n============\n\nBy default, FUSE uses a very conservative block-size. On systems that support it, you may elect to use the "big_writes" option. This may dramatically increase the block-size (which improves the speed of transfers). There doesn\'t appear to be any authoritative documentation as to what systems support it or what the improvements might be, but, so far, it seems like Linux supports it, OSX doesn\'t, and FUSE will go from using 4K blocks to using 64K blocks.\n\nTo use this, pass "big_writes" in the "-o" option-string::\n\n    $ sudo gdfs -o big_writes /home/user/.gdfs/creds /mnt/gdrivefs\n\n\nVagrant\n=======\n\nA Vagrantfile has been made available in the event that you would like to mount your account from a system that isn\'t FUSE compatible (like a Mac) or you are having issues installing GDriveFS somewhere else and would like to debug.\n\nTo install Vagrant::\n\n    $ sudo apt-get install vagrant\n\nTo start and provision the instance::\n\n    $ cd gdrivefs/vagrant\n    $ vagrant up\n    Bringing machine \'default\' up with \'virtualbox\' provider...\n    ==> default: Importing base box \'ubuntu/trusty64\'...\n    ==> default: Matching MAC address for NAT networking...\n    ==> default: Checking if box \'ubuntu/trusty64\' is up to date...\n    ==> default: Setting the name of the VM: vagrant_default_1413437502948_22866\n    ==> default: Clearing any previously set forwarded ports...\n    ==> default: Clearing any previously set network interfaces...\n    ==> default: Preparing network interfaces based on configuration...\n        default: Adapter 1: nat\n    ==> default: Forwarding ports...\n\n    ...\n\n    ==> default: Using /usr/lib/python2.7/dist-packages\n    ==> default: Finished processing dependencies for gdrivefs==0.13.14\n    ==> default: To authorize FUSE to use your Google Drive account, visit the following URL to produce an authorization code:\n    ==> default:\n    ==> default: https://accounts.google.com/o/oauth2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.file&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&response_type=code&client_id=1056816309698.apps.googleusercontent.com&access_type=offline\n    ==> default:\n    ==> default: Once you have retrieved your authorization string, run:\n    ==> default:\n    ==> default: sudo gdfstool auth_write <authcode>\n    ==> default:\n\nThis may take a few more minutes the first time, as it might need to acquire the Ubuntu 14.04 image if not already available.\n\nTo log into the guest instance::\n\n    $ vagrant ssh\n\nThe GDFS source directory will be mounted at `/gdrivefs`, and the scripts will be in the path.\n\n**If you\'re familiar with Vagrant, you can copy the Vagrantfile and modify it to mount an additional path from the host system in the guest instance, and then use this to access your files from an incompatible system.**\n\n\nDeveloping/Debugging\n====================\n\nMounting GDFS in debugging-mode will run GDFS in the foreground, and enable debug-logging.\n\nJust set the `GD_DEBUG` environment variable to "1"::\n\n    root@vagrant-ubuntu-trusty-64:/home/vagrant# GD_DEBUG=1 gdfs /home/user/.gdfs/creds /mnt/g\n    2014-12-09 04:09:17,204 [gdrivefs.utility INFO] No mime-mapping was found.\n    2014-12-09 04:09:17,204 [gdrivefs.utility INFO] No extension-mapping was found.\n    2014-12-09 04:09:17,258 [__main__ DEBUG] Mounting GD with creds at [/home/user/.gdfs/creds]: /mnt/g\n    2014-12-09 04:09:17,259 [root DEBUG] Debug: True\n    2014-12-09 04:09:17,260 [root DEBUG] PERMS: F=777 E=666 NE=444\n    2014-12-09 04:09:17,262 [gdrivefs.drive DEBUG] Getting authorized HTTP tunnel.\n    2014-12-09 04:09:17,262 [gdrivefs.drive DEBUG] Got authorized tunnel.\n    FUSE library version: 2.9.2\n    nullpath_ok: 0\n    nopath: 0\n    utime_omit_ok: 0\n    unique: 1, opcode: INIT (26), nodeid: 0, insize: 56, pid: 0\n    INIT: 7.22\n    flags=0x0000f7fb\n    max_readahead=0x00020000\n    2014-12-09 04:09:22,839 [gdrivefs.fsutility DEBUG] --------------------------------------------------\n    2014-12-09 04:09:22,841 [gdrivefs.fsutility DEBUG] >>>>>>>>>> init(23) >>>>>>>>>> (0)\n    2014-12-09 04:09:22,841 [gdrivefs.fsutility DEBUG] DATA: path= [/]\n    2014-12-09 04:09:22,842 [gdrivefs.gdfuse INFO] Activating change-monitor.\n    2014-12-09 04:09:23,002 [gdrivefs.fsutility DEBUG] <<<<<<<<<< init(23) (0)\n       INIT: 7.19\n       flags=0x00000011\n\n\nTroubleshooting Steps\n=====================\n\n- If your *setuptools* package is too old, you might see the following\n  [annoying] error::\n\n    error: option --single-version-externally-managed not recognized\n\n  See `What does \xe2\x80\x9cerror: option --single-version-externally-managed not recognized\xe2\x80\x9d indicate? <http://stackoverflow.com/questions/14296531/what-does-error-option-single-version-externally-managed-not-recognized-ind>`_.\n\n  Apparently, the solution is to make sure that you have a healthy copy of\n  *Distribute* and to, then, uninstall *setuptools*. However, this doesn\'t seem\n  to [always] work. You might prefer to use the "easy_install" method, below.\n\n- If you see an error about antlr-python-runtime, try the following to install\n  gdrivefs::\n\n    $ sudo pip install --allow-unverified antlr-python-runtime --allow-external antlr-python-runtime gdrivefs\n\n\n-------\nOptions\n-------\n\nAny of the configuration values in the `conf.Conf` module can be overwritten as\n"-o" options. You may pass the full array of *FUSE* options this way, as well.\n\n\n-----------------\nFormat Management\n-----------------\n\n*Google Drive* will store *Google Document* files without a standard format. If\nyou wish to download them, you have to select which format you\'d like to\ndownload it as. One of the more exciting features of this *FUSE* implementation\nis the flexibility in choosing which format to download on the fly. See the\nsection below labeled "Displaceables".\n\nIf a mime-type isn\'t provided when requesting a file that requires a mime-type\nin order to download, *GDFS* will make a guess based on whether the extension\nin the filename (if one exists) can be mapped to a mime-type that is available\namong the export-types provided by *GD* for that specific file.\n\n\nThe following is an example directory-listing::\n\n    -rw-rw-rw- 1 root root       0 Feb 17 07:52 20130217-145200\n    -rw-rw-rw- 1 root root       0 Feb 17 08:04 20130217-150358\n    -rw-rw-rw- 1 root root  358356 Feb 15 15:06 American-Pika-with-Food.jpg\n    -rw-rw-rw- 1 root root    1000 Oct 25 03:53 Dear Biola.docx#\n    -rw-rw-rw- 1 root root    1000 Oct 25 02:47 Dear Biola.docx (1)#\n    -rw-rw-rw- 1 root root    1000 Oct 15 14:29 Reflection.docx#\n    -rw-rw-rw- 1 root root 1536036 Nov 28 22:37 lotterynumbers01.png\n    drwxrwxrwx 2 root root    4096 Oct  4 06:08 Scratchpad#\n    drwxrwxrwx 2 root root    4096 Dec  1 19:21 testdir_1421#\n    -rw-rw-rw- 1 root root       5 Dec  2 08:50 testfile_0350\n    -rw-rw-rw- 1 root root       0 Dec  2 21:17 .testfile_0417.swp\n    -rw-rw-rw- 1 root root       0 Dec  3 00:38 testfile_1937\n    -rw-rw-rw- 1 root root       0 Dec  2 23:13 testfile_hidden_1812\n    -rw-rw-rw- 1 root root    1000 Oct  4 02:13 Untitled document#\n\nNotice the following features:\n\n- Manages duplicates by appending index numbers (e.g. "<filename> (2)").\n- Mtimes, permissions, and ownership are correct.\n- Sizes are zero for file-types that Google hosts free of charge. These are\n  always the files that don\'t have a strict, default format (the length is\n  unknown).\n- Hidden files are prefixed with ".", thus hiding them from normal listings.\n- "Trashed" files are excluded from listings.\n- Any file that will require a mime-type in order to be downloaded has a "#" as\n  the last character of its filename.\n\n\n-------------\nDisplaceables\n-------------\n\n*Google Documents* stores all of its data on *Google Drive*. Google will store\nthese files in an agnostic file entry whose format will not be determined until\nyou download it in a specific format. Because the file is not stored in a\nparticular format, it doesn\'t have a size. Because it doesn\'t have a size, the\nOS will not issue reads for more than (0) bytes.\n\nTo get around this, a read of these types of files will only return exactly\n1000 bytes of JSON-encoded "stub data".. Information about the entry, including\nthe file-path that we\'ve stored it to.\n\nThis example also shows how we\'ve specified a mime-type in order to get a PDF\nversion of a *Google Document* file::\n\n    $ cp Copy\\ of\\ Dear\\ Biola.docx#application+pdf /target\n    $ cat /tmp/Copy\\ of\\ Dear\\ Biola.docx#application+pdf\n\nSomething like the following will be displayed::\n\n    {"ImageMediaMetadata": null,\n     "Length": 58484,\n     "FilePath": "/tmp/gdrivefs/displaced/Copy of Dear Biola.docx.application+pdf",\n     "EntryId": "1Ih5yvXiNN588EruqrzBv_RBvsKbEvcyquStaJuTZ1mQ",\n     "Title": "Copy of Dear Biola.docx",\n     "RequiresMimeType": true,\n     "Labels": {"restricted": false,\n                "starred": false,\n                "viewed": true,\n                "hidden": false,\n                "trashed": false},\n     "OriginalMimeType": "application/vnd.google-apps.document",\n     "ExportTypes": ["text/html",\n                     "application/pdf",\n                     "application/vnd.openxmlformats-officedocument.wordprocessingml.document",\n                     "application/vnd.oasis.opendocument.text",\n                     "application/rtf", "text/plain"],\n     "FinalMimeType": "application/pdf"}\n\nFrom this, you can tell that the file was originally a *Google Documents*\nmimetype, and now its a PDF mime-type. You can also see various flags, as well\nas the location that the actual, requested file was stored to.\n\n\n-----------------------\nCache/Change Management\n-----------------------\n\nA cache of both the file/folder entries is maintained, as well as a knowledge\nof file/folder relationships. However, updates are performed every few seconds\nusing *GD\'s* "change" functionality.\n\n\n-----------\nPermissions\n-----------\n\nThe default UID/GID of files is that of the current user. The default\npermissions (modes) are the following:\n\n=================  ====\nEntry Type         Perm\n=================  ====\nFolder             777\nEditable file      666\nNon-editable file  444\n=================  ====\n\nWhether or not a file is "editable" is [obviously] an attribute reported by\n*Google Drive*.\n\nThese settings can be overridden via the "-o" comma-separated set of\ncommand-line options. See below.\n\n\nPermission-Related Options\n==========================\n\nRelated Standard FUSE\n---------------------\n\nThese options change the behavior at the *FUSE* level (above *GDFS*). See "*man\nmount.fuse*" for all options.\n\n===================  ==============================================\nOption               Description\n-------------------  ----------------------------------------------\numask=M              Prescribe the umask value for -all- entries.\nuid=N                Change the default UID.\ngid=N                Change the default GID.\nallow_other          Allow other users access.\ndefault_permissions  Enforce the permission modes (off, by default)\n===================  ==============================================\n\n\nGDFS-Specific\n-------------\n\n=================================  ============================================\nOption                             Description\n---------------------------------  --------------------------------------------\ndefault_perm_folder=nnn            Default mode for folders.\ndefault_perm_file_noneditable=nnn  Default mode for non-editable files.\ndefault_perm_file_editable=nnn     Default mode for editable files (see above).\n=================================  ============================================\n\n\nExample::\n\n    allow_other,default_permissions,default_perm_folder=770,default_perm_file_noneditable=440,default_perm_file_editable=660\n\n\n-------------------\nExtended Attributes\n-------------------\n\nExtended attributes allow access to arbitrary, filesystem-specific data. You\nmay access any of the properties that *Google Drive* provides for a given entry,\nplus a handful of extra ones.\n\nListing attributes::\n\n    $ getfattr American-Pika-with-Food.jpg\n\n    # file: American-Pika-with-Food.jpg\n    user.extra.download_types\n    user.extra.is_directory\n    user.extra.is_visible\n    user.extra.parents\n    user.original.alternateLink\n    user.original.createdDate\n    user.original.downloadUrl\n    user.original.editable\n    user.original.etag\n    user.original.fileExtension\n    user.original.fileSize\n    user.original.iconLink\n    user.original.id\n    user.original.imageMediaMetadata\n    user.original.kind\n    user.original.labels\n    user.original.lastModifyingUser\n    user.original.lastModifyingUserName\n    user.original.md5Checksum\n    user.original.mimeType\n    user.original.modifiedByMeDate\n    user.original.modifiedDate\n    user.original.originalFilename\n    user.original.ownerNames\n    user.original.owners\n    user.original.parents\n    user.original.quotaBytesUsed\n    user.original.selfLink\n    user.original.shared\n    user.original.thumbnailLink\n    user.original.title\n    user.original.userPermission\n    user.original.webContentLink\n    user.original.writersCanShare\n\nGetting specific attribute::\n\n    $ getfattr --only-values -n user.original.id American-Pika-with-Food.jpg\n\n    0B5Ft2OXeDBqSSGFIanJ2Z2c3RWs\n\n    $ getfattr --only-values -n user.original.modifiedDate American-Pika-with-Food.jpg\n\n    2013-02-15T15:06:09.691Z\n\n    $ getfattr --only-values -n user.original.labels American-Pika-with-Food.jpg\n\n    K(restricted)=V(False); K(starred)=V(False); K(viewed)=V(False); K(hidden)=V(False); K(trashed)=V(False)\n\nThis used to be rendered as JSON, but since the *xattr* utilities add their\nown quotes/etc.., it was more difficult to make sense of the values.\n\n\n----------\nMisc Notes\n----------\n\n- A file will be marked as hidden on *Google Drive* if it has a prefixing dot. However, Linux/Unix doesn\'t care about the "hidden" attribute. If you create a file on *Google Drive*, somewhere else, and want it to truly be hidden via this software, make sure you add the prefixing dot.\n\n- If you have a need to do a developer install, use "pip install -e" rather than "python setup.py develop". The latter will [now] break because of the dependencies that are eggs.\n\n\n.. |donate| image:: https://pledgie.com/campaigns/27265.png?skin_name=chrome\n   :alt: Click here to lend your support to: Fund GDriveFS, the Open Source Google Drive FUSE Adapter and make a donation at pledgie.com !\n   :target: https://pledgie.com/campaigns/27265\n.. |Build_Status| image:: https://travis-ci.org/dsoprea/PySvn.svg?branch=master\n   :target: https://travis-ci.org/dsoprea/PySvn\n'