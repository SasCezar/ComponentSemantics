b'# Unofficial Native Go Runtime for Google Cloud Functions\n\n_Disclaimer: This is not an official Google product. It is not and will not be maintained by Google, and is not part of Google Cloud Functions project. There is no guarantee of any kind, including that it will work or continue to work, or that it will supported in any way._\n\n## Looking for the official Go Runtime for Google Cloud Functions?\nGoogle Cloud Functions supports an official Go runtime. Check out the [quickstart](https://cloud.google.com/functions/docs/quickstart#functions-update-install-gcloud-go) to try it out.\n\n## Background\nWhen this doc was first written, Google Cloud Functions only supported a Node.js runtime. Since then, new official runtimes have been added. Using an official runtime (such as the official Go runtime) is the recommended approach for almost all users. \n\nBut if you\'re feeling adventurous, you can run non-JavaScript code by using native Node modules and running subprocesses. Node will always be handling the requests. Wrapping Go code in a native Node module will require writing complicated foreign function interfaces (FFIs). FFIs are notoriously difficult to get right and are an easy way to introduce memory leaks as well as security and stability issues. Using a subprocess is much easier to get right, but it introduces the overhead of interprocess communication (IPC) and context switches. In both cases, the requests are proxied between Node and Go which typically involves extra copies and translations.\n\n## 100% Pure Go Request Path\nAfter an initial bootstrap step, the only thing running is a pure Go binary. This project works by completely replacing the Node process and lets a Go process directly handle requests. There is no cgo and no proxying. This means that it is faster and potentially more secure than other projects which typically to use both.\n\n## How It Works\nA native module calls execve(2) without the normal preceding fork(2) call when the user module is imported. Open socket FDs are preserved and handled by the new Go process to ensure a smooth transition. The new Go process then pretends to be Node.\n\n## Requirements\nThere are four supported environments:\n\n### Native\nFor advanced users who don\'t like VirtualBox.\n* Linux or macOS development environment (The native Node module depends on Linux/macOS specific behavior.)\n* Go 1.5 or above\n* Node.js v0.10 or above, npm and node-gyp\n* Make and GCC\n* If you are using macOS then as of right now you need the FULL xcode installed. Command line tools alone will not work.\n\n### Vagrant\nCompatible with Windows, macOS and Linux and easier than native development.\n* [Vagrant](https://www.vagrantup.com/downloads.html)\n* [VirtualBox](https://www.virtualbox.org/wiki/Downloads) or a compatable provider\n  * Optional: [vagrant-vbguest](https://github.com/dotless-de/vagrant-vbguest)\n\nIn the `cloud-functions-go` directory, run `vagrant up` to start the environment and `vagrant ssh` to get a shell. Support for other Vagrant providers besides VirtualBox is in the works.\n\n### Windows with Cygwin\n* Go for Windows\n* Node.js for Windows\n* [Cygwin](https://cygwin.com/install.html) with `make` and `zip` (you may also want `git` and an editor like `vim` or `nano`)\n\nUse the Cygwin Terminal to run the commands as described below. Note that `make test` won\'t work under Windows.\n\n### Windows with Powershell 5.0\n* Go 1.5 or above\n* Node.js (optional)\n\nThe commands described below may be run as-is using Command Prompt, or prefixed with `./` using Windows PowerShell (i.e. `./make` or `./make godev`). Note that `make test` won\'t work under Windows.\n\n### External Dependencies\n\nThe `events` sub-package depends on the following libraries:\n* `google.golang.org/api/pubsub/v1`\n* `google.golang.org/api/storage/v1`\n\n## Hello, world!\nA demo hello world example is included. To try it out, simply skip to the [Deployment](#deployment) section.\n\n## Making Changes\nFor normal development, it should only be necessary to modify the main.go file. Although this file probably shouldn\'t live in your GOPATH, feel free to import libraries from your GOPATH (including libraries downloaded with go get).\n\n## Local Testing\nRun ```make test``` to compile your code and start the test server. Open ```http://localhost:8080/execute``` in your browser. The page should display ```User function is ready```. Refresh the page to talk to your code.\n\nWhen using a go-only or non-unix environment, run ```make godev``` instead.\n\n## Logging\nThe logger may be used directly:\n```\nnodego.InfoLogger.Println("Hello World!")\nnodego.ErrorLogger.Println("Something went wrong!")\n```\nor via the log package after calling `nodego.OverrideLogger()`:\n```\nfunc init() {\n\tnodego.OverrideLogger()\n}\n\n...\n\nlog.Println("Hello World!")\n```\nUse the `nodego.WithLogger()` or `nodego.WithLoggerFunc()` middleware for your logs to reference the specific execution:\n```\nhttp.WithLoggerFunc(func(w http.ResponseWriter, r *http.Request) {\n\tlog.Println("Hello World!")\n})\n```\nA full example is included in [examples/logging.go](examples/logging.go).\n\n## Deployment\nRun ```make``` to compile and package your code. Upload the generated ```function.zip``` file to Google Cloud Functions as an HTTP trigger function.\n\n### Vagrant\nRun ```vagrant up``` to start the envirement. Run ```vagrant ssh``` to connect to the envirement. Run ```cd /vagrant``` to access the respority files. The instructions in [Local Testing](#local-testing) and [Deployment](#deployment) should now work.\n\n## Troubleshooting\nSome versions of Node.js (especially those packaged for Ubuntu) name their main binary ```nodejs``` instead of ```node```. The symptom of this problem is an error about the ```node``` binary not being found in the path even though Node.js is installed. This can be fixed with ```sudo ln -s $(which nodejs) /usr/local/bin/node```. There\'s also a package called `nodejs-legacy` that can be installed in some Debian and Ubuntu distros using `apt` that creates a symlink `node` in `/usr/bin/`\n\nIt may also be helpful to understand the nodejs environment that your Google Cloud Function runs in (e.g. how does regular `console.log` send logs to Stackdriver, whereas `fmt.Println` doesn\'t?). You can find more details in the [WORKERJS.md](WORKERJS.md) file.\n\n## License\nCopyright 2017, Google, Inc.\n\nLicensed under the Apache License, Version 2.0\n\nSee [LICENSE](LICENSE).\n'