b'# Android-Iconics  [ ![Download](https://api.bintray.com/packages/mikepenz/maven/com.mikepenz%3Aiconics-core/images/download.svg) ](https://bintray.com/mikepenz/maven/com.mikepenz%3Aiconics-core/_latestVersion)\n\n![Image](https://raw.githubusercontent.com/mikepenz/Android-Iconics/feature/next-generation/DEV/github/banner.png)\n\n> If you are an app developer you will know the problem. You start an app but require many different icons, in different sizes (**ldpi, mdpi, hdpi, xhdpi, xxhdpi, xxxhdpi**), **different colors**, and **different variants**.\nIf you get the icons as **vector** (.svg) or there are many changes over the time, you will always have to get the correct drawables again.\n\n> **This consumes a lot of time!**\n\nNow there\'s an **easy, fast, and small** solution for this! The **Android-Iconics** library.\n\nThis library allows you to include vector icons everywhere in your project. No limits are given.\n**Scale with no limit**, use **any color** at any time, provide a **contour**, and many additional customizations...\n\nUse the icons in the variation you need them.\n\n**What do you get**\n- No customization limitations (size, color, contour, background, padding, positioning, ...)\n- Shadow support\n- One icon source (no more mdpi, hdpi, ...)\n- Flexibility\n  - Size\n  - Colors\n  - Contour\n  - Shadow\n  - Auto mirroring for RTL (opt-in)\n- If it takes a Drawable, it will also work with the IconicsDrawable!\n- Save in APK size\n- All licenses included, best used with [AboutLibraries](https://github.com/mikepenz/AboutLibraries)\n\n**Already available fonts**\n- [Google Material Design Icons](https://github.com/google/material-design-icons)\n- [Material Design Iconic Font](http://zavoloklom.github.io/material-design-iconic-font)\n- [Fontawesome](https://fontawesome.com/)\n- [Meteocons](http://www.alessioatzeni.com/meteocons/)\n- [Octicons](https://github.com/github/octicons)\n- [Community Material](http://materialdesignicons.com/)\n- [Weather Icons](https://erikflowers.github.io/weather-icons/)\n- [Typeicons](http://typicons.com/)\n- [Entypo](http://www.entypo.com/)\n- [Devicon](http://devicon.fr/)\n- [Foundation Icons](http://zurb.com/playground/foundation-icon-fonts-3)\n- [Ionicons](http://ionicons.com/)\n- [Material Design DX](https://jossef.github.io/material-design-icons-iconfont/)\n\n**Need more?**\nProvide additional fonts for you project, or even create your custom font with just the icons you need.\n\n# String fields for icons\nFor generating string field for each of icons of your font, you can use this simple generator:\n\n[Android-Iconics String Generator](https://github.com/zTrap/Android-Iconics-String-Generator)\n\n# Android module generator\n\nA awesome gradle plugin which can automatically fetch a font from Fontastic, and generate the Android Module for your project.\n\n[Iconics-Font-Generator](https://github.com/ligol/IconicsFontGenerator)\n\n# Migration\n- [MIGRATION GUIDE](https://github.com/mikepenz/Android-Iconics/blob/develop/MIGRATION.md)\n\n# Setup\n\n## 1. Provide the gradle dependency\n```gradle\n//the core iconics library (without any widgets)\nimplementation "com.mikepenz:iconics-core:4.0.2"\nimplementation "androidx.appcompat:appcompat:${versions.appCompat}"\n```\n\n## 1b. (optional) Add the view\'s dependency\n```gradle\n//this adds all ui view widgets (IconicsButton, IconicsImageView, ...)\nimplementation "com.mikepenz:iconics-views:4.0.2"\n```\n\nFor the non kotlin variant please use a version smaller than 4.x.y (See the releases on GitHub)\nTo use appcompat please use a version smaller than 3.1.0. (See the releases on GitHub)\n\n## 2. Choose your desired fonts\n```gradle\nimplementation \'com.mikepenz:google-material-typeface:3.0.1.4.original-kotlin@aar\'\nimplementation \'com.mikepenz:material-design-iconic-typeface:2.2.0.6-kotlin@aar\'\nimplementation \'com.mikepenz:fontawesome-typeface:5.9.0.0-kotlin@aar\'\nimplementation \'com.mikepenz:octicons-typeface:3.2.0.6-kotlin@aar\'\nimplementation \'com.mikepenz:meteocons-typeface:1.1.0.5-kotlin@aar\'\nimplementation \'com.mikepenz:community-material-typeface:3.5.95.1-kotlin@aar\'\nimplementation \'com.mikepenz:weather-icons-typeface:2.0.10.5-kotlin@aar\'\nimplementation \'com.mikepenz:typeicons-typeface:2.0.7.5-kotlin@aar\'\nimplementation \'com.mikepenz:entypo-typeface:1.0.0.5-kotlin@aar\'\nimplementation \'com.mikepenz:devicon-typeface:2.0.0.5-kotlin@aar\'\nimplementation \'com.mikepenz:foundation-icons-typeface:3.0.0.5-kotlin@aar\'\nimplementation \'com.mikepenz:ionicons-typeface:2.0.1.5-kotlin@aar\'\nimplementation \'com.mikepenz:pixeden-7-stroke-typeface:1.2.0.3-kotlin@aar\'\nimplementation \'com.mikepenz:material-design-icons-dx-typeface:5.0.1.0-kotlin@aar\'\n```\n\n# Usage\n## Use as drawable\n\n```kotlin\nIconicsDrawable(this)\n    .icon(FontAwesome.Icon.faw_android)\n    .color(Color.RED.toIconicsColor())\n    .size(24.toIconicsSizeDp())\n```\n\n## Use via XML\n\nIf you use the Iconics library via XML provide the icon you want to use in the following syntax: `gmd-favorite` --> `fontId`-`iconName`. A list of the\navailable fonts and their `fontId` can be found [here](#available-fonts).\nAll icon names from the default fonts can be found via the [DEMO](https://play.google.com/store/apps/details?id=com.mikepenz.iconics.sample) application.\n\n#### Notation within text\nUse the `{` icon-definer `}` syntax\n```gson\nSome great text with a {faw-android} font awesome icon and {met-wind} meteocons icons.\n```\n\n### Custom Views\n#### As IconicsImageView\n```xml\n<com.mikepenz.iconics.view.IconicsImageView\n    android:layout_width="72dp"\n    android:layout_height="72dp"\n    app:iiv_color="@android:color/holo_red_dark"\n    app:iiv_icon="gmd-favorite" />  // or @string/gmd_favorite with our generator\n    //app:iiv_size="12dp"\n    //app:iiv_padding="2dp"\n    //app:iiv_contour_color="#FF0000"\n    //app:iiv_contour_width="2dp"\n    //app:iiv_background_color="#FFFF00"\n    //app:iiv_corner_radius="2dp"\n    //app:iiv_background_contour_color="#FF0000"\n    //app:iiv_background_contour_width="1dp"\n    //app:iiv_shadow_radius="4dp"\n    //app:iiv_shadow_dx="1dp"\n    //app:iiv_shadow_dy="1dp"\n    //app:iiv_animations="spin|blink_alpha|blink_scale"\n```\n\n#### As IconicsTextView\n```xml\n<com.mikepenz.iconics.view.IconicsTextView\n        android:text="abc{hif-test}defgh{faw-adjust}ijk{fon-test1}lmnopqrstuv{fon-test2}wxyz"\n        android:textColor="@android:color/black"\n        android:layout_width="wrap_content"\n        android:layout_height="56dp"\n        android:textSize="16sp"/>\n```\n\n#### As IconicsButton\n```xml\n<com.mikepenz.iconics.view.IconicsButton\n        android:text="{faw-adjust} Button"\n        android:layout_width="120dp"\n        android:layout_height="60dp"/>\n```\n\n### Automatic XML \n\n\n# Screenshots\n\n![Image](https://raw.githubusercontent.com/mikepenz/Android-Iconics/develop/DEV/github/screenshots1.jpg)\n\n\n# Available fonts\n|Link|Prefix|Dependency|\n|---|---|---|\n|[Google Material Design Icons](https://github.com/google/material-design-icons) **ORIGINAL by Google**|gmd|implementation \'com.mikepenz:google-material-typeface:+.original@aar\'|\n|[Material Design Iconic Font](http://zavoloklom.github.io/material-design-iconic-font) **Google Material Iconic**|gmi|implementation \'com.mikepenz:material-design-iconic-typeface:+@aar\'|\n|[Fontawesome](https://fontawesome.com/)|faw|implementation \'com.mikepenz:fontawesome-typeface:+@aar\'|\n|[Meteocons](http://www.alessioatzeni.com/meteocons/)|met|implementation \'com.mikepenz:meteocons-typeface:+@aar\'|\n|[Octicons](https://github.com/github/octicons)|oct|implementation \'com.mikepenz:octicons-typeface:+@aar\'|\n|[Community Material](http://materialdesignicons.com/)|cmd|implementation \'com.mikepenz:community-material-typeface:+@aar\'|\n|[Weather Icons](https://erikflowers.github.io/weather-icons/)|wic|implementation \'com.mikepenz:weather-icons-typeface:+@aar\'|\n|[Typeicons](http://typicons.com/)|typ|implementation \'com.mikepenz:typeicons-typeface:+@aar\'|\n|[Entypo](http://www.entypo.com/)|ent|implementation \'com.mikepenz:entypo-typeface:+@aar\'|\n|[Devicon](http://devicon.fr/)|dev|implementation \'com.mikepenz:devicon-typeface:+@aar\'|\n|[Foundation Icons](http://zurb.com/playground/foundation-icon-fonts-3)|fou|implementation \'com.mikepenz:foundation-icons-typeface:+@aar\'|\n|[Ionicons](http://ionicons.com/)|ion|implementation \'com.mikepenz:ionicons-typeface:+@aar\'|\n|[Pixden7Stroke](http://themes-pixeden.com/font-demos/7-stroke/)|pe7|implementation \'com.mikepenz:pixeden-7-stroke-typeface:+@aar\'|\n|[Material Design DX](https://jossef.github.io/material-design-icons-iconfont/)|cmf|implementation \'com.mikepenz:material-design-icons-dx-typeface:+@aar\'|\n\nLicenses for all included fonts are linked inside the class or can be found on the coresponding repositories.\n\n# Advanced Usage\n\n### Register fonts\n\nIf you want to add your own custom font, or a GenericFont you have to register this font (before using it). The best place to do this is the `Application`.\nYou can manually provide `applicationContext` and trigger initialization, or you can use our `IconicsContentProvider` and do absolutely nothing.\n\nIf you want to use tha manual way - place this value into your resources\n```xml\n<bool name="is_iconics_content_provider_enabled">false</bool>\n```\nAnd initialize Iconics as you wish\n```kotlin\nclass CustomApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n\n        //only required if you add a custom or generic font on your own\n        Iconics.init(applicationContext)\n\n        //register custom fonts like this (or also provide a font definition file)\n        Iconics.registerFont(CustomFont())\n    }\n}\n```\n\n### Advanced IconicsBuilder\nEverything is easy and simple. Right? But now you got a single icon within your textview and you need additional styling?\nJust define the style for all icons or only a specific one. You can find this in the PlaygroundActivity of the sample too.\n```kotlin\nIconics.Builder()\n    .style(ForegroundColorSpan(Color.WHITE), BackgroundColorSpan(Color.BLACK), RelativeSizeSpan(2f))\n    .styleFor(FontAwesome.Icon.faw_adjust, BackgroundColorSpan(Color.RED))\n                .on(tv1)\n    .build()\n```\n\n### String icon-key or typeface enum\nSometimes you won\'t like to use the icon-key ("faw-adjust") like this, but use the enum provided by a specific font. Both is valid:\n```kotlin\nIconicsDrawable(this, "faw-adjust").actionBar()\n```\n```kotlin\nIconicsDrawable(this, FontAwesome.Icon.faw_adjust).size(24.toIconicsSizeDp()).padding(1.toIconicsSizeDp())\n```\n\n\n## Create custom fonts\nThis is possible with only the *.ttf and *.css mapping file. And will take you 2 minutes.\n\nYou can get these two files by downloading a web icon font, or if you want to create your\nown custom icon font from *.svg files then you can use following tools:\n* [Fontello](http://fontello.com)\n* [IcoMoon](http://icomoon.io) \n* [Fontastic](http://app.fontastic.me)\n* let me know if you find other tools.\n\nAfter you got those two files, head over to the icon addon creation tool [android-iconics.mikepenz.com](https://android-iconics.mikepenz.com).\nEnter all the information. Add the *.ttf and *.css and click the button. It will generate and download the icon font addon as\nzip. (this tool is local only, no files are sent to a server, you can safely use it with any icons)\n\n# ProGuard\nExclude `R` from ProGuard to enable the font addon auto detection\n```proguard\n-keep class .R\n-keep class **.R$* {\n    <fields>;\n}\n```\nAll other ProGuard rules are now bundled internally with each font. \n\n# Demo\nYou can try the sample application out. It\'s on Google Play ;)\nhttps://play.google.com/store/apps/details?id=com.mikepenz.iconics.sample\n\n# Special Contributor\n- [Baptiste Lagache](https://github.com/ligol) Thanks for the gradle font module generator\n- Also thanks for all the other contributors.\n\n# Credits\n- [Joan Zapata](https://github.com/JoanZapata) He is the creator of [Android-Iconify](https://github.com/JoanZapata/android-iconify) which gave me the idea of this project. Some core concepts and ideas were reused, but everything is written from scratch.\n- [Christopher Jenkins](https://github.com/chrisjenx/) Thanks for the great usage of a custom `ContextWrapper` inside [Calligraphy](https://github.com/chrisjenx/Calligraphy/)\n- [Stephan Schober](https://github.com/tehfonsi)\n\n# Developed By\n\n* Mike Penz \n  * [mikepenz.com](http://mikepenz.com) - <mikepenz@gmail.com>\n  * [paypal.me/mikepenz](http://paypal.me/mikepenz)\n\n\n* Peter Gulko\n  * [github.com/zTrap](https://github.com/zTrap)\n\n# License\n\n    Copyright 2019 Mike Penz\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n'