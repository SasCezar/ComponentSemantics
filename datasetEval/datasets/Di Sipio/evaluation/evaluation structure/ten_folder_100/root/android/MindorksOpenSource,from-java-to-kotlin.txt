b'<p align="center">\n<img alt="FromJavaToKotlin" src="https://raw.githubusercontent.com/MindorksOpenSource/from-java-to-kotlin/master/assets/from_java_to_kotlin.png">\n</p>\n\n# From Java To Kotlin\n[![Mindorks](https://img.shields.io/badge/mindorks-opensource-blue.svg)](https://mindorks.com/open-source-projects)\n[![Mindorks Community](https://img.shields.io/badge/join-community-blue.svg)](https://mindorks.com/join-community)\n[![Mindorks Android Store](https://img.shields.io/badge/Mindorks%20Android%20Store-From%20Java%20To%20Kotlin-blue.svg?style=flat)](https://mindorks.com/android/store)\n\n> From Java To Kotlin - Your Cheat Sheet For Java To Kotlin\n\n[\xe4\xb8\xad\xe6\x96\x87\xe6\x94\xaf\xe6\x8c\x81](https://github.com/MindorksOpenSource/from-java-to-kotlin/blob/master/README-ZH.md)\n---\n## Print to Console\n> Java\n\n```java\nSystem.out.print("Amit Shekhar");\nSystem.out.println("Amit Shekhar");\n```\n\n> Kotlin\n\n```kotlin\nprint("Amit Shekhar")\nprintln("Amit Shekhar")\n```\n\n---\n## Constants and Variables\n> Java\n\n```java\nString name = "Amit Shekhar";\nfinal String name = "Amit Shekhar";\n```\n\n> Kotlin\n\n```kotlin\nvar name = "Amit Shekhar"\nval name = "Amit Shekhar"\n```\n\n---\n## Assigning the null value\n> Java\n\n```java\nString otherName;\notherName = null;\n```\n\n> Kotlin\n\n```kotlin\nvar otherName : String?\notherName = null\n```\n\n---\n## Verify if value is null\n> Java\n\n```java\nif (text != null) {\n  int length = text.length();\n}\n```\n\n> Kotlin\n\n```kotlin\ntext?.let {\n    val length = text.length\n}\n// or simply\nval length = text?.length\n```\n\n---\n## Concatenation of strings\n> Java\n\n```java\nString firstName = "Amit";\nString lastName = "Shekhar";\nString message = "My name is: " + firstName + " " + lastName;\n```\n\n> Kotlin\n\n```kotlin\nvar firstName = "Amit"\nvar lastName = "Shekhar"\nvar message = "My name is: $firstName $lastName"\n```\n\n---\n## New line in string\n> Java\n\n```java\nString text = "First Line\\n" +\n              "Second Line\\n" +\n              "Third Line";\n```\n\n> Kotlin\n\n```kotlin\nval text = """\n        |First Line\n        |Second Line\n        |Third Line\n        """.trimMargin()\n```\n\n---\n## Ternary Operations\n> Java\n\n```java\nString text = x > 5 ? "x > 5" : "x <= 5";\n\nString message = null;\nlog(message != null ? message : "");\n```\n\n> Kotlin\n\n```kotlin\nval text = if (x > 5)\n              "x > 5"\n           else "x <= 5"\n\nval message: String? = null\nlog(message ?: "")\n```\n\n---\n## Bitwise Operators\n> Java\n\n```java\nfinal int andResult  = a & b;\nfinal int orResult   = a | b;\nfinal int xorResult  = a ^ b;\nfinal int rightShift = a >> 2;\nfinal int leftShift  = a << 2;\nfinal int unsignedRightShift = a >>> 2;\n```\n\n> Kotlin\n\n```kotlin\nval andResult  = a and b\nval orResult   = a or b\nval xorResult  = a xor b\nval rightShift = a shr 2\nval leftShift  = a shl 2\nval unsignedRightShift = a ushr 2\n```\n\n---\n## Check the type and casting\n> Java\n\n```java\nif (object instanceof Car) {\n}\nCar car = (Car) object;\n```\n\n> Kotlin\n\n```kotlin\nif (object is Car) {\n}\nvar car = object as Car\n\n// if object is null\nvar car = object as? Car // var car = object as Car?\n```\n\n---\n## Check the type and casting (implicit)\n> Java\n\n```java\nif (object instanceof Car) {\n   Car car = (Car) object;\n}\n```\n\n> Kotlin\n\n```kotlin\nif (object is Car) {\n   var car = object // smart casting\n}\n\n// if object is null\nif (object is Car?) {\n   var car = object // smart casting, car will be null\n}\n```\n\n---\n## Multiple conditions\n> Java\n\n```java\nif (score >= 0 && score <= 300) { }\n```\n\n> Kotlin\n\n```kotlin\nif (score in 0..300) { }\n```\n\n---\n## Multiple Conditions (Switch case)\n> Java\n\n```java\nint score = // some score;\nString grade;\nswitch (score) {\n\tcase 10:\n\tcase 9:\n\t\tgrade = "Excellent";\n\t\tbreak;\n\tcase 8:\n\tcase 7:\n\tcase 6:\n\t\tgrade = "Good";\n\t\tbreak;\n\tcase 5:\n\tcase 4:\n\t\tgrade = "OK";\n\t\tbreak;\n\tcase 3:\n\tcase 2:\n\tcase 1:\n\t\tgrade = "Fail";\n\t\tbreak;\n\tdefault:\n\t    grade = "Fail";\t\t\t\t\n}\n```\n\n> Kotlin\n\n```kotlin\nvar score = // some score\nvar grade = when (score) {\n\t9, 10 -> "Excellent"\n\tin 6..8 -> "Good"\n\t4, 5 -> "OK"\n\tin 1..3 -> "Fail"\n\telse -> "Fail"\n}\n```\n\n---\n## For-loops\n> Java\n\n```java\nfor (int i = 1; i <= 10 ; i++) { }\n\nfor (int i = 1; i < 10 ; i++) { }\n\nfor (int i = 10; i >= 0 ; i--) { }\n\nfor (int i = 1; i <= 10 ; i+=2) { }\n\nfor (int i = 10; i >= 0 ; i-=2) { }\n\nfor (String item : collection) { }\n\nfor (Map.Entry<String, String> entry: map.entrySet()) { }\n```\n\n> Kotlin\n\n```kotlin\nfor (i in 1..10) { }\n\nfor (i in 1 until 10) { }\n\nfor (i in 10 downTo 0) { }\n\nfor (i in 1..10 step 2) { }\n\nfor (i in 10 downTo 0 step 2) { }\n\nfor (item in collection) { }\n\nfor ((key, value) in map) { }\n```\n\n---\n## Collections\n> Java\n\n```java\nfinal List<Integer> listOfNumber = Arrays.asList(1, 2, 3, 4);\n\nfinal Map<Integer, String> keyValue = new HashMap<Integer, String>();\nmap.put(1, "Amit");\nmap.put(2, "Ali");\nmap.put(3, "Mindorks");\n\n// Java 9\nfinal List<Integer> listOfNumber = List.of(1, 2, 3, 4);\n\nfinal Map<Integer, String> keyValue = Map.of(1, "Amit",\n                                             2, "Ali",\n                                             3, "Mindorks");\n```\n\n> Kotlin\n\n```kotlin\nval listOfNumber = listOf(1, 2, 3, 4)\nval keyValue = mapOf(1 to "Amit",\n                     2 to "Ali",\n                     3 to "Mindorks")\n```\n\n---\n## for each\n> Java\n\n```java\n// Java 7 and below\nfor (Car car : cars) {\n  System.out.println(car.speed);\n}\n\n// Java 8+\ncars.forEach(car -> System.out.println(car.speed));\n\n// Java 7 and below\nfor (Car car : cars) {\n  if (car.speed > 100) {\n    System.out.println(car.speed);\n  }\n}\n\n// Java 8+\ncars.stream().filter(car -> car.speed > 100).forEach(car -> System.out.println(car.speed));\ncars.parallelStream().filter(car -> car.speed > 100).forEach(car -> System.out.println(car.speed));\n```\n\n> Kotlin\n\n```kotlin\ncars.forEach {\n    println(it.speed)\n}\n\ncars.filter { it.speed > 100 }\n      .forEach { println(it.speed)}\n\n// kotlin 1.1+\ncars.stream().filter { it.speed > 100 }.forEach { println(it.speed)}\ncars.parallelStream().filter { it.speed > 100 }.forEach { println(it.speed)}\n```\n\n---\n## Splitting arrays\n> java\n\n```java\nString[] splits = "param=car".split("=");\nString param = splits[0];\nString value = splits[1];\n```\n\n\n> kotlin\n\n```kotlin\nval (param, value) = "param=car".split("=")\n```\n\n---\n## Defining methods\n> Java\n\n```java\nvoid doSomething() {\n   // logic here\n}\n```\n\n> Kotlin\n\n```kotlin\nfun doSomething() {\n   // logic here\n}\n```\n\n---\n## Variable number of arguments\n> Java\n\n```java\nvoid doSomething(int... numbers) {\n   // logic here\n}\n```\n\n> Kotlin\n\n```kotlin\nfun doSomething(vararg numbers: Int) {\n   // logic here\n}\n```\n\n---\n## Defining methods with return\n> Java\n\n```java\nint getScore() {\n   // logic here\n   return score;\n}\n```\n\n> Kotlin\n\n```kotlin\nfun getScore(): Int {\n   // logic here\n   return score\n}\n\n// as a single-expression function\n\nfun getScore(): Int = score\n\n// even simpler (type will be determined automatically)\n\nfun getScore() = score // return-type is Int\n```\n\n---\n## Returning result of an operation\n> Java\n\n```java\nint getScore(int value) {\n    // logic here\n    return 2 * value;\n}\n```\n\n> Kotlin\n\n```kotlin\nfun getScore(value: Int): Int {\n   // logic here\n   return 2 * value\n}\n\n// as a single-expression function\nfun getScore(value: Int): Int = 2 * value\n\n// even simpler (type will be determined automatically)\n\nfun getScore(value: Int) = 2 * value // return-type is int\n```\n\n---\n## Constructors\n> Java\n\n```java\npublic class Utils {\n\n    private Utils() {\n      // This utility class is not publicly instantiable\n    }\n\n    public static int getScore(int value) {\n        return 2 * value;\n    }\n\n}\n```\n\n> Kotlin\n\n```kotlin\nclass Utils private constructor() {\n\n    companion object {\n\n        fun getScore(value: Int): Int {\n            return 2 * value\n        }\n\n    }\n}\n\n// another way\n\nobject Utils {\n\n    fun getScore(value: Int): Int {\n        return 2 * value\n    }\n\n}\n```\n\n---\n## Getters and Setters\n> Java\n\n```java\npublic class Developer {\n\n    private String name;\n    private int age;\n\n    public Developer(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        Developer developer = (Developer) o;\n\n        if (age != developer.age) return false;\n        return name != null ? name.equals(developer.name) : developer.name == null;\n\n    }\n\n    @Override\n    public int hashCode() {\n        int result = name != null ? name.hashCode() : 0;\n        result = 31 * result + age;\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return "Developer{" +\n                "name=\'" + name + \'\\\'\' +\n                ", age=" + age +\n                \'}\';\n    }\n}\n```\n\n> Kotlin\n\n```kotlin\ndata class Developer(var name: String, var age: Int)\n\n```\n\n---\n## Cloning or copying\n> Java\n\n```java\npublic class Developer implements Cloneable {\n\n \xc2\xa0 \xc2\xa0private String name;\n    private int age;\n\n    public Developer(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return (Developer)super.clone();\n    }\n}\n\n// cloning or copying\nDeveloper dev = new Developer("Mindorks", 30);\ntry {\n    Developer dev2 = (Developer) dev.clone();\n} catch (CloneNotSupportedException e) {\n    // handle exception\n}\n\n```\n\n> Kotlin\n\n```kotlin\ndata class Developer(var name: String, var age: Int)\n\n// cloning or copying\nval dev = Developer("Mindorks", 30)\nval dev2 = dev.copy()\n// in case you only want to copy selected properties\nval dev2 = dev.copy(age = 25)\n\n```\n\n---\n## Class methods\n> Java\n\n```java\npublic class Utils {\n\n    private Utils() {\n      // This utility class is not publicly instantiable\n    }\n\n    public static int triple(int value) {\n        return 3 * value;\n    }\n\n}\n\nint result = Utils.triple(3);\n\n```\n\n> Kotlin\n\n```kotlin\nfun Int.triple(): Int {\n  return this * 3\n}\n\nvar result = 3.triple()\n```\n\n---\n## Defining uninitialized objects\n> Java\n\n```java\nPerson person;\n```\n\n> Kotlin\n\n```kotlin\ninternal lateinit var person: Person\n```\n---\n## enum\n> Java\n\n```java\npublic enum Direction {\n        NORTH(1),\n        SOUTH(2),\n        WEST(3),\n        EAST(4);\n\n        int direction;\n\n        Direction(int direction) {\n            this.direction = direction;\n        }\n\n        public int getDirection() {\n            return direction;\n        }\n    }\n```\n> Kotlin\n\n```kotlin\nenum class Direction constructor(direction: Int) {\n    NORTH(1),\n    SOUTH(2),\n    WEST(3),\n    EAST(4);\n\n    var direction: Int = 0\n        private set\n\n    init {\n        this.direction = direction\n    }\n}\n```\n---\n\n\n## Sorting List\n> Java\n\n```java\nList<Profile> profiles = loadProfiles(context);\nCollections.sort(profiles, new Comparator<Profile>() {\n    @Override\n    public int compare(Profile profile1, Profile profile2) {\n        if (profile1.getAge() > profile2.getAge()) return 1;\n        if (profile1.getAge() < profile2.getAge()) return -1;\n        return 0;\n    }\n});\n\n```\n\n> Kotlin\n\n```kotlin\nval profile = loadProfiles(context)\nprofile.sortedWith(Comparator({ profile1, profile2 ->\n    if (profile1.age > profile2.age) return@Comparator 1\n    if (profile1.age < profile2.age) return@Comparator -1\n    return@Comparator 0\n}))\n```\n---\n\n## Anonymous Class\n> Java\n\n```java\n AsyncTask<Void, Void, Profile> task = new AsyncTask<Void, Void, Profile>() {\n    @Override\n    protected Profile doInBackground(Void... voids) {\n        // fetch profile from API or DB\n        return null;\n    }\n\n    @Override\n    protected void onPreExecute() {\n        super.onPreExecute();\n        // do something\n    }\n};\n\n```\n\n> Kotlin\n\n```kotlin\nval task = object : AsyncTask<Void, Void, Profile>() {\n    override fun doInBackground(vararg voids: Void): Profile? {\n        // fetch profile from API or DB\n        return null\n    }\n\n    override fun onPreExecute() {\n        super.onPreExecute()\n        // do something\n    }\n}\n```\n---\n## Initialization block\n> Java\n\n```java\npublic class User {\n    {  //Initialization block\n        System.out.println("Init block");\n    }\n}\n\n```\n\n> Kotlin\n\n```kotlin\n   class User {\n        init { // Initialization block\n            println("Init block")\n        }\n    }\n```\n\n---\n\n### Important things to know in Kotlin\n* [Learn Kotlin - lateinit vs lazy](https://blog.mindorks.com/learn-kotlin-lateinit-vs-lazy)\n* [Learn Kotlin - apply vs with](https://blog.mindorks.com/learn-kotlin-apply-vs-with)\n* [Learn Kotlin - Data Class](https://blog.mindorks.com/learn-kotlin-data-class)\n* [Learn Kotlin - Destructuring Declarations](https://blog.mindorks.com/learn-kotlin-destructuring-declarations)\n* [Learn Kotlin - Extension Functions](https://blog.mindorks.com/learn-kotlin-extension-functions)\n* [Learn Kotlin - Sealed Classes](https://blog.mindorks.com/learn-kotlin-sealed-classes)\n* [Understanding Higher-Order Functions and Lambdas in Kotlin](https://blog.mindorks.com/understanding-higher-order-functions-and-lambdas-in-kotlin)\n* [Understanding inline, noinline, and crossinline in Kotlin](https://blog.mindorks.com/understanding-inline-noinline-and-crossinline-in-kotlin)\n* [Mastering Kotlin Coroutines In Android - Step By Step Guide](https://blog.mindorks.com/mastering-kotlin-coroutines-in-android-step-by-step-guide)\n\n### Found this project useful :heart:\n* Support by clicking the :star: button on the upper right of this page. :v:\n\n[Check out Mindorks awesome open source projects here](https://mindorks.com/open-source-projects)\n\n\n### License\n```\n   Copyright (C) 2017 MINDORKS NEXTGEN PRIVATE LIMITED\n\n   Licensed under the Apache License, Version 2.0 (the "License");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an "AS IS" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n### Contributing to From Java To Kotlin\nJust make a pull request. You are in!\n'