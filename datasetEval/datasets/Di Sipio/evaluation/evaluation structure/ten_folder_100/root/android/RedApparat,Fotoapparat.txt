b'# Fotoapparat\n\n![Build status](https://travis-ci.org/RedApparat/Fotoapparat.svg?branch=master)\n\n![ ](sample/src/main/res/mipmap-xxxhdpi/ic_launcher.png)\n\nCamera API in Android is hard. Having 2 different API for new and old Camera does not make things any easier. But fret not, that is your lucky day! After several years of working with Camera, we came up with Fotoapparat.\n\nWhat it provides:\n\n- Camera API which does not allow you to shoot yourself in the foot.\n- Simple yet powerful parameters customization.\n- Standalone custom `CameraView` which can be integrated into any `Activity`.\n- Fixes and workarounds for device-specific problems.\n- Both Kotlin and Java friendly configurations.\n- Last, but not least, non 0% test coverage.\n\nTaking picture becomes as simple as:\n\n```kotlin\nval fotoapparat = Fotoapparat(\n    context = this,\n    view = cameraView\n)\n\nfotoapparat.start()\n\nfotoapparat\n    .takePicture()\n    .saveToFile(someFile)\n```\n\n## How it works\n\n### Step One\n\nAdd `CameraView` to your layout\n\n```xml\n<io.fotoapparat.view.CameraView\n    android:id="@+id/camera_view"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"/>\n```\n\n### Step Two\n\nConfigure `Fotoapparat` instance.\n\n```kotlin\nFotoapparat(\n            context = this,\n            view = cameraView,                   // view which will draw the camera preview\n            scaleType = ScaleType.CenterCrop,    // (optional) we want the preview to fill the view\n            lensPosition = back(),               // (optional) we want back camera\n            cameraConfiguration = configuration, // (optional) define an advanced configuration\n            logger = loggers(                    // (optional) we want to log camera events in 2 places at once\n                     logcat(),                   // ... in logcat\n                     fileLogger(this)            // ... and to file\n            ),\n            cameraErrorCallback = { error -> }   // (optional) log fatal errors\n    )\n```\n\nCheck the [wiki for the `configuration` options e.g. change iso](https://github.com/Fotoapparat/Fotoapparat/wiki/Configuration-Kotlin)\n\nAre you using Java only? See our [wiki for the java-friendly configuration](https://github.com/Fotoapparat/Fotoapparat/wiki/Configuration-Java).\n\n### Step Three\n\nCall `start()` and `stop()`. No rocket science here.\n\n```kotlin\noverride fun onStart() {\n    super.onStart()\n    fotoapparat.start()\n}\n\noverride fun onStop() {\n    super.onStop()\n    fotoapparat.stop()\n}\n```\n\n### Take a picture\n\nFinally, we are ready to take a picture. You have various options.\n\n```kotlin\nval photoResult = fotoapparat.takePicture()\n\n// Asynchronously saves photo to file\nphotoResult.saveToFile(someFile)\n\n// Asynchronously converts photo to bitmap and returns the result on the main thread\nphotoResult\n    .toBitmap()\n    .whenAvailable { bitmapPhoto ->\n            val imageView = (ImageView) findViewById(R.id.result)\n\n            imageView.setImageBitmap(bitmapPhoto.bitmap)\n            imageView.setRotation(-bitmapPhoto.rotationDegrees)\n    }\n\n// Of course, you can also get a photo in a blocking way. Do not do it on the main thread though.\nval result = photoResult.toBitmap().await()\n\n// Convert asynchronous events to RxJava 1.x/2.x types.\n// See /fotoapparat-adapters/ module\nphotoResult\n        .toBitmap()\n        .toSingle()\n        .subscribe { bitmapPhoto ->\n\n        }\n```\n\n## Update parameters\n\nIt is also possible to update some parameters after `Fotoapparat` was already started.\n\n```kotlin\nfotoapparat.updateConfiguration(\n        UpdateConfiguration(\n                flashMode = if (isChecked) torch() else off()\n                // ...\n                // all the parameters available in CameraConfiguration\n        )\n)\n```\n\nOr alternatively, you may provide updates on an existing full configuration.\n\n```kotlin\nval configuration = CameraConfiguration(\n    // A full configuration\n    // ...\n)\n\nfotoapparat.updateConfiguration(\n    configuration.copy(\n            flashMode = if (isChecked) torch() else off()\n            // all the parameters available in CameraConfiguration\n    )\n)\n```\n\n## Switch cameras\n\nIn order to switch between cameras, `Fotoapparat.switchTo()` can be used with the new desired `lensPosition` and its `cameraConfiguration`.\n\n```kotlin\nfotoapparat.switchTo(\n    lensPosition = front(),\n    cameraConfiguration = newConfigurationForFrontCamera\n)\n```\n\n## Set up\n\nAdd dependency to your `build.gradle`\n\n```groovy\nimplementation \'io.fotoapparat:fotoapparat:2.7.0\'\n```\n\nCamera permission will be automatically added to your `AndroidManifest.xml`. Do not forget to request this permission on Marshmallow and higher.\n\n## Face detection\n\nOptionally, you can check out our other library which adds face detection capabilities - [FaceDetector](https://github.com/Fotoapparat/FaceDetector).\n\n## Credits\n\nWe want to say thanks to [Mark Murphy](https://github.com/commonsguy) for the awesome job he did with [CWAC-Camera](https://github.com/commonsguy/cwac-camera). We were using his library for a couple of years and now we feel that Fotoapparat is a next step in the right direction.\n\nWe also want to say many thanks to [Leander Lenzing](http://leanderlenzing.com/) for the amazing icon. Don\'t forget to follow his work in [dribbble](https://dribbble.com/leanderlenzing).\n\n## License\n\n```\nCopyright 2017 Fotoapparat\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n'