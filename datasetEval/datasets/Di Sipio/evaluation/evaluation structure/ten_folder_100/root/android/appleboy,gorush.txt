b'# gorush\n\nA push notification micro server using [Gin](https://github.com/gin-gonic/gin) framework written in Go (Golang) and see the [demo app](https://github.com/appleboy/flutter-gorush).\n\n[![GoDoc](https://godoc.org/github.com/appleboy/gorush?status.svg)](https://godoc.org/github.com/appleboy/gorush)\n[![Build Status](https://cloud.drone.io/api/badges/appleboy/gorush/status.svg)](https://cloud.drone.io/appleboy/gorush)\n[![Build status](https://ci.appveyor.com/api/projects/status/ka4hvplssp1q2s5u?svg=true)](https://ci.appveyor.com/project/appleboy/gorush-fp5dh)\n[![codecov](https://codecov.io/gh/appleboy/gorush/branch/master/graph/badge.svg)](https://codecov.io/gh/appleboy/gorush)\n[![Go Report Card](https://goreportcard.com/badge/github.com/appleboy/gorush)](https://goreportcard.com/report/github.com/appleboy/gorush)\n[![codebeat badge](https://codebeat.co/badges/0a4eff2d-c9ac-46ed-8fd7-b59942983390)](https://codebeat.co/projects/github-com-appleboy-gorush)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/c82e0ed283474c5686d705ce64d004f7)](https://www.codacy.com/app/appleboy/gorush?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=appleboy/gorush&amp;utm_campaign=Badge_Grade)\n[![Docker Pulls](https://img.shields.io/docker/pulls/appleboy/gorush.svg)](https://hub.docker.com/r/appleboy/gorush/)\n[![](https://images.microbadger.com/badges/image/appleboy/gorush.svg)](https://microbadger.com/images/appleboy/gorush "Get your own image badge on microbadger.com")\n[![Release](https://github-release-version.herokuapp.com/github/appleboy/gorush/release.svg?style=flat)](https://github.com/appleboy/gorush/releases/latest)\n\n## Contents\n\n- [gorush](#gorush)\n  - [Contents](#contents)\n  - [Support Platform](#support-platform)\n  - [Features](#features)\n  - [Memory Usage](#memory-usage)\n  - [Basic Usage](#basic-usage)\n    - [Download a binary](#download-a-binary)\n    - [Install from source](#install-from-source)\n      - [Prerequisite Tools](#prerequisite-tools)\n      - [Fetch from GitHub](#fetch-from-github)\n    - [Command Usage](#command-usage)\n    - [Send Android notification](#send-android-notification)\n    - [Send iOS notification](#send-ios-notification)\n    - [Send Android or iOS notifications using Firebase](#send-android-or-ios-notifications-using-firebase)\n  - [Run gorush web server](#run-gorush-web-server)\n  - [Web API](#web-api)\n    - [GET /api/stat/go](#get-apistatgo)\n    - [GET /api/stat/app](#get-apistatapp)\n    - [GET /sys/stats](#get-sysstats)\n    - [GET /metrics](#get-metrics)\n    - [POST /api/push](#post-apipush)\n    - [Request body](#request-body)\n    - [iOS alert payload](#ios-alert-payload)\n    - [iOS sound payload](#ios-sound-payload)\n    - [Android notification payload](#android-notification-payload)\n    - [iOS Example](#ios-example)\n    - [Android Example](#android-example)\n    - [Response body](#response-body)\n  - [Run gRPC service](#run-grpc-service)\n  - [Run gorush in Docker](#run-gorush-in-docker)\n  - [Run gorush in Kubernetes](#run-gorush-in-kubernetes)\n    - [Quick Start](#quick-start)\n    - [Create the Service Controller for AWS ELB](#create-the-service-controller-for-aws-elb)\n    - [Ingress Controller for AWS ALB](#ingress-controller-for-aws-alb)\n    - [Clean up the gorush:](#clean-up-the-gorush)\n  - [Run gorush in AWS Lambda](#run-gorush-in-aws-lambda)\n    - [Build gorush binary](#build-gorush-binary)\n    - [Deploy gorush application](#deploy-gorush-application)\n  - [Stargazers over time](#stargazers-over-time)\n  - [License](#license)\n\n<a href="https://www.buymeacoffee.com/appleboy" target="_blank"><img src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="Buy Me A Coffee" style="height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;" ></a>\n\n## Support Platform\n\n- [APNS](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html)\n- [FCM](https://firebase.google.com/)\n\n## Features\n\n- Support [Firebase Cloud Messaging](https://firebase.google.com/docs/cloud-messaging) using [go-fcm](https://github.com/appleboy/go-fcm) library for Android.\n- Support [HTTP/2](https://http2.github.io/) Apple Push Notification Service using [apns2](https://github.com/sideshow/apns2) library.\n- Support [YAML](https://github.com/go-yaml/yaml) configuration.\n- Support command line to send single Android or iOS notification.\n- Support Web API to send push notification.\n- Support graceful restart & zero downtime deploy using [facebook grace](https://github.com/facebookgo/grace).\n- Support [HTTP/2](https://http2.github.io/) or HTTP/1.1 protocol.\n- Support notification queue and multiple workers.\n- Support `/api/stat/app` show notification success and failure counts.\n- Support `/api/config` show your [YAML](https://en.wikipedia.org/wiki/YAML) config.\n- Support store app stat to memory, [Redis](http://redis.io/), [BoltDB](https://github.com/boltdb/bolt), [BuntDB](https://github.com/tidwall/buntdb), [LevelDB](https://github.com/syndtr/goleveldb) or [BadgerDB](https://github.com/dgraph-io/badger).\n- Support `p8`, `p12` or `pem` format of iOS certificate file.\n- Support `/sys/stats` show response time, status code count, etc.\n- Support for HTTP proxy to Google server (FCM).\n- Support retry send notification if server response is fail.\n- Support expose [prometheus](https://prometheus.io/) metrics.\n- Support install TLS certificates from [Let\'s Encrypt](https://letsencrypt.org/) automatically.\n- Support send notification through [RPC](https://en.wikipedia.org/wiki/Remote_procedure_call) protocol, we use [gRPC](https://grpc.io/) as default framework.\n- Support running in Docker, [Kubernetes](https://kubernetes.io/) or [AWS Lambda](https://aws.amazon.com/lambda) ([Native Support in Golang](https://aws.amazon.com/blogs/compute/announcing-go-support-for-aws-lambda/))\n\nSee the default [YAML config example](config/config.yml):\n\n[embedmd]:# (config/testdata/config.yml yaml)\n```yaml\ncore:\n  enabled: true # enabale httpd server\n  address: "" # ip address to bind (default: any)\n  port: "8088" # ignore this port number if auto_tls is enabled (listen 443).\n  worker_num: 0 # default worker number is runtime.NumCPU()\n  queue_num: 0 # default queue number is 8192\n  max_notification: 100\n  sync: false # set true if you need get error message from fail push notification in API response.\n  feedback_hook_url: "" # set a hook url if you need get error message asynchronously from fail push notification in API response.\n  mode: "release"\n  ssl: false\n  cert_path: "cert.pem"\n  key_path: "key.pem"\n  cert_base64: ""\n  key_base64: ""\n  http_proxy: "" # only working for FCM server\n  pid:\n    enabled: false\n    path: "gorush.pid"\n    override: true\n  auto_tls:\n    enabled: false # Automatically install TLS certificates from Let\'s Encrypt.\n    folder: ".cache" # folder for storing TLS certificates\n    host: "" # which domains the Let\'s Encrypt will attempt\n\ngrpc:\n  enabled: false # enabale gRPC server\n  port: 9000\n\napi:\n  push_uri: "/api/push"\n  stat_go_uri: "/api/stat/go"\n  stat_app_uri: "/api/stat/app"\n  config_uri: "/api/config"\n  sys_stat_uri: "/sys/stats"\n  metric_uri: "/metrics"\n  health_uri: "/healthz"\n\nandroid:\n  enabled: true\n  apikey: "YOUR_API_KEY"\n  max_retry: 0 # resend fail notification, default value zero is disabled\n\nios:\n  enabled: false\n  key_path: "key.pem"\n  key_base64: "" # load iOS key from base64 input\n  key_type: "pem" # could be pem, p12 or p8 type\n  password: "" # certificate password, default as empty string.\n  production: false\n  max_retry: 0 # resend fail notification, default value zero is disabled\n  key_id: "" # KeyID from developer account (Certificates, Identifiers & Profiles -> Keys)\n  team_id: "" # TeamID from developer account (View Account -> Membership)\n\nlog:\n  format: "string" # string or json\n  access_log: "stdout" # stdout: output to console, or define log path like "log/access_log"\n  access_level: "debug"\n  error_log: "stderr" # stderr: output to console, or define log path like "log/error_log"\n  error_level: "error"\n  hide_token: true\n\nstat:\n  engine: "memory" # support memory, redis, boltdb, buntdb or leveldb\n  redis:\n    addr: "localhost:6379"\n    password: ""\n    db: 0\n  boltdb:\n    path: "bolt.db"\n    bucket: "gorush"\n  buntdb:\n    path: "bunt.db"\n  leveldb:\n    path: "level.db"\n```\n\n## Memory Usage\n\nMemory average usage: **28Mb** (the total bytes of memory obtained from the OS.)\n\n![memory usage](screenshot/memory.png)\n\nTest Command (We use [bat](https://github.com/astaxie/bat) as default cli tool.):\n\n```sh\nfor i in {1..9999999}; do bat -b.N=1000 -b.C=100 POST localhost:8088/api/push notifications:=@notification.json; sleep 1;  done\n```\n\n## Basic Usage\n\nHow to send push notification using `gorush` command? (Android or iOS)\n\n### Download a binary\n\nThe pre-compiled binaries can be downloaded from [release page](https://github.com/appleboy/gorush/releases).\n\nWith `Go` installed\n\n```sh\ngo get -u -v github.com/appleboy/gorush\n```\n\nOn linux\n\n```sh\nwget https://github.com/appleboy/gorush/releases/download/v1.11.2/gorush-v1.11.2-linux-amd64 -O gorush\n```\n\nOn OS X\n\n```sh\nwget https://github.com/appleboy/gorush/releases/download/v1.11.2/gorush-v1.11.2-darwin-amd64 -O gorush\n```\n\nOn Windows\n\n```sh\nwget https://github.com/appleboy/gorush/releases/download/v1.11.2/gorush-v1.11.2-windows-amd64.exe -O gorush.exe\n```\n\nOn macOS, use Homebrew.\n\n```sh\nbrew install --HEAD https://github.com/appleboy/gorush/raw/master/HomebrewFormula/gorush.rb\n```\n\n### Install from source\n\n#### Prerequisite Tools\n\n- [Git](http://git-scm.com/)\n- [Go (at least Go 1.11)](https://golang.org/dl/)\n\n#### Fetch from GitHub\n\nGorush uses the Go Modules support built into Go 1.11 to build. The easiest way to get started is to clone Gorush in a directory outside of the GOPATH, as in the following example:\n\n```sh\nmkdir $HOME/src\ncd $HOME/src\ngit clone https://github.com/appleboy/gorush.git\ncd gorush\ngo install\n```\n\n### Command Usage\n\n```sh\n  ________                              .__\n /  _____/   ____ _______  __ __  ______|  |__\n/   \\  ___  /  _ \\\\_  __ \\|  |  \\/  ___/|  |  \\\n\\    \\_\\  \\(  <_> )|  | \\/|  |  /\\___ \\ |   Y  \\\n \\______  / \\____/ |__|   |____//____  >|___|  /\n        \\/                           \\/      \\/\n\nUsage: gorush [options]\n\nServer Options:\n    -A, --address <address>          Address to bind (default: any)\n    -p, --port <port>                Use port for clients (default: 8088)\n    -c, --config <file>              Configuration file path\n    -m, --message <message>          Notification message\n    -t, --token <token>              Notification token\n    -e, --engine <engine>            Storage engine (memory, redis ...)\n    --title <title>                  Notification title\n    --proxy <proxy>                  Proxy URL (only for GCM)\n    --pid <pid path>                 Process identifier path\n    --redis-addr <redis addr>        Redis addr (default: localhost:6379)\niOS Options:\n    -i, --key <file>                 certificate key file path\n    -P, --password <password>        certificate key password\n    --ios                            enabled iOS (default: false)\n    --production                     iOS production mode (default: false)\nAndroid Options:\n    -k, --apikey <api_key>           Android API Key\n    --android                        enabled android (default: false)\nCommon Options:\n    --topic <topic>                  iOS or Android topic message\n    -h, --help                       Show this message\n    -v, --version                    Show version\n```\n\n### Send Android notification\n\nSend single notification with the following command.\n\n```bash\ngorush -android -m "your message" -k "API Key" -t "Device token"\n```\n\nSend messages to topics.\n\n```bash\ngorush --android --topic "/topics/foo-bar" \\\n  -m "This is a Firebase Cloud Messaging Topic Message" \\\n  -k your_api_key\n```\n\n- `-m`: Notification message.\n- `-k`: [Firebase Cloud Messaging](https://firebase.google.com/docs/cloud-messaging) api key\n- `-t`: Device token.\n- `--title`: Notification title.\n- `--topic`: Send messages to topics. note: don\'t add device token.\n- `--proxy`: Set http proxy url. (only working for FCM)\n\n### Send iOS notification\n\nSend single notification with the following command.\n\n```bash\n$ gorush -ios -m "your message" -i "your certificate path" \\\n  -t "device token" --topic "apns topic"\n```\n\n- `-m`: Notification message.\n- `-i`: Apple Push Notification Certificate path (`pem` or `p12` file).\n- `-t`: Device token.\n- `--title`: Notification title.\n- `--topic`: The topic of the remote notification.\n- `--password`: The certificate password.\n\nThe default endpoint is APNs development. Please add `-production` flag for APNs production push endpoint.\n\n```bash\n$ gorush -ios -m "your message" -i "your certificate path" \\\n  -t "device token" \\\n  -production\n```\n\n### Send Android or iOS notifications using Firebase\n\nSend single notification with the following command:\n\n```bash\ngorush -android -m "your message" -k "API key" -t "Device token"\n```\n\n## Run gorush web server\n\nPlease make sure your [config.yml](config/config.yml) exist. Default port is `8088`.\n\n```bash\n# for default config\n$ gorush\n# for custom config file\n$ gorush -c config.yml\n```\n\nGet go status of api server using [httpie](https://github.com/jkbrzt/httpie) tool:\n\n```bash\nhttp -v --verify=no --json GET http://localhost:8088/api/stat/go\n```\n\n## Web API\n\nGorush support the following API.\n\n- **GET**  `/api/stat/go` Golang cpu, memory, gc, etc information. Thanks for [golang-stats-api-handler](https://github.com/fukata/golang-stats-api-handler).\n- **GET**  `/api/stat/app` show notification success and failure counts.\n- **GET**  `/api/config` show server yml config file.\n- **POST** `/api/push` push ios and android notifications.\n\n### GET /api/stat/go\n\nGolang cpu, memory, gc, etc information. Response with `200` http status code.\n\n```json\n{\n  "time": 1460686815848046600,\n  "go_version": "go1.6.1",\n  "go_os": "darwin",\n  "go_arch": "amd64",\n  "cpu_num": 4,\n  "goroutine_num": 15,\n  "gomaxprocs": 4,\n  "cgo_call_num": 1,\n  "memory_alloc": 7455192,\n  "memory_total_alloc": 8935464,\n  "memory_sys": 12560632,\n  "memory_lookups": 17,\n  "memory_mallocs": 31426,\n  "memory_frees": 11772,\n  "memory_stack": 524288,\n  "heap_alloc": 7455192,\n  "heap_sys": 8912896,\n  "heap_idle": 909312,\n  "heap_inuse": 8003584,\n  "heap_released": 0,\n  "heap_objects": 19654,\n  "gc_next": 9754725,\n  "gc_last": 1460686815762559700,\n  "gc_num": 2,\n  "gc_per_second": 0,\n  "gc_pause_per_second": 0,\n  "gc_pause": [\n    0.326576,\n    0.227096\n  ]\n}\n```\n\n### GET /api/stat/app\n\nShow success or failure counts information of notification.\n\n```json\n{\n  "version": "v1.6.2",\n  "queue_max": 8192,\n  "queue_usage": 0,\n  "total_count": 77,\n  "ios": {\n    "push_success": 19,\n    "push_error": 38\n  },\n  "android": {\n    "push_success": 10,\n    "push_error": 10\n  }\n}\n```\n\n### GET /sys/stats\n\nShow response time, status code count, etc.\n\n```json\n{\n  "pid": 80332,\n  "uptime": "1m42.428010614s",\n  "uptime_sec": 102.428010614,\n  "time": "2016-06-26 12:27:11.675973571 +0800 CST",\n  "unixtime": 1466915231,\n  "status_code_count": { },\n  "total_status_code_count": {\n    "200": 5\n  },\n  "count": 0,\n  "total_count": 5,\n  "total_response_time": "10.422441ms",\n  "total_response_time_sec": 0.010422441000000001,\n  "average_response_time": "2.084488ms",\n  "average_response_time_sec": 0.0020844880000000002\n}\n```\n\n### GET /metrics\n\nSupport expose [prometheus](https://prometheus.io/) metrics.\n\n![metrics screenshot](screenshot/metrics.png)\n\n### POST /api/push\n\nSimple send iOS notification example, the `platform` value is `1`:\n\n```json\n{\n  "notifications": [\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 1,\n      "message": "Hello World iOS!"\n    }\n  ]\n}\n```\n\nSimple send Android notification example, the `platform` value is `2`:\n\n```json\n{\n  "notifications": [\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 2,\n      "message": "Hello World Android!"\n    }\n  ]\n}\n```\n\nSimple send notification on Android and iOS devices using Firebase, the `platform` value is `2`:\n\n```json\n{\n  "notifications": [\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 2,\n      "message": "This notification will go to iOS and Android platform via Firebase!"\n    }\n  ]\n}\n```\n\nSend multiple notifications as below:\n\n```json\n{\n  "notifications": [\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 1,\n      "message": "Hello World iOS!"\n    },\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 2,\n      "message": "Hello World Android!"\n    },\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 2,\n      "message": "Hello World!"\n    },\n    .....\n  ]\n}\n```\n\nSee more example about [iOS](#ios-example) or [Android](#android-example).\n\n### Request body\n\nThe Request body must have a notifications array. The following is a parameter table for each notification.\n\n| name                    | type         | description                                                                                       | required | note                                                          |\n|-------------------------|--------------|---------------------------------------------------------------------------------------------------|----------|---------------------------------------------------------------|\n| notif_id                | string       | A unique string that identifies the notification for async feedback                               | -        |                                                               |\n| tokens                  | string array | device tokens                                                                                     | o        |                                                               |\n| platform                | int          | platform(iOS,Android)                                                                             | o        | 1=iOS, 2=Android (Firebase)                                   |\n| message                 | string       | message for notification                                                                          | -        |                                                               |\n| title                   | string       | notification title                                                                                | -        |                                                               |\n| priority                | string       | Sets the priority of the message.                                                                 | -        | `normal` or `high`                                            |\n| content_available       | bool         | data messages wake the app by default.                                                            | -        |                                                               |\n| sound                   | interface{}  | sound type                                                                                        | -        |                                                               |\n| data                    | string array | extensible partition                                                                              | -        |                                                               |\n| retry                   | int          | retry send notification if fail response from server. Value must be small than `max_retry` field. | -        |                                                               |\n| topic                   | string       | send messages to topics                                                                           |          |                                                               |\n| api_key                 | string       | api key for firebase cloud message                                                                | -        | only Android                                                  |\n| to                      | string       | The value must be a registration token, notification key, or topic.                               | -        | only Android                                                  |\n| collapse_key            | string       | a key for collapsing notifications                                                                | -        | only Android                                                  |\n| delay_while_idle        | bool         | a flag for device idling                                                                          | -        | only Android                                                  |\n| time_to_live            | uint         | expiration of message kept on FCM storage                                                         | -        | only Android                                                  |\n| restricted_package_name | string       | the package name of the application                                                               | -        | only Android                                                  |\n| dry_run                 | bool         | allows developers to test a request without actually sending a message                            | -        | only Android                                                  |\n| notification            | string array | payload of a FCM message                                                                          | -        | only Android. See the [detail](#android-notification-payload) |\n| expiration              | int          | expiration for notification                                                                       | -        | only iOS                                                      |\n| apns_id                 | string       | A canonical UUID that identifies the notification                                                 | -        | only iOS                                                      |\n| push_type               | string       | The type of the notification. The value of this header is alert or background.                    | -        | only iOS                                                      |\n| badge                   | int          | badge count                                                                                       | -        | only iOS                                                      |\n| category                | string       | the UIMutableUserNotificationCategory object                                                      | -        | only iOS                                                      |\n| alert                   | string array | payload of a iOS message                                                                          | -        | only iOS. See the [detail](#ios-alert-payload)                |\n| mutable_content         | bool         | enable Notification Service app extension.                                                        | -        | only iOS(10.0+).                                              |\n| name                    | string       | sets the name value on the aps sound dictionary.                                                  | -        | only iOS                                                      |\n| volume                  | float32      | sets the volume value on the aps sound dictionary.                                                | -        | only iOS                                                      |\n\n### iOS alert payload\n\n| name           | type             | description                                                                                      | required | note |\n|----------------|------------------|--------------------------------------------------------------------------------------------------|----------|------|\n| title          | string           | Apple Watch & Safari display this string as part of the notification interface.                  | -        |      |\n| body           | string           | The text of the alert message.                  | -        |      |\n| subtitle       | string           | Apple Watch & Safari display this string as part of the notification interface.                  | -        |      |\n| action         | string           | The label of the action button. This one is required for Safari Push Notifications.              | -        |      |\n| action-loc-key | string           | If a string is specified, the system displays an alert that includes the Close and View buttons. | -        |      |\n| launch-image   | string           | The filename of an image file in the app bundle, with or without the filename extension.         | -        |      |\n| loc-args       | array of strings | Variable string values to appear in place of the format specifiers in loc-key.                   | -        |      |\n| loc-key        | string           | A key to an alert-message string in a Localizable.strings file for the current localization.     | -        |      |\n| title-loc-args | array of strings | Variable string values to appear in place of the format specifiers in title-loc-key.             | -        |      |\n| title-loc-key  | string           | The key to a title string in the Localizable.strings file for the current localization.          | -        |      |\n\nSee more detail about [APNs Remote Notification Payload](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/PayloadKeyReference.html).\n\n### iOS sound payload\n\n| name           | type             | description                                                                                      | required | note |\n|----------------|------------------|--------------------------------------------------------------------------------------------------|----------|------|\n| name           | string           | sets the name value on the aps sound dictionary.                                                 | -        |      |\n| volume         | float32          | sets the volume value on the aps sound dictionary.                                               | -        |      |\n| critical       | int              | sets the critical value on the aps sound dictionary.                                             | -        |      |\n\nrequest format:\n\n```json\n{\n  "sound": {\n    "critical": 1,\n    "name": "default",\n    "volume": 2.0\n  }\n}\n```\n\n### Android notification payload\n\n| name           | type   | description                                                                                               | required | note |\n|----------------|--------|-----------------------------------------------------------------------------------------------------------|----------|------|\n| icon           | string | Indicates notification icon.                                                                              | -        |      |\n| tag            | string | Indicates whether each notification message results in a new entry on the notification center on Android. | -        |      |\n| color          | string | Indicates color of the icon, expressed in #rrggbb format                                                  | -        |      |\n| click_action   | string | The action associated with a user click on the notification.                                              | -        |      |\n| body_loc_key   | string | Indicates the key to the body string for localization.                                                    | -        |      |\n| body_loc_args  | string | Indicates the string value to replace format specifiers in body string for localization.                  | -        |      |\n| title_loc_key  | string | Indicates the key to the title string for localization.                                                   | -        |      |\n| title_loc_args | string | Indicates the string value to replace format specifiers in title string for localization.                 | -        |      |\n\nSee more detail about [Firebase Cloud Messaging HTTP Protocol reference](https://firebase.google.com/docs/cloud-messaging/http-server-ref#send-downstream).\n\n### iOS Example\n\nSend normal notification.\n\n```json\n{\n  "notifications": [\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 1,\n      "message": "Hello World iOS!"\n    }\n  ]\n}\n```\n\nThe following payload asks the system to display an alert with a Close button and a single action button.The title and body keys provide the contents of the alert. The \xe2\x80\x9cPLAY\xe2\x80\x9d string is used to retrieve a localized string from the appropriate Localizable.strings file of the app. The resulting string is used by the alert as the title of an action button. This payload also asks the system to badge the app\xe2\x80\x99s icon with the number 5.\n\n```json\n{\n  "notifications": [\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 1,\n      "badge": 5,\n      "alert": {\n        "title" : "Game Request",\n        "body" : "Bob wants to play poker",\n        "action-loc-key" : "PLAY"\n      }\n    }\n  ]\n}\n```\n\nThe following payload specifies that the device should display an alert message, plays a sound, and badges the app\xe2\x80\x99s icon.\n\n```json\n{\n  "notifications": [\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 1,\n      "message": "You got your emails.",\n      "badge": 9,\n      "sound": {\n        "critical": 1,\n        "name": "default",\n        "volume": 1.0\n      }\n    }\n  ]\n}\n```\n\nAdd other fields which user defined via `data` field.\n\n```json\n{\n  "notifications": [\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 1,\n      "message": "Hello World iOS!",\n      "data": {\n        "key1": "welcome",\n        "key2": 2\n      }\n    }\n  ]\n}\n```\n\nSupport send notification from different environment. See the detail of [issue](https://github.com/appleboy/gorush/issues/246).\n\n```diff\n{\n  "notifications": [\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 1,\n+     "production": true,\n      "message": "Hello World iOS Production!"\n    },\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 1,\n+     "development": true,\n      "message": "Hello World iOS Sandbox!"\n    }\n  ]\n}\n```\n\n### Android Example\n\nSend normal notification.\n\n```json\n{\n  "notifications": [\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 2,\n      "message": "Hello World Android!",\n      "title": "You got message"\n    }\n  ]\n}\n```\n\nAdd `notification` payload.\n\n```json\n{\n  "notifications": [\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 2,\n      "message": "Hello World Android!",\n      "title": "You got message",\n      "notification" : {\n        "icon": "myicon",\n        "color": "#112244"\n      }\n    }\n  ]\n}\n```\n\nAdd other fields which user defined via `data` field.\n\n```json\n{\n  "notifications": [\n    {\n      "tokens": ["token_a", "token_b"],\n      "platform": 2,\n      "message": "Hello World Android!",\n      "title": "You got message",\n      "data": {\n       "Nick" : "Mario",\n       "body" : "great match!",\n       "Room" : "PortugalVSDenmark"\n      }\n    }\n  ]\n}\n```\n\nSend messages to topics\n\n```json\n{\n  "notifications": [\n    {\n      "to": "/topics/foo-bar",\n      "platform": 2,\n      "message": "This is a Firebase Cloud Messaging Topic Message"\n    }\n  ]\n}\n```\n\n### Response body\n\nError response message table:\n\n| status code | message                                    |\n|-------------|--------------------------------------------|\n| 400         | Missing `notifications` field.             |\n| 400         | Notifications field is empty.              |\n| 400         | Number of notifications(50) over limit(10) |\n\nSuccess response:\n\n```json\n{\n  "counts": 60,\n  "logs": [],\n  "success": "ok"\n}\n```\n\nIf you need error logs from sending fail notifications, please set a `feedback_hook_url`. The server with send the failing logs asynchronously to your API as `POST` requests.\n\n```diff\ncore:\n  port: "8088" # ignore this port number if auto_tls is enabled (listen 443).\n  worker_num: 0 # default worker number is runtime.NumCPU()\n  queue_num: 0 # default queue number is 8192\n  max_notification: 100\n  sync: false\n- feedback_hook_url: ""\n+ feedback_hook_url: "https://exemple.com/api/hook"\n```\n\nYou can also switch to **sync** mode by setting the `sync` value as `true` on yaml config.\n\n```diff\ncore:\n  port: "8088" # ignore this port number if auto_tls is enabled (listen 443).\n  worker_num: 0 # default worker number is runtime.NumCPU()\n  queue_num: 0 # default queue number is 8192\n  max_notification: 100\n- sync: false\n+ sync: true\n```\n\nSee the following error format.\n\n```json\n{\n  "counts": 60,\n  "logs": [\n    {\n      "type": "failed-push",\n      "platform": "android",\n      "token": "*******",\n      "message": "Hello World Android!",\n      "error": "InvalidRegistration"\n    },\n    {\n      "type": "failed-push",\n      "platform": "ios",\n      "token": "*****",\n      "message": "Hello World iOS1111!",\n      "error": "Post https://api.push.apple.com/3/device/bbbbb: remote error: tls: revoked certificate"\n    },\n    {\n      "type": "failed-push",\n      "platform": "ios",\n      "token": "*******",\n      "message": "Hello World iOS222!",\n      "error": "Post https://api.push.apple.com/3/device/token_b: remote error: tls: revoked certificate"\n    }\n  ],\n  "success": "ok"\n}\n```\n\n## Run gRPC service\n\nGorush support [gRPC](https://grpc.io/) service. You can enable the gRPC in `config.yml`, default as disabled. Enable the gRPC server:\n\n```sh\nGORUSH_GRPC_ENABLED=true GORUSH_GRPC_PORT=3000 gorush\n```\n\nThe following example code to send single notification in Go.\n\n[embedmd]:# (rpc/example/go/send/main.go go)\n```go\npackage main\n\nimport (\n\t"context"\n\t"log"\n\n\t"github.com/appleboy/gorush/rpc/proto"\n\n\tstructpb "github.com/golang/protobuf/ptypes/struct"\n\t"google.golang.org/grpc"\n)\n\nconst (\n\taddress = "localhost:9000"\n)\n\nfunc main() {\n\t// Set up a connection to the server.\n\tconn, err := grpc.Dial(address, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf("did not connect: %v", err)\n\t}\n\tdefer conn.Close()\n\tc := proto.NewGorushClient(conn)\n\n\tr, err := c.Send(context.Background(), &proto.NotificationRequest{\n\t\tPlatform: 2,\n\t\tTokens:   []string{"1234567890"},\n\t\tMessage:  "test message",\n\t\tBadge:    1,\n\t\tCategory: "test",\n\t\tSound:    "test",\n\t\tAlert: &proto.Alert{\n\t\t\tTitle:    "Test Title",\n\t\t\tBody:     "Test Alert Body",\n\t\t\tSubtitle: "Test Alert Sub Title",\n\t\t\tLocKey:   "Test loc key",\n\t\t\tLocArgs:  []string{"test", "test"},\n\t\t},\n\t\tData: &structpb.Struct{\n\t\t\tFields: map[string]*structpb.Value{\n\t\t\t\t"key1": {\n\t\t\t\t\tKind: &structpb.Value_StringValue{StringValue: "welcome"},\n\t\t\t\t},\n\t\t\t\t"key2": {\n\t\t\t\t\tKind: &structpb.Value_NumberValue{NumberValue: 2},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\tif err != nil {\n\t\tlog.Fatalf("could not greet: %v", err)\n\t}\n\tlog.Printf("Success: %t\\n", r.Success)\n\tlog.Printf("Count: %d\\n", r.Counts)\n}\n```\n\nSee the Node.js example and see more detail frome [README](rpc/example/node/README.md): \n\n[embedmd]:# (rpc/example/node/client.js js)\n```js\nvar messages = require(\'./gorush_pb\');\nvar services = require(\'./gorush_grpc_pb\');\n\nvar grpc = require(\'grpc\');\n\nfunction main() {\n  var client = new services.GorushClient(\'localhost:9000\',\n    grpc.credentials.createInsecure());\n  var request = new messages.NotificationRequest();\n  var alert = new messages.Alert();\n  request.setPlatform(2);\n  request.setTokensList(["1234567890"]);\n  request.setMessage("Hello!!");\n  request.setTitle("hello2");\n  request.setBadge(2);\n  request.setCategory("mycategory");\n  request.setSound("sound")\n  alert.setTitle("title");\n  request.setAlert(alert);\n  request.setThreadid("threadID");\n  request.setContentavailable(false);\n  request.setMutablecontent(false);\n  client.send(request, function (err, response) {\n    if(err) {\n      console.log(err);\n    } else {\n      console.log("Success:", response.getSuccess());\n      console.log("Counts:", response.getCounts());\n    }\n  });\n}\n\nmain();\n```\n\nGRPC Health Checking example: See [document](https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\n[embedmd]:# (rpc/example/go/send/main.go go)\n```go\npackage main\n\nimport (\n\t"context"\n\t"log"\n\n\t"github.com/appleboy/gorush/rpc/proto"\n\n\tstructpb "github.com/golang/protobuf/ptypes/struct"\n\t"google.golang.org/grpc"\n)\n\nconst (\n\taddress = "localhost:9000"\n)\n\nfunc main() {\n\t// Set up a connection to the server.\n\tconn, err := grpc.Dial(address, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf("did not connect: %v", err)\n\t}\n\tdefer conn.Close()\n\tc := proto.NewGorushClient(conn)\n\n\tr, err := c.Send(context.Background(), &proto.NotificationRequest{\n\t\tPlatform: 2,\n\t\tTokens:   []string{"1234567890"},\n\t\tMessage:  "test message",\n\t\tBadge:    1,\n\t\tCategory: "test",\n\t\tSound:    "test",\n\t\tAlert: &proto.Alert{\n\t\t\tTitle:    "Test Title",\n\t\t\tBody:     "Test Alert Body",\n\t\t\tSubtitle: "Test Alert Sub Title",\n\t\t\tLocKey:   "Test loc key",\n\t\t\tLocArgs:  []string{"test", "test"},\n\t\t},\n\t\tData: &structpb.Struct{\n\t\t\tFields: map[string]*structpb.Value{\n\t\t\t\t"key1": {\n\t\t\t\t\tKind: &structpb.Value_StringValue{StringValue: "welcome"},\n\t\t\t\t},\n\t\t\t\t"key2": {\n\t\t\t\t\tKind: &structpb.Value_NumberValue{NumberValue: 2},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\tif err != nil {\n\t\tlog.Fatalf("could not greet: %v", err)\n\t}\n\tlog.Printf("Success: %t\\n", r.Success)\n\tlog.Printf("Count: %d\\n", r.Counts)\n}\n```\n\n## Run gorush in Docker\n\nSet up `gorush` in the cloud in under 5 minutes with zero knowledge of Golang or Linux shell using our [gorush Docker image](https://hub.docker.com/r/appleboy/gorush/).\n\n```bash\ndocker pull appleboy/gorush\ndocker run --name gorush -p 80:8088 appleboy/gorush\n```\n\nRun `gorush` with your own config file.\n\n```bash\ndocker pull appleboy/gorush\ndocker run --name gorush -v ${PWD}/config.yml:/config.yml -p 80:8088 appleboy/gorush\n```\n\nTesting your gorush server using [httpie](https://github.com/jkbrzt/httpie) command.\n\n```bash\nhttp -v --verify=no --json GET http://your.docker.host/api/stat/go\n```\n\n![statue screenshot](screenshot/status.png)\n\n## Run gorush in Kubernetes\n\n### Quick Start\n\nCreate namespace as `gorush` as `gorush` and then your configuration map:\n\n```sh\nkubectl create -f k8s/gorush-namespace.yaml\nkubectl create -f k8s/gorush-configmap.yaml\n```\n\nCreate redis service:\n\n```sh\nkubectl create -f k8s/gorush-redis-deployment.yaml\nkubectl create -f k8s/gorush-redis-service.yaml\n```\n\nCreate gorush deployment controller provides declarative updates for Pods and ReplicaSets:\n\n```sh\nkubectl create -f k8s/gorush-deployment.yaml\n```\n\n### Create the Service Controller for AWS ELB\n\n```sh\nkubectl create -f k8s/gorush-service.yaml\n```\n\n### Ingress Controller for AWS ALB\n\nUpdate the following in `k8s/gorush-service.yaml`\n\n```diff\n-  type: LoadBalancer\n-  # type: NodePort\n+  # type: LoadBalancer\n+  type: NodePort\n```\n\nThen start the AWS ALB by the follwong command.\n\n```sh\nkubectl create -f k8s/gorush-service.yaml\nkubectl create -f k8s/gorush-aws-alb-ingress.yaml\n```\n\n### Clean up the gorush:\n\n```sh\nkubectl delete -f k8s\n```\n\n## Run gorush in AWS Lambda\n\n![lambda](./screenshot/lambda.png)\n\nAWS excited to [announce Go as a supported language for AWS Lambda](https://aws.amazon.com/blogs/compute/announcing-go-support-for-aws-lambda/). You\xe2\x80\x99re going to create an application that uses an [API Gateway](https://aws.amazon.com/apigateway) event source to create a simple Hello World RESTful API.\n\n### Build gorush binary\n\nDownload source code first.\n\n```sh\ngit clone https://github.com/appleboy/gorush.git\ncd gorush && make build_linux_lambda\n```\n\nyou can see the binary file in `release/linux/lambda/` folder\n\n### Deploy gorush application\n\nwe need to build a binary that will run on Linux, and ZIP it up into a deployment package.\n\n```sh\nzip deployment.zip release/linux/lambda/gorush\n```\n\nUpload the `deployment.zip` via web UI or you can try the [drone-lambda](https://github.com/appleboy/drone-lambda) as the following command. it will zip your binary file and upload to AWS Lambda automatically.\n\n```sh\n$ AWS_ACCESS_KEY_ID=YOUR_AWS_ACCESS_KEY_ID \\\n  AWS_SECRET_ACCESS_KEY=YOUR_AWS_SECRET_ACCESS_KEY \\\n  drone-lambda --region ap-southeast-1 \\\n  --function-name gorush \\\n  --source release/linux/lambda/gorush\n```\n\n## Stargazers over time\n\n[![Stargazers over time](https://starcharts.herokuapp.com/appleboy/gorush.svg)](https://starcharts.herokuapp.com/appleboy/gorush)\n\n## License\n\nCopyright 2019 Bo-Yi Wu [@appleboy](https://twitter.com/appleboy).\n\nLicensed under the MIT License.\n'