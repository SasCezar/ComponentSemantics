b'\n# Robust\n \n[![Download](https://api.bintray.com/packages/meituan/maven/com.meituan.robust%3Apatch/images/download.svg?version=0.4.91) ](https://bintray.com/meituan/maven/com.meituan.robust%3Apatch/0.4.91/link)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/Meituan-Dianping/Robust/pulls)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://raw.githubusercontent.com/Meituan-Dianping/Robust/master/LICENSE)  \n\nRobust is an Android HotFix solution with high compatibility and high stability. Robust can fix bugs immediately without publishing apk.\n \n [\xe4\xb8\xad\xe6\x96\x87\xe8\xaf\xb4\xe6\x98\x8e](README-zh.md)\n \n More help on [Wiki](https://github.com/Meituan-Dianping/Robust/wiki)\n \n# Environment\n\n * Mac Linux and Windows\n * Gradle 2.10+ , include 3.0\n * Java 1.7 +\n \n# Usage\n\n1. Add below codes in the module\'s build.gradle.\n\n\t```java\n\tapply plugin: \'com.android.application\'\n\t//please uncomment fellow line before you build a patch\n\t//apply plugin: \'auto-patch-plugin\'\n\tapply plugin: \'robust\'\n\n\tcompile \'com.meituan.robust:robust:0.4.91\'\n\n2. Add below codes in the outest project\'s build.gradle file.\n\n\t```java\n\t buildscript {\n\t    repositories {\n\t        jcenter()\n\t    }\n\t    dependencies {\n\t         classpath \'com.meituan.robust:gradle-plugin:0.4.91\'\n\t         classpath \'com.meituan.robust:auto-patch-plugin:0.4.91\'\n\t   }\n\t}\n\t```\n3. There are some configure items in **app/robust.xml**,such as classes which Robust will insert code,this may diff from projects to projects.Please copy this file to your project.\n\n# Advantages\n\n* Support 2.3 to 9.x Android OS\n* Perfect compatibility\n* Patch takes effect without a reboot\n* Support fixing at method level,including static methods\n* Support add classes and methods\n* Support ProGuard,including inline methods or changing methods\' signature\n\n \n\nWhen you build APK,you may need to save "mapping.txt" and the files in directory "build/outputs/robust/".\n\n# AutoPatch\n \n\nAutoPatch will generate patch for Robust automatically. You just need to fellow below steps to genrate patches. For more details please visit website http://tech.meituan.com/android_autopatch.html\n\n# Steps\n\n1. Put **\'auto-patch-plugin\'** just behind **\'com.android.application\'**\xef\xbc\x8cbut in the front of others plugins\xe3\x80\x82like this:\n\t\n\t```java\n\t apply plugin: \'com.android.application\'\n\t apply plugin: \'auto-patch-plugin\'\n\t```\n2. Put **mapping.txt** and **methodsMap.robust** which are generated when you build the apks in diretory **app/robust/**,if not exists ,create it!\n3. After modifying the code ,please put annotation `@Modify` on the modified methods or invoke  `RobustModify.modify()` (designed for Lambda Expression )in the modified methods:\n\n\t```java\n\t   @Modify\n\t    protected void onCreate(Bundle savedInstanceState) {\n\t        super.onCreate(savedInstanceState);\n\t     }\n\t     //\n\t     protected void onCreate(Bundle savedInstanceState) {\n\t        RobustModify.modify()\n\t        super.onCreate(savedInstanceState);\n\t     }\n\t     \n\t```\n\tUse annotation `@Add` when you neeed to add methods or classes.\n\t\n\t```java\n\t    //add method\n\t    @Add\n\t    public String getString() {\n\t        return "Robust";\n\t    }\n\t    \n\t    //add class\n\t    \n\t    @Add\n\t    public class NewAddCLass {\n\t        public static String get() {\n\t           return "robust";\n\t         }\n\t    }\n\t```\n4. After those steps,you need to run the same gradle command as you build the apk,then you will get patches in directory **app/build/outputs/robust/patch.jar**.\n5. Generating patches always end like this,which means patches is done\n![Success in generating patch](images/patchsuccess_en.png)\n\n# Demo Usage\n1. Excute fellow command to build apk\xef\xbc\x9a\n\n\t```java\n\t./gradlew clean  assembleRelease --stacktrace --no-daemon\n\t```\n2. After install apk on your phone,you need to save **mapping.txt** and **app/build/outputs/robust/methodsMap.robust**\n3. Put mapping.txt and methodsMap.robust which are generated when you build the apks into diretory **app/robust/**,if directory not exists ,create it!\n4. After modifying the code ,please put annotation `@Modify` on the modified methods or invoke  `RobustModify.modify()` (designed for Lambda Expression )in the modified methods.\n5. Run the same gradle command as you build the apk:\n\n\t```java\n\t./gradlew clean  assembleRelease --stacktrace --no-daemon\n\t```\n6. Generating patches always end like this,which means patches is done\n![Success in generating patch](images/patchsuccess_en.png)\n7. Copy patch to your phone\xef\xbc\x9a\n\n\t```java\n\tadb push ~/Desktop/code/robust/app/build/outputs/robust/patch.jar /sdcard/robust/patch.jar\n\t```\n\tpatch directory can be configured in ``PatchManipulateImp``.\n8. Open app,and click **Patch** button,patch is used.\n9. Also you can use our sample patch in **app/robust/sample_patch.jar** ,this dex change text after you click **Jump_second_Activity** Button.\n10. In the demo ,we change the text showed on the second activity which is configured in the method ```getTextInfo(String meituan)``` in class ```SecondActivity``` \n\n# Attentions\n\n1. You should modify inner classes\' private constructors to public modifier.\n2. AutoPatch cannot handle situations which method returns **this**,you may need to wrap it like belows:\n\n\t```java\n\tmethod a(){\n\t  return this;\n\t}\n\t```\n\tchanged to \n\t\t\n\t```java\n\tmethod a(){\n\t  return new B().setThis(this).getThis();\n\t}\n\t```\n3. Not Support add fields,but you can add classes currently, this feature is under testing.\n4. Classes added in patch should  be static nested classes or non-inner classes,and all fields and methods in added class should be public.\n5. Support to  fix bugs in constructors currently is under testing.\n6. Not support methods which only use fields,without method call or new expression. \n7. Support to resources and so file is under testing.\n8. For more help, please visit [Wiki](https://github.com/Meituan-Dianping/Robust/wiki)\n## License\n\n    Copyright 2017 Meituan-Dianping\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n'