b'Floating Search View [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Floating%20Search%20View-green.svg?style=true)](https://android-arsenal.com/details/1/2842)\n=============\n\nAn implementation of a floating search box with search suggestions, also called persistent search bar.\n\n![Alt text](/images/150696.gif)\n![Alt text](/images/1506tq.gif)\n![Alt text](/images/1508kn.gif)\n\n\nNote\n-----\n\nThis project is not being actively maintained. Have a look [here](https://github.com/arimorty/floatingsearchview/wiki) for information\nthat might help you make changes to your own copy of the code base.\n\n\n...\n\n\nUsage\n-----\n\n1. In your dependencies, add\n    ```\n         compile \'com.github.arimorty:floatingsearchview:2.1.1\'\n    ```\n2. Add a FloatingSearchView to your view hierarchy, and make sure that it takes\n   up the full width and height of the screen\n3. Listen to query changes and provide suggestion items that implement SearchSuggestion\n\n**Example:**\n\n```xml\n       <com.arlib.floatingsearchview.FloatingSearchView\n                android:id="@+id/floating_search_view"\n                android:layout_width="match_parent"\n                android:layout_height="match_parent"\n                app:floatingSearch_searchBarMarginLeft="@dimen/search_view_inset"\n                app:floatingSearch_searchBarMarginTop="@dimen/search_view_inset"\n                app:floatingSearch_searchBarMarginRight="@dimen/search_view_inset"\n                app:floatingSearch_searchHint="Search..."\n                app:floatingSearch_suggestionsListAnimDuration="250"\n                app:floatingSearch_showSearchKey="false"\n                app:floatingSearch_leftActionMode="showHamburger"\n                app:floatingSearch_menu="@menu/menu_main"\n                app:floatingSearch_close_search_on_keyboard_dismiss="true"/>\n```\n\n```\n  mSearchView.setOnQueryChangeListener(new FloatingSearchView.OnQueryChangeListener() {\n              @Override\n              public void onSearchTextChanged(String oldQuery, final String newQuery) {\n\n                  //get suggestions based on newQuery\n\n                  //pass them on to the search view\n                  mSearchView.swapSuggestions(newSuggestions);\n              }\n          });\n```\n<br/>\n\n**Left action mode:**\n\nThe left action can be configured as follows:\n\nAdd \n```xml\n   app:floatingSearch_leftActionMode="[insert one of the options from table below]"\n```\n\n<table>\n    <tr>\n        <td>showHamburger</td>\n        <td><img src="https://github.com/arimorty/floatingsearchview/blob/develop/images/vf2oi.gif"/></td>       \n    </tr>    \n    <tr>\n       <td>showSearch</td>\n       <td><img src="https://github.com/arimorty/floatingsearchview/blob/develop/images/vf91i.gif"/></td>        \n    <tr>\n        <td>showHome</td>\n        <td><img src="https://github.com/arimorty/floatingsearchview/blob/develop/images/vf9cp.gif"/></td>       \n    </tr>   \n    <tr>\n        <td>noLeftAction</td>\n        <td><img src="https://github.com/arimorty/floatingsearchview/blob/develop/images/vf2ii.gif"/></td>       \n    </tr>\n</table>\n\nListen to *hamburger* button clicks:\n```\n mSearchView.setOnLeftMenuClickListener(\n        new FloatingSearchView.OnLeftMenuClickListener() { ...} );          \n```\n\nTo quickly connect your **NavigationDrawer** to the *hamburger* button:\n```\n   mSearchView.attachNavigationDrawerToMenuButton(mDrawerLayout);\n```\n\nListen to home (back arrow) button clicks:\n```\n  mSearchView.setOnHomeActionClickListener(\n         new FloatingSearchView.OnHomeActionClickListener() { ... });       \n```\n\n<br/>\n\n**Configure menu items:**\n\n![Alt text](/images/150sg9.gif)\n\nAdd a menu resource\n```xml\n    app:floatingSearch_menu="@menu/menu_main"\n```\n\nIn the menu resource, set items\' ```app:showAsAction="[insert one of the options described in the table below]"```\n\n<table>\n    <tr>\n        <td>never</td>\n        <td>Puts the menu item in the overflow options popup</td>\n    </tr>\n    <tr>\n       <td>ifRoom</td>\n       <td>Shows an action icon for the menu if the following conditions are met:\n       1. The search is not focused.\n       2. There is enough room for it.\n       </td>\n    </tr>\n    <tr>\n        <td>always</td>\n        <td>Shows an action icon for the menu if there is room, regardless of whether the search is focused or not.</td>\n    </tr>   \n</table>\n\nListen for item selections \n```  \n   mSearchView.setOnMenuItemClickListener(new FloatingSearchView.OnMenuItemClickListener() {\n      @Override\n      public void onMenuItemSelected(MenuItem item) {                  \n            \n      }\n   });\n```\n\n<br/>\n\n\n**Configure suggestion item:**\n\nFirst, implement [SearchSuggestion](https://github.com/arimorty/floatingsearchview/blob/master/library/src/main/java/com/arlib/floatingsearchview/suggestions/model/SearchSuggestion.java) \n\n*Optional*:\n\nSet a callback for when a given suggestion is bound to the suggestion list.\n\nFor the history icons to show, you would need to implement this. Refer to the sample app for an [example implementation](https://github.com/arimorty/floatingsearchview/blob/master/sample/src/main/java/com/arlib/floatingsearchviewdemo/fragment/ScrollingSearchExampleFragment.java#L222).\n``` \n   mSearchView.setOnBindSuggestionCallback(new SearchSuggestionsAdapter.OnBindSuggestionCallback() {\n            @Override\n            public void onBindSuggestion(View suggestionView, ImageView leftIcon, TextView textView, SearchSuggestion item, int itemPosition) {\n\n                       //here you can set some attributes for the suggestion\'s left icon and text. For example,\n                       //you can choose your favorite image-loading library for setting the left icon\'s image. \n            }\n\n        });\n``` \n\n<br/>\n\n**Styling:**\n\n<img src="https://github.com/arimorty/floatingsearchview/blob/develop/images/style_light.png" width="350"/>\n<img src="https://github.com/arimorty/floatingsearchview/blob/develop/images/style_dark.png" width="350"/>\n\nAvailable styling:\n\n```xml\n   <style name="SearchView">\n           <item name="floatingSearch_backgroundColor"></item>\n           <item name="floatingSearch_viewSearchInputTextColor"></item>\n           <item name="floatingSearch_viewSuggestionItemTextColor"></item>\n           <item name="floatingSearch_hintTextColor"></item>\n           <item name="floatingSearch_dividerColor"></item>\n           <item name="floatingSearch_clearBtnColor"></item>\n           <item name="floatingSearch_leftActionColor"></item>\n           <item name="floatingSearch_menuItemIconColor"></item>\n           <item name="floatingSearch_suggestionRightIconColor"></item>\n           <item name="floatingSearch_actionMenuOverflowColor"></item>\n   </style>\n```\n### RxBinding Extension\nThe RxBinding library allows you to listen for query changes using RxJava Obervables. \n\n```java\nObservable<CharSequence> queryObservable = RxFloatingSearchView.queryChanges(view);\nqueryObservable.doOnNext { query -> Toast.makeText(this, "Query is %s".format(query), Toast.LENGTH_LONG).show() }.subscribe();\n```\n\n### The Kotlin Extension\nThe Kotlin extension adds an extension function to the view for more goodness.\n\n```kotlin\nview.queryChanges(5).doOnNext { query -> Toast.makeText(this, "Query is %s".format(query), Toast.LENGTH_LONG).show() }.subscribe()\n```\n\n\nLicense\n=======\n\n    Copyright (C) 2015 Ari C.\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n'