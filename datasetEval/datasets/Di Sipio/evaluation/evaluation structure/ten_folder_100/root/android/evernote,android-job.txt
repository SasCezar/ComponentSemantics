b'# DEPRECATED\n\nThis library is not maintained anymore and there will be no further releases except for very critical bug fixes. Use [WorkManager](https://github.com/evernote/android-job#workmanager) instead of this library.\n\n# ~~Android-Job~~\n\nA utility library for Android to run jobs delayed in the background. Depending on the Android version either the `JobScheduler`, `GcmNetworkManager` or `AlarmManager` is getting used. You can find out in [this blog post](https://blog.evernote.com/tech/2015/10/26/unified-job-library-android/) or in [these slides](https://speakerdeck.com/vrallev/doo-z-z-z-z-z-e?slide=50) why you should prefer this library than each separate API. All features from Android Oreo are backward compatible back to Ice Cream Sandwich.\n\n## Download\n\nDownload [the latest version](http://search.maven.org/#search|gav|1|g:"com.evernote"%20AND%20a:"android-job") or grab via Gradle:\n\n```groovy\ndependencies {\n    implementation \'com.evernote:android-job:1.4.2\'\n}\n```\n\nStarting with version `1.3.0` the library will use the `WorkManager` internally, please read the [documentation](https://github.com/evernote/android-job#workmanager) and opt-in.\n\nIf you didn\'t turn off the manifest merger from the Gradle build tools, then no further step is required to setup the library. Otherwise you manually need to add the permissions and services like in this [AndroidManifest](library/src/main/AndroidManifest.xml).\n\nYou can read the [JavaDoc here](https://evernote.github.io/android-job/javadoc/).\n\n## Usage\n\nThe class `JobManager` serves as entry point. Your jobs need to extend the class `Job`. Create a `JobRequest` with the corresponding builder class and schedule this request with the `JobManager`.\n\nBefore you can use the `JobManager` you must initialize the singleton. You need to provide a `Context` and add a `JobCreator` implementation after that. The `JobCreator` maps a job tag to a specific job class. It\'s recommended to initialize the `JobManager` in the `onCreate()` method of your `Application` object, but there is [an alternative](https://github.com/evernote/android-job/wiki/FAQ#i-cannot-override-the-application-class-how-can-i-add-my-jobcreator), if you don\'t have access to the `Application` class.\n\n```java\npublic class App extends Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        JobManager.create(this).addJobCreator(new DemoJobCreator());\n    }\n}\n```\n\n```java\npublic class DemoJobCreator implements JobCreator {\n\n    @Override\n    @Nullable\n    public Job create(@NonNull String tag) {\n        switch (tag) {\n            case DemoSyncJob.TAG:\n                return new DemoSyncJob();\n            default:\n                return null;\n        }\n    }\n}\n```\n\nAfter that you can start scheduling jobs.\n\n```java\npublic class DemoSyncJob extends Job {\n\n    public static final String TAG = "job_demo_tag";\n\n    @Override\n    @NonNull\n    protected Result onRunJob(Params params) {\n        // run your job here\n        return Result.SUCCESS;\n    }\n\n    public static void scheduleJob() {\n        new JobRequest.Builder(DemoSyncJob.TAG)\n                .setExecutionWindow(30_000L, 40_000L)\n                .build()\n                .schedule();\n    }\n}\n```\n\n## Advanced\n\nThe `JobRequest.Builder` class has many extra options, e.g. you can specify a required network connection, make the job periodic, pass some extras with a bundle, restore the job after a reboot or run the job at an exact time.\n\nEach job has a unique ID. This ID helps to identify the job later to update requirements or to cancel the job.\n\n```java\nprivate void scheduleAdvancedJob() {\n    PersistableBundleCompat extras = new PersistableBundleCompat();\n    extras.putString("key", "Hello world");\n\n    int jobId = new JobRequest.Builder(DemoSyncJob.TAG)\n            .setExecutionWindow(30_000L, 40_000L)\n            .setBackoffCriteria(5_000L, JobRequest.BackoffPolicy.EXPONENTIAL)\n            .setRequiresCharging(true)\n            .setRequiresDeviceIdle(false)\n            .setRequiredNetworkType(JobRequest.NetworkType.CONNECTED)\n            .setExtras(extras)\n            .setRequirementsEnforced(true)\n            .setUpdateCurrent(true)\n            .build()\n            .schedule();\n}\n\nprivate void schedulePeriodicJob() {\n    int jobId = new JobRequest.Builder(DemoSyncJob.TAG)\n            .setPeriodic(TimeUnit.MINUTES.toMillis(15), TimeUnit.MINUTES.toMillis(5))\n            .build()\n            .schedule();\n}\n\nprivate void scheduleExactJob() {\n    int jobId = new JobRequest.Builder(DemoSyncJob.TAG)\n            .setExact(20_000L)\n            .build()\n            .schedule();\n}\n\nprivate void runJobImmediately() {\n    int jobId = new JobRequest.Builder(DemoSyncJob.TAG)\n            .startNow()\n            .build()\n            .schedule();\n}\n\nprivate void cancelJob(int jobId) {\n    JobManager.instance().cancel(jobId);\n}\n```\n\nIf a non periodic `Job` fails, then you can reschedule it with the defined back-off criteria.\n\n```java\npublic class RescheduleDemoJob extends Job {\n\n    @Override\n    @NonNull\n    protected Result onRunJob(Params params) {\n        // something strange happened, try again later\n        return Result.RESCHEDULE;\n    }\n\n    @Override\n    protected void onReschedule(int newJobId) {\n        // the rescheduled job has a new ID\n    }\n}\n```\n\n#### Proguard\n\nThe library doesn\'t use reflection, but it relies on three `Service`s and two `BroadcastReceiver`s. In order to avoid any issues, you shouldn\'t obfuscate those four classes. The library bundles its own Proguard config and you don\'t need to do anything, but just in case you can add [these rules](library/proguard.cfg) in your configuration.\n\n## More questions?\n\nSee the [FAQ](https://github.com/evernote/android-job/wiki/FAQ) in the [Wiki](https://github.com/evernote/android-job/wiki).\n\n## WorkManager\n\n[WorkManager](https://developer.android.com/topic/libraries/architecture/workmanager) is a new architecture component from Google and tries to solve a very similar problem this library tries to solve: implementing background jobs only once for all Android versions. The API is very similar to this library, but provides more features like chaining work items and it runs its own executor.\n\nIf you start a new project, you should be using `WorkManager` instead of this library. You should also start migrating your code from this library to `WorkManager`. At some point in the future this library will be deprecated.\n\nStarting with version `1.3.0` this library will use the `WorkManager` internally for scheduling jobs. That should ease the transition to the new architecture component. You only need to add the `WorkManager` to your classpath, e.g.\n```groovy\ndependencies {\n    implementation "android.arch.work:work-runtime:$work_version"\n}\n```\n\nPlease take a look at the [Wiki](https://github.com/evernote/android-job/wiki/Migrating-to-WorkManager) for a complete transition guide.\n\nThe API and feature set of `android-job` and `WorkManager` are really similar. However, some features are unique and only supported by one or the other\n\n| Feature | android-job | WorkManager |\n| --- | --- | --- |\n| Exact jobs | Yes | No |\n| Transient jobs | Yes | No |\n| Daily jobs | Yes | No |\n| Custom Logger | Yes | No |\n| Observe job status | No | Yes |\n| Chained jobs | No | Yes |\n| Work sequences | No | Yes |\n\n## Google Play Services\n\nThis library does **not** automatically bundle the Google Play Services, because the dependency is really heavy and not all apps want to include them. That\'s why you need to add the dependency manually, if you want that the library uses the `GcmNetworkManager` on Android 4, then include the following dependency.\n```groovy\ndependencies {\n    compile "com.google.android.gms:play-services-gcm:latest_version"\n}\n```\nBecause of recent changes in the support library, you must turn on the service manually in your `AndroidManifest.xml`\n```xml\n<service\n    android:name="com.evernote.android.job.gcm.PlatformGcmService"\n    android:enabled="true"\n    tools:replace="android:enabled"/>\n```\nIf you don\'t turn on the service, the library will always use the `AlarmManager` on Android 4.x.\n\nCrashes after removing the GCM dependency is a known limitation of the Google Play Services. Please take a look at [this workaround](https://github.com/evernote/android-job/wiki/FAQ#how-can-i-remove-the-gcm-dependency-from-my-app) to avoid those crashes.\n\n## License\n```\nCopyright (c) 2007-2017 by Evernote Corporation, All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n'