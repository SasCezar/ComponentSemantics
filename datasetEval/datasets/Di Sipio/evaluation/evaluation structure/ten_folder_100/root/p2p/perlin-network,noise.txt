b'# Noise\n\n[![GoDoc][1]][2] [![Discord][7]][8] [![MIT licensed][5]][6] [![Build Status][9]][10] [![Go Report Card][11]][12] [![Coverage Statusd][13]][14]\n\n[1]: https://godoc.org/github.com/perlin-network/noise?status.svg\n[2]: https://godoc.org/github.com/perlin-network/noise\n[5]: https://img.shields.io/badge/license-MIT-blue.svg\n[6]: LICENSE\n[7]: https://img.shields.io/discord/458332417909063682.svg\n[8]: https://discord.gg/dMYfDPM\n[9]: https://travis-ci.org/perlin-network/noise.svg?branch=master\n[10]: https://travis-ci.org/perlin-network/noise\n[11]: https://goreportcard.com/badge/github.com/perlin-network/noise\n[12]: https://goreportcard.com/report/github.com/perlin-network/noise\n[13]: https://codecov.io/gh/perlin-network/noise/branch/master/graph/badge.svg\n[14]: https://codecov.io/gh/perlin-network/noise\n\n\n<img align="right" width=400 src="docs/media/chat.gif">\n\n**noise** is an opinionated, easy-to-use P2P network stack for\n*decentralized applications, and cryptographic protocols* written in\n[Go](https://golang.org/) by [the Perlin team](https://perlin.net).\n\n**noise** is made to be robust, developer-friendly, performant, secure, and\ncross-platform across multitudes of devices by making use of well-tested,\nproduction-grade dependencies.\n\n<hr/>\n\nBy itself, **noise** is a low-level, stateless, concurrent networking library that easily allows you to incorporate fundamental features any modern p2p application needs such as:\n\n1) cryptographic primitives (Ed25519, PoW, AES-256),\n2) message serialization/deserialization schemes (byte-order little endian, protobuf, msgpack),\n3) network timeout/error management (on dial, on receive message, on send buffer full),\n4) network-level atomic operations (receive-then-lock),\n5) and NAT traversal support (NAT-PMP, UPnP).\n\nOut of its own low-level constructs, noise additionally comes bundled with a high-level `protocol` package comprised of a large number of production-ready, high-level protocol building blocks such as:\n\n1) handshake protocol implementations (Elliptic-Curve Diffie Hellman),\n2) peer routing/discovery protocol implementations (S/Kademlia),\n3) message broadcasting protocol implementations (S/Kademlia),\n4) overlay network protocol implementations (S/Kademlia),\n5) cryptographic identity schemes (Ed25519 w/ EdDSA signatures),\n6) and authenticated encryption schemes (AES-256 GCM AEAD).\n\nEvery single building block is easily configurable, and may be mixed and matched together to help you kickstart your journey on developing secure, debuggable, and highly-performant p2p applications.\n\n```go\npackage main\n\nimport (\n    "fmt"\n\t\n    "github.com/perlin-network/noise"\n    "github.com/perlin-network/noise/cipher/aead"\n    "github.com/perlin-network/noise/handshake/ecdh"\n    "github.com/perlin-network/noise/identity/ed25519"\n    "github.com/perlin-network/noise/protocol"\n    "github.com/perlin-network/noise/rpc"\n    "github.com/perlin-network/noise/skademlia"\n)\n\ntype chatMessage struct {\n\ttext string\n}\n\nfunc (chatMessage) Read(reader payload.Reader) (noise.Message, error) {\n\ttext, err := reader.ReadString()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, "failed to read chat msg")\n\t}\n\n\treturn chatMessage{text: text}, nil\n}\n\nfunc (m chatMessage) Write() []byte {\n\treturn payload.NewWriter(nil).WriteString(m.text).Bytes()\n}\n\nfunc main() {\n    // Register message type to Noise.\n    opcodeChatMessage := noise.RegisterMessage(noise.NextAvailableOpcode(), (*chatMessage)(nil))\n    \n    params := noise.DefaultParams()\n    params.Keys = ed25519.Random()\n    params.Port = uint16(3000)\n    \n    node, err := noise.NewNode(params)\n    if err != nil {\n        panic(err)\n    }\n    \n    protocol.New().\n    \tRegister(ecdh.New()).\n    \tRegister(aead.New()).\n    \tRegister(skademlia.New()).\n    \tEnforce(node)\n    \n    fmt.Printf("Listening for peers on port %d.\\n", node.ExternalPort())\n    \n    go node.Listen()\n    \n    // Dial peer via TCP located at address 127.0.0.1:3001.\n    peer, err := node.Dial("127.0.0.1:3001")\n    if err != nil {\n        panic(err)\n    }\n    \n    // Wait until the peer has finished all cryptographic handshake procedures.\n    skademlia.WaitUntilAuthenticated(peer)\n    \n    // Send a single chat message over the peer knowing that it\'s encrypted over the wire.\n    err = peer.SendMessage(chatMessage{text: "Hello peer!"})\n    if err != nil {\n        panic(err)\n    }\n    \n    // Receive and print out a single chat message back from our peer.\n    fmt.Println(<-peer.Receive(opcodeChatMessage))\n}\n```\n\n## Setup\n\nMake sure to have at the bare minimum [Go 1.11](https://golang.org/dl/) installed before incorporating **noise** into your project.\n\nAfter installing _Go_, you may choose to either:\n\n1. directly incorporate noise as a library dependency to your project,\n\n```bash\n# Be sure to have Go modules enabled: https://github.com/golang/go/wiki/Modules\nexport GO111MODULE=on\n\n# Run this inside your projects directory.\ngo get github.com/perlin-network/noise\n```\n\n2. or checkout the source code on Github and run any of the following commands below.\n\n```bash\n# Be sure to have Go modules enabled: https://github.com/golang/go/wiki/Modules\nexport GO111MODULE=on\n\n# Run an example creating a cluster of 3 peers automatically\n# discovering one another.\n[terminal 1] go run examples/chat/main.go -p 3000\n[terminal 2] go run examples/chat/main.go -p 3001 127.0.0.1:3000\n[terminal 3] go run examples/chat/main.go -p 3002 127.0.0.1:3001\n\n# Optionally run test cases.\ngo test -v -count=1 -race ./...\n```\n\n## We\'re hiring!\n\nHere at [Perlin](https://perlin.net), we spend days and weeks debating, tinkering, and researching what is out there in academia to bring to industries truly resilient, open-source, secure, economic, and decentralized software to empower companies, startups, and users.\n                                                        \nOur doors are open to academics that have a knack for distributed systems, engineers that want to explore unknown waters, frontend developers that want to make and evangelize the next generation of customer-facing applications, and graphics designers that yearn to instrument together greater user experiences for decentralized applications.\n\n## Contributions\n\nFirst of all, _thank you so much_ for taking part in our efforts for creating a p2p networking stack that can meet everyones needs without sacrificing developer productivity!\n\nAll code contributions to _noise_ should comply with all idiomatic Go standards listed [here](https://github.com/golang/go/wiki/CodeReviewComments).\n\nAll commit messages should be in the format:\n\n```bash\nmodule_name_1, module_name_2: description of the changes you made to the two\n    modules here as a sentence\n```\n\nBe sure to use only imperative, present tense within your commit messages and optionally include motivation for your changes _two lines breaks_ away from your commit message.\n\nThis allows other maintainers and contributors to know which modules you are modifying/creating within the code/docs repository.\n\nLastly, be sure to consider backwards compatibility.\n\nNew modules/methods are perfectly fine, but changing code living in `noise.Node` or `noise.Peer` radically for example would break a lot of existing projects utilizing _noise_.\n\nAdditionally, if you\'d like to talk to us or any of the team in real-time, be sure to join our [Discord server](https://discord.gg/dMYfDPM)!\n\nWe are heavily active, ready to answer any questions/assist you with any code/doc contributions at almost any time.\n\n## License\n\n**noise**, and all of its source code is released under the MIT [License](https://github.com/perlin-network/noise/blob/master/LICENSE).\n'