b'# bluntly - DEPRECATED \n\n- The prototype is no longer functioning and we strongly recommend you use something like this https://github.com/orbitdb/orbit which achieves the same goal but much better.\n\ntalk to whoever, wherever safely.\n\nBluntly allows you to setup a secure connection to a peer by only knowing its public key (and it knowing yours).\n\nNo servers needed, no NAT getting in the way. It\'s a POC (proof-of-concept) so don\'t start talking with snowden with this.\n\n![alt text](https://github.com/danoctavian/bluntly/blob/master/docs/chat-diagram.png "fuuak")\n\nDisclaimer: there\'s no really clever ideas here, i\'m just stiching some things together. It\'s a hacky implementation (I can\'t justify\nmyself for this, it just felt good to screw around in javascript).\n\n#### Important note\n\nBluntly is currently undergoing a rewrite from javascript to Golang. the old javascript code is in node-bluntly. the rest of the code is work in progress.\n\nReasons for rewriting: the first version was an unstable POC, meant to showcase what\'s possible and explore the problem space.\n\nWhy Golang? Has all necessary libraries (dht, crypto, except for a good implementation of UTP), has reliable cryptography libraries, has good networking libraries and chans/green threads, is a simple programming language that allows individuals with no experience in Golang to verify the app for correctness and security.\n\nHow?\n\n* exchange pub keys with your partner (i don\'t know how, figure it out)\n\n* client looks up listener in bittorrent DHT by his pubkey (Lpk) using info\\_hash = sha1(Lpk)\n\n* once you it has its IP, connect (if there\'s a NAT in the way, just penetrate it. see how below)\n\n* client sends encrypted handshake (with RSA pub key) to listener containing your curve25519 pub key \n\n* listener responds with its curve25519 pub key in a handshake response encrypted with \nyour RSA pubkey\n\n* both do Diffie hellman and derive shared secret. encrypt all messages from here on using that.\n\n\n### RUN IT\n\nInstall dependencies.\n\n* nodejs https://nodejs.org/download/\n\n* npm \n\nGet code dependencies:\n\n```bash\ncd node-bluntly\nnpm install \n``` \n\nfor a quick run, use the RSA key pair checked in the repo for both parties. Get 2 machines and do\n\nGo to the test-data directory:\n\n```bash\ncd test-data\n```\n\nFor the server:\n\n```bash\nnode ../index.js -s 5678 # or whatever ports you want to listen on\n``` \n\nFor the client:\n\n```bash\nnode ../index.js -c myself\n``` \n\nObviously the above is not secure, because the private key is in the open.\n\n### RUNTIME REQUIREMENTS\n\nbluntly expects you provide with a config file containing:\n\n```javascript\n{\n  "dhtPort": 20000, // the port \n  "ownKey": {"pub": "mypub.rsa", "priv": "mypriv.rsa"}, // filepaths to your pub and private rsa keys\n  "ID": "myself", // your bluntly name\n  "contactsDir": "contacts", // the path of the directory containing your friends\' pub keys\n  // if you\'re holepunching through NAT, the port you want other peers to UDP connect to\n  // if it\'s not specified, hole punch will not be attempted at all and it will fail if \n  // no direct TCP connection is possible\n  "holePunch": {"recvPort": 23456}  \n}\n```\n\nIf you don\'t explicitly specify a path to a config file with --config=myconfigfile it will look for a \nfile *blunt-conf.json* in the current directory and use that as a config file.\n\n**contactsDir**  contains a json file called *index.json* which specifies a mapping from friend ids to the file containing\ntheir pub key in the contactsDir directory (it\'s a relative path) as such\n\n```javascript\n{\n  "yourmom": "mom.rsa",\n  "yourdad": "dad.rsa",\n  "myself": "myself.rsa"\n}\n```\n\nA good example is the test-data directory, containing a conf file and a contacts dir.\n\n### NAT penetration\n\nClient notifies listener of interest to connect by announcing itself to rendezvous\\_info\\_hash =  reverse(sha1(Spk)) (the reverse function is kind of arbitrary)\n\nListener constantly polls the bittorrent DHT for peers announced rendezvous\\_info\\_hash . Learns about the intention of a peer to connect.\n\nThey both know each other\'s IPs and proceed to do UDP NAT penetration as done by [chownat]( http://samy.pl/chownat/).\n\nonce the hole punch succeeds, the 2 parties switch to UTP protocol running over UDP for reliability.\n\nWhat would be nice: not have the rendezvous info hash and use the technique presented used by [pwnat](http://samy.pl/pwnat/)\n\n###  Motivation\n\nJust wanted smth to easily use without making accounts here and there and having end to end encryption.\n\nI wanted to hack something in javascript to see how it\'s like to build prototypes with it.\n\n'