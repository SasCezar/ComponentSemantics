b'[![Go Report Card](https://nkn.org/badge/nkn.svg)](https://goreportcard.com/report/github.com/nknorg/nkn)\n[![Build Status](https://travis-ci.org/nknorg/nkn.svg?branch=master)](https://travis-ci.org/nknorg/nkn)\n\n[![NKN](https://github.com/nknorg/nkn/wiki/img/nkn_logo.png)](https://nkn.org)\n\n# NKN: a Scalable Self-Evolving and Self-Incentivized Decentralized Network\n\n> NKN, short for New Kind of Network, is a project aiming to rebuild the\n> Internet that will be truly open, decentralized, dynamic, safe, shared and\n> owned by the community.\n\nOfficial website: [https://nkn.org/](https://nkn.org/)\nTechnical discussion: [https://forum.nkn.org/](https://forum.nkn.org/)\n\nNote: This is a **node** version of the NKN protocol, which relays data for\nclients and earn mining rewards. For **client** implementation which can send\nand receive data (currently for free!), please refer to\n[nkn-client-js](https://github.com/nknorg/nkn-client-js/).\n\n## Introduction\n\nThe core of the NKN network consists of many connected nodes distributed\nglobally. Every node is only connected to and aware of a few other nodes called\nneighbors. Packets can be transmitted from any node to any other node in an\nefficient and verifiable route. Data can be sent to any clients without public\nor static IP address using their permanent NKN address with end-to-end\nencryption. The network stack of NKN network is open source at another repo\ncalled [nnet](https://github.com/nknorg/nnet) that can be used to build other\ndecentralized/distributed systems.\n\nThe relay workload can be verified using our Proof of Relay (PoR) algorithm. A\nsmall and fixed portion of the packets will be randomly selected as proof. The\nrandom selection can be verified and cannot be predicted or controlled. Proof\nwill be sent to other nodes for payment and rewards.\n\nA node in our network is both relayer and consensus participant. Consensus among\nmassive nodes can be reached efficiently by only communicating with neighbors\nusing our consensus algorithm based on Cellular Automata. Consensus is reached\nfor every block to prevent fork.\n\nMore details can be found in [our wiki](https://github.com/nknorg/nkn/wiki).\n\n## Technical Highlights\n\n* Transmit any data to any node/client without any centralized server. [Related tech design doc](https://github.com/nknorg/nkn/wiki/Tech-Design-Doc%3A-Distributed-Data-Transmission-Network-%28DDTN%29)\n* Proof-of-Relay, a useful proof of work: mining is relaying data. [Related tech design doc](https://github.com/nknorg/nkn/wiki/Tech-Design-Doc%3A-Proof-of-Relay-%28PoR%29)\n* Extremely scalable consensus algorithm (millions or even billions of nodes). [Related tech design doc](https://github.com/nknorg/nkn/wiki/Tech-Design-Doc%3A-Consensus-and-Blockchain)\n* Strong consistency rather than eventual consistency. [Related tech design doc](https://github.com/nknorg/nkn/wiki/Tech-Design-Doc%3A-Consensus-and-Blockchain)\n* Dynamic, large-scale network. [Related tech design doc](https://github.com/nknorg/nkn/wiki/Tech-Design-Doc%3A-Distributed-Data-Transmission-Network-%28DDTN%29)\n* Verifiable topology and routes. [Related tech design doc](https://github.com/nknorg/nkn/wiki/Tech-Design-Doc%3A-Relay-Path-Validation)\n* Secure address scheme with public key embedded. [Related tech design doc](https://github.com/nknorg/nkn/wiki/Tech-Design-Doc%3A-NKN-Address-Scheme)\n\n## Deployment\n\n**Q:** I want to run this node, but have no idea about programming or terminal.\nWhat should I do?\n\n**A:** Easiest for you will be to follow [docker instructions](#building-using-docker) below. Docker will take care of quite a lot of things for you.\nIf you are asked to run or issue command (usually formatted like this:)\n```shell\n$ cd change/active/directory/to/this/one\n```\nopen a terminal (or cmd on windows - start -> run/search -> cmd.exe) and write\nthe command there. (Without the `$ ` symbol)\n\n### Use pre-built binaries\n\nYou need to download a few things:\n1. `nknd` and `nknc` binaries from\n[github releases](https://github.com/nknorg/nkn/releases). You just need the one\nmatches your architecture.\n2. A config file corresponding to the network you want to connect to. For\nmainnet you need to download [config.mainnet.json](config.mainnet.json) and\nrename it to `config.json`\n\nThen you need to put `nknd`, `nknc`, and `config.json` in the same directory.\n\nNow you can see [configuration](#configuration) for how to configure and run a\nnode.\n\n### Use pre-built Docker image\n\n*Prerequirement*: Have working docker software installed. For help with that\nvisit [official docker\ndocs](https://docs.docker.com/install/#supported-platforms)\n\nWe host latest Docker image (the same as you [build with\ndocker](#building-using-docker)) on our official Docker Hub account. You can get\nit by\n\n```shell\n$ docker pull nknorg/nkn\n```\n\nNow you can see [configuration](#configuration) for how to configure and run a\nnode.\n\n### Building using Docker\n\n*Prerequirement*: Have working docker software installed. For help with that\nvisit [official docker\ndocs](https://docs.docker.com/install/#supported-platforms)\n\nBuild and tag Docker image\n\n```shell\n$ docker build -t nknorg/nkn .\n```\n\nThis command should be run once every time you update the code base.\n\nWhen starting the container, a directory with configuration files containing\n`config.json` (see [configuration](#configuration)) and `wallet.json` (if\nexists) should be mapped to `/nkn/data` directory in the container. This\ndirectory will also be used for blockhain data and logs storage by default. The\npath of config file, wallet file, database directory and log directory can be\nspecified by passing arguments to `nknd`, run `nknd --help` for more\ninformation.\n\n### Building from source\n\nTo build from source, you need a properly configured Go environment (Go 1.11.4+,\nsee [Go Official Installation Documentation](https://golang.org/doc/install) for\nmore details).\n\n```shell\n$ git clone https://github.com/nknorg/nkn.git\n```\n\nBuild the source code with make\n\n```shell\n$ make\n```\n\nAfter building is successful, you should see two executables:\n\n* `nknd`: the nkn node program\n* `nknc`: command line tool for nkn node control\n\nNow you can see [configuration](#configuration) for how to configure and run a\nnode.\n\nYou can also build binaries for other architectures by executing `make all`. The\nresulting binaries are stored in `build` directory.\n\n### Configuration\n\nWhen starting a NKN node (i.e. running `nknd`), it will reads two files:\n`config.json` and `wallet.json`. By default `nknd` assumes these two files are\nlocated in the current working directory, but it can be changed by passing\n`--config` and `--wallet` arguments to `nknd`.\n\na directory with configuration files\ncontaining `config.json` (see [configuration](#configuration)) and `wallet.json`\n(if exists) should be mapped to `/nkn/data` directory in the container.  The\npath of config file, wallet file, database directory and log directory can be\nspecified by passing arguments to `nknd`, run `nknd --help` for more\ninformation.\n\nWe provide a few sample `config.json`:\n\n* `config.mainnet.json`: join the mainnet\n* `config.testnet.json`: join the testnet\n* `config.local.json`: create and join a private chain on your localhost\n\nYou can copy the one you want to `config.json` or write your own.\n\nBefore starting the node, you need to create a new wallet first. Wallet\ninformation will be saved at `wallet.json` and it\'s encrypted with the password\nyou provided when creating the wallet. So please make sure you pick a\nstrong password and remember it!\n\n``` shell\n$ ./nknc wallet -c\nPassword:\nRe-enter Password:\nAddress                                Public Key\n-------                                ----------\nNKNRQxosmUixL8bvLAS5G79m1XNx3YqPsFPW   35db285ea2f91499164cd3e19203ab5e525df6216d1eba3ac6bcef00503407ce\n```\n\nIf you are using Docker, it should be `docker run -it -v ${PWD}:/nkn/data\nnknorg/nkn nknc wallet -c` instead, assuming you want to store the `wallet.json`\nin your current working directory. If you want it to be saved to another\ndirectory, you need to change `${PWD}` to that directory.\n\n**[IMPORTANT] Each node needs to use a unique wallet. If you use share wallet\namong multiple nodes, only one of them will be able to join the network!**\n\nAfter `nknd` starts, it will creates two directories: `ChainDB` to store\nblockchain data, and `Log` to store logs. By default `nknd` will creates these\ndirectories in the current working directory, but it can be changed by passing\n`--chaindb` and `--log` arguments to `nknd`.\n\nNow you can [join the mainnet](#join-the-mainnet), [join the\ntestnet](#join-the-testnet) or [create a private\nchain](https://github.com/nknorg/nkn/wiki/Create-a-Private-Chain).\n\n### Join the MainNet\n\n**[IMPORTANT] Currently, in order to join the MainNet, you need to have a public\nIP address, or set up [port forwarding](#port-forwarding) on your router\nproperly so that other people can establish connection to you.**\n\nIf you have done the previous steps correctly (`config.json`, create wallet,\npublic IP or port forwarding), joining the MainNet is as simple as running:\n\n```shell\n$ ./nknd\n```\n\nIf you are using Docker then you should run the following command instead:\n\n```shell\n$ docker run -p 30001-30003:30001-30003 -v ${PWD}:/nkn/data --name nkn --rm -it nknorg/nkn nknd\n```\n\nIf you get an error saying `docker: Error response from daemon: Conflict. The\ncontainer name "/nkn" is already in use by container ...`, you should run\n`docker rm nkn` first to remove the old container.\n\nIf everything goes well, you should be part of the MainNet after a few minutes!\nYou can query your wallet balance (which includes the NKN token you\'ve mined)\nby:\n\n```shell\n$ ./nknc wallet -l balance\n```\n\nor if you are using Docker:\n\n```shell\n$ docker exec -it nkn nknc wallet -l balance\n```\n\nIf there is a problem, you may want to check if any of the previous steps went\nwrong. If the problem still persists, [create an\nissue](https://github.com/nknorg/nkn/issues/new) or ask us in our [Discord\ngroup](#community).\n\n### [Recommended] Using BeneficiaryAddr\n\nBy default, token mined by your node will be sent to the wallet your node is\nusing, which is NOT as safe as you might think. The recommended way is to use\nanother cold wallet (that is saved and backed up well) to store your token. You\ncan use your code wallet address as `BeneficiaryAddr` in `config.json` such that\ntoken mined by your node will be sent directly to that beneficiary address. This\nis safer and more convenient because: 1. even if your node is hacked, or your\nnode wallet is leaked, you will not lose any token; 2. if you run multiple\nnodes, it\'s the only way that all their mining rewards will go to the same\naddress.\n\n### NAT traversal and port forwarding\n\nMost likely your node is behind a router and does not have a public IP address.\nBy default, `nknd` will try to detect if your router supports UPnP or NAT-PMP\nprotocol, and if success, it will try to set up port forwarding automatically.\nYou can add `--no-nat` flag when starting nknd OR add `"NAT": false` in\n`config.json` to disable automatic port forwarding. If your router does not\nsupport such protocol, you **have to** setup port forwarding on your router for\nport 30001 as well as **all** other ports specified in `config.json`\n(30001-30003 by default), otherwise other nodes cannot establish connections to\nyou and you will **NOT** be able to mine token even though your node can still\nrun and sync blocks.\n\nWhen setting up port forwarding, public port needs to be the same as private\nport mapped to your node. For example, you should map port 30001 on your\nrouter\'s public IP address to port 30001 on your node\'s internal IP address.\n\nThe specific steps to setup port forwarding depends on your router. But in\ngeneral, you need to log in to the admin interface of your router (typically in\na web browser), then navigate to the port forwarding section, and create several\nmappings, one for each port. One of the easiest way to find out how to setup\nport forwarding on your router is to search "how to setup port forwarding" +\nyour router model or name online.\n\n### Join the TestNet\n\nJoining the TestNet is the same as joining MainNet, except for using\n`config.testnet.json` as your config file instead of `config.mainnet.json`. Note\nthat TestNet token is for testing purpose only (thus do not have value), and may\nbe cleared at any time when TestNet upgrades.\n\n## Contributing\n\n**Can I submit a bug, suggestion or feature request?**\n\nYes. Please [open an issue](https://github.com/nknorg/nkn/issues/new) for that.\n\n**Can I contribute patches to NKN project?**\n\nYes, we appreciate your help! To make contributions, please fork the repo, push\nyour changes to the forked repo with signed-off commits, and open a pull request\nhere.\n\nPlease follow our [Golang Style Guide](https://github.com/nknorg/nkn/wiki/NKN-Golang-Style-Guide)\nfor coding style.\n\nPlease sign off your commit. This means adding a line "Signed-off-by: Name\n<email>" at the end of each commit, indicating that you wrote the code and have\nthe right to pass it on as an open source patch. This can be done automatically\nby adding -s when committing:\n\n```shell\ngit commit -s\n```\n\n## Community\n\n* [Discord](https://discord.gg/c7mTynX)\n* [Telegram](https://t.me/nknorg)\n* [Reddit](https://www.reddit.com/r/nknblockchain/)\n* [Twitter](https://twitter.com/NKN_ORG)\n'