b'# Healthchecks\n\n[![Build Status](https://travis-ci.org/healthchecks/healthchecks.svg?branch=master)](https://travis-ci.org/healthchecks/healthchecks)\n[![Coverage Status](https://coveralls.io/repos/healthchecks/healthchecks/badge.svg?branch=master&service=github)](https://coveralls.io/github/healthchecks/healthchecks?branch=master)\n\n\n![Screenshot of Welcome page](/static/img/welcome.png?raw=true "Welcome Page")\n\n![Screenshot of My Checks page](/static/img/my_checks.png?raw=true "My Checks Page")\n\n![Screenshot of Period/Grace dialog](/static/img/period_grace.png?raw=true "Period/Grace Dialog")\n\n![Screenshot of Cron dialog](/static/img/cron.png?raw=true "Cron Dialog")\n\n![Screenshot of Integrations page](/static/img/channels.png?raw=true "Integrations Page")\n\nhealthchecks is a watchdog for your cron jobs. It\'s a web server that listens for pings from your cron jobs, plus a web interface.\n\nIt is live here: [http://healthchecks.io/](http://healthchecks.io/)\n\nThe building blocks are:\n\n* Python 3\n* Django 2\n* PostgreSQL or MySQL\n\n## Setting Up for Development\n\nThese are instructions for setting up healthchecks Django app\nin development environment.\n\n* install dependencies (Debian/Ubuntu)\n\n        $ sudo apt-get update\n        $ sudo apt-get install -y gcc python3-dev python3-venv\n\n* prepare directory for project code and virtualenv:\n\n        $ mkdir -p ~/webapps\n        $ cd ~/webapps\n\n* prepare virtual environment\n  (with virtualenv you get pip, we\'ll use it soon to install requirements):\n\n        $ python3 -m venv hc-venv\n        $ source hc-venv/bin/activate\n\n* check out project code:\n\n        $ git clone https://github.com/healthchecks/healthchecks.git\n\n* install requirements (Django, ...) into virtualenv:\n\n        $ pip install -r healthchecks/requirements.txt\n\n* healthchecks is configured to use a SQLite database by default. To use\n  PostgreSQL or MySQL database, create and edit `hc/local_settings.py` file.\n  There is a template you can copy and edit as needed:\n\n        $ cd ~/webapps/healthchecks\n        $ cp hc/local_settings.py.example hc/local_settings.py\n\n* create database tables and the superuser account:\n\n        $ cd ~/webapps/healthchecks\n        $ ./manage.py migrate\n        $ ./manage.py createsuperuser\n\n* run development server:\n\n        $ ./manage.py runserver\n\nThe site should now be running at `http://localhost:8080`\nTo log into Django administration site as a super user,\nvisit `http://localhost:8080/admin`\n\n## Configuration\n\nSite configuration is loaded from environment variables. This is\ndone in `hc/settings.py`. Additional configuration is loaded\nfrom `hc/local_settings.py` file, if it exists. You can create this file\n(should be right next to `settings.py` in the filesystem) and override\nsettings, or add extra settings as needed.\n\nConfigurations settings loaded from environment variables:\n\n| Environment variable | Default value | Notes\n| -------------------- | ------------- | ----- |\n| [SECRET_KEY](https://docs.djangoproject.com/en/2.2/ref/settings/#secret-key) | `"---"`\n| [DEBUG](https://docs.djangoproject.com/en/2.2/ref/settings/#debug) | `True` | Set to `False` for production\n| [ALLOWED_HOSTS](https://docs.djangoproject.com/en/2.2/ref/settings/#allowed-hosts) | `*` | Separate multiple hosts with commas\n| [DEFAULT_FROM_EMAIL](https://docs.djangoproject.com/en/2.2/ref/settings/#default-from-email) | `"healthchecks@example.org"`\n| USE_PAYMENTS | `False`\n| REGISTRATION_OPEN | `True`\n| DB | `"sqlite"` | Set to `"postgres"` or `"mysql"`\n| [DB_HOST](https://docs.djangoproject.com/en/2.2/ref/settings/#host) | `""` *(empty string)*\n| [DB_PORT](https://docs.djangoproject.com/en/2.2/ref/settings/#port) | `""` *(empty string)*\n| [DB_NAME](https://docs.djangoproject.com/en/2.2/ref/settings/#name) | `"hc"` (PostgreSQL, MySQL) or `"/path/to/project/hc.sqlite"` (SQLite) | For SQLite, specify the full path to the database file.\n| [DB_USER](https://docs.djangoproject.com/en/2.2/ref/settings/#user) | `"postgres"` or `"root"`\n| [DB_PASSWORD](https://docs.djangoproject.com/en/2.2/ref/settings/#password) | `""` *(empty string)*\n| [DB_CONN_MAX_AGE](https://docs.djangoproject.com/en/2.2/ref/settings/#conn-max-age) | `0`\n| DB_SSLMODE | `"prefer"` | PostgreSQL-specific, [details](https://blog.github.com/2018-10-21-october21-incident-report/)\n| DB_TARGET_SESSION_ATTRS | `"read-write"` | PostgreSQL-specific, [details](https://www.postgresql.org/docs/10/static/libpq-connect.html#LIBPQ-CONNECT-TARGET-SESSION-ATTRS)\n| EMAIL_HOST | `""` *(empty string)*\n| EMAIL_PORT | `"587"`\n| EMAIL_HOST_USER | `""` *(empty string)*\n| EMAIL_HOST_PASSWORD | `""` *(empty string)*\n| EMAIL_USE_TLS | `"True"`\n| EMAIL_USE_VERIFICATION | `"True"`\n| SITE_ROOT | `"http://localhost:8000"`\n| SITE_NAME | `"Mychecks"`\n| MASTER_BADGE_LABEL | `"Mychecks"`\n| PING_ENDPOINT | `"http://localhost:8000/ping/"`\n| PING_EMAIL_DOMAIN | `"localhost"`\n| DISCORD_CLIENT_ID | `None`\n| DISCORD_CLIENT_SECRET | `None`\n| SLACK_CLIENT_ID | `None`\n| SLACK_CLIENT_SECRET | `None`\n| PUSHOVER_API_TOKEN | `None`\n| PUSHOVER_SUBSCRIPTION_URL | `None`\n| PUSHOVER_EMERGENCY_RETRY_DELAY | `300`\n| PUSHOVER_EMERGENCY_EXPIRATION | `86400`\n| PUSHBULLET_CLIENT_ID | `None`\n| PUSHBULLET_CLIENT_SECRET | `None`\n| TELEGRAM_BOT_NAME | `"ExampleBot"`\n| TELEGRAM_TOKEN | `None`\n| TWILIO_ACCOUNT | `None`\n| TWILIO_AUTH | `None`\n| TWILIO_FROM | `None`\n| TWILIO_USE_WHATSAPP | `"False"`\n| PD_VENDOR_KEY | `None`\n| TRELLO_APP_KEY | `None`\n| MATRIX_HOMESERVER | `None`\n| MATRIX_USER_ID | `None`\n| MATRIX_ACCESS_TOKEN | `None`\n| APPRISE_ENABLED | `"False"`\n| SHELL_ENABLED | `"False"`\n\n\nSome useful settings keys to override are:\n\n`SITE_ROOT` is used to build fully qualified URLs for pings, and for use in\nemails and notifications. Example:\n\n```python\nSITE_ROOT = "https://my-monitoring-project.com"\n```\n\n`SITE_NAME` has the default value of "Mychecks" and is used throughout\nthe templates. Replace it with your own name to personalize your installation.\nExample:\n\n```python\nSITE_NAME = "My Monitoring Project"\n```\n\n`REGISTRATION_OPEN` controls whether site visitors can create new accounts.\nSet it to `False` if you are setting up a private healthchecks instance, but\nit needs to be publicly accessible (so, for example, your cloud services\ncan send pings).\n\nIf you close new user registration, you can still selectively invite users\nto your team account.\n\n`EMAIL_USE_VERIFICATION` enables/disables the sending of a verification\nlink when an email address is added to the list of notification methods.\nSet it to `False` if you are setting up a private healthchecks instance where\nyou trust your users and want to avoid the extra verification step.\n\n\n## Database Configuration\n\nDatabase configuration is loaded from environment variables. If you\nneed to use a non-standard configuration, you can override the\ndatabase configuration in `hc/local_settings.py` like so:\n\n```python\nDATABASES = {\n    \'default\': {\n        \'ENGINE\':   \'django.db.backends.postgresql\',\n        \'NAME\':     \'your-database-name-here\',\n        \'USER\':     \'your-database-user-here\',\n        \'PASSWORD\': \'your-database-password-here\',\n        \'TEST\': {\'CHARSET\': \'UTF8\'},\n        \'OPTIONS\': {\n            ... your custom options here ...\n        }\n    }\n}\n```\n\n## Sending Emails\n\nhealthchecks must be able to send email messages, so it can send out login\nlinks and alerts to users. Environment variables can be used to configure\nSMTP settings, or your may put your SMTP server configuration in\n`hc/local_settings.py` like so:\n\n```python\nEMAIL_HOST = "your-smtp-server-here.com"\nEMAIL_PORT = 587\nEMAIL_HOST_USER = "username"\nEMAIL_HOST_PASSWORD = "password"\nEMAIL_USE_TLS = True\n```\n\nFor more information, have a look at Django documentation,\n[Sending Email](https://docs.djangoproject.com/en/1.10/topics/email/) section.\n\n## Receiving Emails\n\nhealthchecks comes with a `smtpd` management command, which starts up a\nSMTP listener service. With the command running, you can ping your\nchecks by sending email messages\nto `your-uuid-here@my-monitoring-project.com` email addresses.\n\nStart the SMTP listener on port 2525:\n\n    $ ./manage.py smtpd --port 2525\n\nSend a test email:\n\n    $ curl --url \'smtp://127.0.0.1:2525\' \\\n        --mail-from \'foo@example.org\' \\\n        --mail-rcpt \'11111111-1111-1111-1111-111111111111@my-monitoring-project.com\' \\\n        -F \'=\'\n\n\n\n## Sending Status Notifications\n\nhealtchecks comes with a `sendalerts` management command, which continuously\npolls database for any checks changing state, and sends out notifications as\nneeded. Within an activated virtualenv, you can manually run\nthe `sendalerts` command like so:\n\n    $ ./manage.py sendalerts\n\nIn a production setup, you will want to run this command from a process\nmanager like [supervisor](http://supervisord.org/) or systemd.\n\n## Database Cleanup\n\nWith time and use the healthchecks database will grow in size. You may\ndecide to prune old data: inactive user accounts, old checks not assigned\nto users, records of outgoing email messages and records of received pings.\nThere are separate Django management commands for each task:\n\n* Remove old records from `api_ping` table. For each check, keep 100 most\n  recent pings:\n\n    ```\n    $ ./manage.py prunepings\n    ```\n\n* Remove old records of sent notifications. For each check, remove\n  notifications that are older than the oldest stored ping for same check.\n\n    ```\n    $ ./manage.py prunenotifications\n    ```\n\n* Remove user accounts that match either of these conditions:\n  * Account was created more than 6 months ago, and user has never logged in.\n   These can happen when user enters invalid email address when signing up.\n  * Last login was more than 6 months ago, and the account has no checks.\n   Assume the user doesn\'t intend to use the account any more and would\n   probably *want* it removed.\n\n    ```\n    $ ./manage.py pruneusers\n    ```\n\n* Remove old records from the `api_tokenbucket` table. The TokenBucket\n  model is used for rate-limiting login attempts and similar operations.\n  Any records older than one day can be safely removed.\n\n    ```\n    $ ./manage.py prunetokenbucket\n    ```\n\n* Remove old records from the `api_flip` table. The Flip\n  objects are used to track status changes of checks, and to calculate\n  downtime statistics month by month. Flip objects from more than 3 months\n  ago are not used and can be safely removed.\n\n    ```\n    $ ./manage.py pruneflips\n    ```\n\nWhen you first try these commands on your data, it is a good idea to\ntest them on a copy of your database, not on the live database right away.\nIn a production setup, you should also have regular, automated database\nbackups set up.\n\n## Integrations\n\n### Discord\n\nTo enable Discord integration, you will need to:\n\n* register a new application on https://discordapp.com/developers/applications/me\n* add a redirect URI to your Discord application. The URI format is\n  `SITE_ROOT/integrations/add_discord/`. For example, if you are running a\n  development server on `localhost:8000` then the redirect URI would be\n  `http://localhost:8000/integrations/add_discord/`\n* Look up your Discord app\'s Client ID and Client Secret. Put them\n  in `DISCORD_CLIENT_ID` and `DISCORD_CLIENT_SECRET` environment\n  variables.\n\n\n### Pushover\n\nPushover integration works by creating an application on Pushover.net which\nis then subscribed to by Healthchecks users. The registration workflow is as follows:\n\n* On Healthchecks, the user adds a "Pushover" integration to a project\n* Healthchecks redirects user\'s browser to a Pushover.net subscription page\n* User approves adding the Healthchecks subscription to their Pushover account\n* Pushover.net HTTP redirects back to Healthchecks with a subscription token\n* Healthchecks saves the subscription token and uses it for sending Pushover\n  notifications\n\nTo enable the Pushover integration, you will need to:\n\n* Register a new application on Pushover via https://pushover.net/apps/build.\n* Within the Pushover \'application\' configuration, enable subscriptions.\n  Make sure the subscription type is set to "URL". Also make sure the redirect\n  URL is configured to point back to the root of the Healthchecks instance\n  (e.g., `http://healthchecks.example.com/`).\n* Put the Pushover application API Token and the Pushover subscription URL in\n  `PUSHOVER_API_TOKEN` and `PUSHOVER_SUBSCRIPTION_URL` environment\n  variables. The Pushover subscription URL should look similar to\n  `https://pushover.net/subscribe/yourAppName-randomAlphaNumericData`.\n\n### Telegram\n\n* Create a Telegram bot by talking to the\n[BotFather](https://core.telegram.org/bots#6-botfather). Set the bot\'s name,\ndescription, user picture, and add a "/start" command.\n* After creating the bot you will have the bot\'s name and token. Put them\nin `TELEGRAM_BOT_NAME` and `TELEGRAM_TOKEN` environment variables.\n* Run `settelegramwebhook` management command. This command tells Telegram\nwhere to forward channel messages by invoking Telegram\'s\n[setWebhook](https://core.telegram.org/bots/api#setwebhook) API call:\n\n    ```\n    $ ./manage.py settelegramwebhook\n    Done, Telegram\'s webhook set to: https://my-monitoring-project.com/integrations/telegram/bot/\n    ```\n\nFor this to work, your `SITE_ROOT` needs to be correct and use "https://"\nscheme.\n\n### Apprise\n\nTo enable Apprise integration, you will need to:\n\n* ensure you have apprise installed in your local environment:\n```bash\npip install apprise\n```\n* enable the apprise functionality by setting the `APPRISE_ENABLED` environment variable.\n\n### Shell Commands\n\nThe "Shell Commands" integration runs user-defined local shell commands when checks\ngo up or down. This integration is disabled by default, and can be enabled by setting\nthe `SHELL_ENABLED` environment variable to `True`.\n\nNote: be careful when using "Shell Commands" integration, and only enable it when\nyou fully trust the users of your Healthchecks instance. The commands will be executed\nby the `manage.py sendalerts` process, and will run with the same system permissions as\nthe `sendalerts` process.\n\n## Running in Production\n\nHere is a non-exhaustive list of pointers and things to check before launching a Healthchecks instance\nin production.\n\n* Environment variables, settings.py and local_settings.py.\n  * [DEBUG](https://docs.djangoproject.com/en/2.2/ref/settings/#debug). Make sure it is set to `False`.\n  * [ALLOWED_HOSTS](https://docs.djangoproject.com/en/2.2/ref/settings/#allowed-hosts). Make sure it\n    contains the correct domain name you want to use.\n  * Server Errors. When DEBUG=False, Django will not show detailed error pages, and will not print exception\n    tracebacks to standard output. To receive exception tracebacks in email,\n    review and edit the [ADMINS](https://docs.djangoproject.com/en/2.2/ref/settings/#admins) and\n    [SERVER_EMAIL](https://docs.djangoproject.com/en/2.2/ref/settings/#server-email) settings.\n    Another good option for receiving exception tracebacks is to use [Sentry](https://sentry.io/for/django/).\n* Management commands that need to be run during each deployment.\n  * This project uses [Django Compressor](https://django-compressor.readthedocs.io/en/stable/)\n    to combine the CSS and JS files. It is configured for offline compression \xe2\x80\x93 run the\n    `manage.py compress` command whenever files in the `/static/` directory change.\n  * This project uses Django\'s [staticfiles app](https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/).\n    Run the `manage.py collectstatic` command whenever files in the `/static/`\n    directory change. This command collects all the static files inside the `static-collected` directory.\n    Configure your web server to serve files from this directory under the `/static/` prefix.\n  * Database migration should be run after each update to make sure the database schemas are up to date. You can do that with `./manage.py migrate`.\n* Processes that need to be running constantly.\n  * `manage.py runserver` is intended for development only. Do not use it in production,\n    instead consider using [uWSGI](https://uwsgi-docs.readthedocs.io/en/latest/) or\n    [gunicorn](https://gunicorn.org/).\n  * Make sure the `manage.py sendalerts` command is running and can survive server restarts.\n    On modern linux systems, a good option is to\n    [define a systemd service](https://github.com/healthchecks/healthchecks/issues/273#issuecomment-520560304) for it.\n* General\n  * Make sure the database is secured well and is getting backed up regularly\n  * Make sure the TLS certificates are secured well and are getting refreshed regularly\n  * Have monitoring in place to be sure the Healthchecks instance itself is operational\n    (is accepting pings, is sending out alerts, is not running out of resources).\n'