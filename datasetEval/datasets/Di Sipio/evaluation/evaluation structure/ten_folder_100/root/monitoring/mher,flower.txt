b'Flower\n======\n\n.. image:: https://github.com/mher/flower/workflows/Build/badge.svg\n    :target: https://github.com/mher/flower/actions\n\n.. image:: https://img.shields.io/pypi/v/flower.svg\n    :target: https://pypi.python.org/pypi/flower\n\n.. image:: https://travis-ci.org/mher/flower.svg?branch=master\n        :target: https://travis-ci.org/mher/flower\n\nFlower is a web based tool for monitoring and administrating Celery clusters.\n\nFeatures\n--------\n\n- Real-time monitoring using Celery Events\n\n    - Task progress and history\n    - Ability to show task details (arguments, start time, runtime, and more)\n    - Graphs and statistics\n\n- Remote Control\n\n    - View worker status and statistics\n    - Shutdown and restart worker instances\n    - Control worker pool size and autoscale settings\n    - View and modify the queues a worker instance consumes from\n    - View currently running tasks\n    - View scheduled tasks (ETA/countdown)\n    - View reserved and revoked tasks\n    - Apply time and rate limits\n    - Configuration viewer\n    - Revoke or terminate tasks\n\n- Broker monitoring\n\n    - View statistics for all Celery queues\n    - Queue length graphs\n\n- HTTP API\n- Basic Auth and Google OpenID authentication\n\nAPI\n---\n\nFlower API enables to manage the cluster via REST API, call tasks and\nreceive task events in real-time via WebSockets.\n\nFor example you can restart worker\'s pool by: ::\n\n    $ curl -X POST http://localhost:5555/api/worker/pool/restart/myworker\n\nOr call a task by: ::\n\n    $ curl -X POST -d \'{"args":[1,2]}\' http://localhost:5555/api/task/async-apply/tasks.add\n\nOr terminate executing task by: ::\n\n    $ curl -X POST -d \'terminate=True\' http://localhost:5555/api/task/revoke/8a4da87b-e12b-4547-b89a-e92e4d1f8efd\n\nOr receive task completion events in real-time:\n\n.. code-block:: javascript \n\n    var ws = new WebSocket(\'ws://localhost:5555/api/task/events/task-succeeded/\');\n    ws.onmessage = function (event) {\n        console.log(event.data);\n    }\n\nFor more info checkout `API Reference`_ and `examples`_.\n\n.. _API Reference: https://flower.readthedocs.io/en/latest/api.html\n.. _examples: http://nbviewer.ipython.org/urls/raw.github.com/mher/flower/master/docs/api.ipynb\n\nInstallation\n------------\n\nPyPI version: ::\n\n    $ pip install flower\n\nDevelopment version: ::\n\n    $ pip install https://github.com/mher/flower/zipball/master\n\nUsage\n-----\n\nLaunch the server and open http://localhost:5555: ::\n\n    $ flower --port=5555\n\nOr launch from celery: ::\n\n    $ celery flower -A proj --address=127.0.0.1 --port=5555\n\nBroker URL and other configuration options can be passed through the standard Celery options: ::\n\n    $ celery flower -A proj --broker=amqp://guest:guest@localhost:5672//\n\nOr run with unix socket file: ::\n\n    $ flower --unix_socket=/tmp/flower.sock\n\n\nDocumentation\n-------------\n\nDocumentation is available at `Read the Docs`_ and `IPython Notebook Viewer`_\n\n.. _Read the Docs: https://flower.readthedocs.io\n.. _IPython Notebook Viewer: http://nbviewer.ipython.org/urls/raw.github.com/mher/flower/master/docs/api.ipynb\n\nLicense\n-------\n\nFlower is licensed under BSD 3-Clause License. See the LICENSE file\nin the top distribution directory for the full license text.\n\nGetting help\n------------\n\nPlease head over to #celery IRC channel on irc.freenode.net or\n`open an issue`_.\n\n.. _open an issue: https://github.com/mher/flower/issues\n\nContributing\n------------\n\nIf you\'d like to contribute, simply fork `the repository`_, commit your\nchanges, run the tests (`tox`) and send a pull request.\nMake sure you add yourself to CONTRIBUTORS_.\n\nIf you are interested in maintaining the project please contact.\n\n.. _`the repository`: https://github.com/mher/flower\n.. _CONTRIBUTORS: https://github.com/mher/flower/blob/master/CONTRIBUTORS\n'