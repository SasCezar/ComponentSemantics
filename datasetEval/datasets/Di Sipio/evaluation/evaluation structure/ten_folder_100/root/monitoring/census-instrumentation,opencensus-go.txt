b'# OpenCensus Libraries for Go\n\n[![Build Status][travis-image]][travis-url]\n[![Windows Build Status][appveyor-image]][appveyor-url]\n[![GoDoc][godoc-image]][godoc-url]\n[![Gitter chat][gitter-image]][gitter-url]\n\nOpenCensus Go is a Go implementation of OpenCensus, a toolkit for\ncollecting application performance and behavior monitoring data.\nCurrently it consists of three major components: tags, stats and tracing.\n\n#### OpenCensus and OpenTracing have merged to form OpenTelemetry, which serves as the next major version of OpenCensus and OpenTracing. OpenTelemetry will offer backwards compatibility with existing OpenCensus integrations, and we will continue to make security patches to existing OpenCensus libraries for two years. Read more about the merger [here](https://medium.com/opentracing/a-roadmap-to-convergence-b074e5815289).\n\n## Installation\n\n```\n$ go get -u go.opencensus.io\n```\n\nThe API of this project is still evolving, see: [Deprecation Policy](#deprecation-policy).\nThe use of vendoring or a dependency management tool is recommended.\n\n## Prerequisites\n\nOpenCensus Go libraries require Go 1.8 or later.\n\n## Getting Started\n\nThe easiest way to get started using OpenCensus in your application is to use an existing\nintegration with your RPC framework:\n\n* [net/http](https://godoc.org/go.opencensus.io/plugin/ochttp)\n* [gRPC](https://godoc.org/go.opencensus.io/plugin/ocgrpc)\n* [database/sql](https://godoc.org/github.com/opencensus-integrations/ocsql)\n* [Go kit](https://godoc.org/github.com/go-kit/kit/tracing/opencensus)\n* [Groupcache](https://godoc.org/github.com/orijtech/groupcache)\n* [Caddy webserver](https://godoc.org/github.com/orijtech/caddy)\n* [MongoDB](https://godoc.org/github.com/orijtech/mongo-go-driver)\n* [Redis gomodule/redigo](https://godoc.org/github.com/orijtech/redigo)\n* [Redis goredis/redis](https://godoc.org/github.com/orijtech/redis)\n* [Memcache](https://godoc.org/github.com/orijtech/gomemcache)\n\nIf you\'re using a framework not listed here, you could either implement your own middleware for your\nframework or use [custom stats](#stats) and [spans](#spans) directly in your application.\n\n## Exporters\n\nOpenCensus can export instrumentation data to various backends.\nOpenCensus has exporter implementations for the following, users\ncan implement their own exporters by implementing the exporter interfaces\n([stats](https://godoc.org/go.opencensus.io/stats/view#Exporter),\n[trace](https://godoc.org/go.opencensus.io/trace#Exporter)):\n\n* [Prometheus][exporter-prom] for stats\n* [OpenZipkin][exporter-zipkin] for traces\n* [Stackdriver][exporter-stackdriver] Monitoring for stats and Trace for traces\n* [Jaeger][exporter-jaeger] for traces\n* [AWS X-Ray][exporter-xray] for traces\n* [Datadog][exporter-datadog] for stats and traces\n* [Graphite][exporter-graphite] for stats\n* [Honeycomb][exporter-honeycomb] for traces\n* [New Relic][exporter-newrelic] for stats and traces\n\n## Overview\n\n![OpenCensus Overview](https://i.imgur.com/cf4ElHE.jpg)\n\nIn a microservices environment, a user request may go through\nmultiple services until there is a response. OpenCensus allows\nyou to instrument your services and collect diagnostics data all\nthrough your services end-to-end.\n\n## Tags\n\nTags represent propagated key-value pairs. They are propagated using `context.Context`\nin the same process or can be encoded to be transmitted on the wire. Usually, this will\nbe handled by an integration plugin, e.g. `ocgrpc.ServerHandler` and `ocgrpc.ClientHandler`\nfor gRPC.\n\nPackage `tag` allows adding or modifying tags in the current context.\n\n[embedmd]:# (internal/readme/tags.go new)\n```go\nctx, err := tag.New(ctx,\n\ttag.Insert(osKey, "macOS-10.12.5"),\n\ttag.Upsert(userIDKey, "cde36753ed"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n## Stats\n\nOpenCensus is a low-overhead framework even if instrumentation is always enabled.\nIn order to be so, it is optimized to make recording of data points fast\nand separate from the data aggregation.\n\nOpenCensus stats collection happens in two stages:\n\n* Definition of measures and recording of data points\n* Definition of views and aggregation of the recorded data\n\n### Recording\n\nMeasurements are data points associated with a measure.\nRecording implicitly tags the set of Measurements with the tags from the\nprovided context:\n\n[embedmd]:# (internal/readme/stats.go record)\n```go\nstats.Record(ctx, videoSize.M(102478))\n```\n\n### Views\n\nViews are how Measures are aggregated. You can think of them as queries over the\nset of recorded data points (measurements).\n\nViews have two parts: the tags to group by and the aggregation type used.\n\nCurrently three types of aggregations are supported:\n* CountAggregation is used to count the number of times a sample was recorded.\n* DistributionAggregation is used to provide a histogram of the values of the samples.\n* SumAggregation is used to sum up all sample values.\n\n[embedmd]:# (internal/readme/stats.go aggs)\n```go\ndistAgg := view.Distribution(1<<32, 2<<32, 3<<32)\ncountAgg := view.Count()\nsumAgg := view.Sum()\n```\n\nHere we create a view with the DistributionAggregation over our measure.\n\n[embedmd]:# (internal/readme/stats.go view)\n```go\nif err := view.Register(&view.View{\n\tName:        "example.com/video_size_distribution",\n\tDescription: "distribution of processed video size over time",\n\tMeasure:     videoSize,\n\tAggregation: view.Distribution(1<<32, 2<<32, 3<<32),\n}); err != nil {\n\tlog.Fatalf("Failed to register view: %v", err)\n}\n```\n\nRegister begins collecting data for the view. Registered views\' data will be\nexported via the registered exporters.\n\n## Traces\n\nA distributed trace tracks the progression of a single user request as\nit is handled by the services and processes that make up an application.\nEach step is called a span in the trace. Spans include metadata about the step,\nincluding especially the time spent in the step, called the span\xe2\x80\x99s latency.\n\nBelow you see a trace and several spans underneath it.\n\n![Traces and spans](https://i.imgur.com/7hZwRVj.png)\n\n### Spans\n\nSpan is the unit step in a trace. Each span has a name, latency, status and\nadditional metadata.\n\nBelow we are starting a span for a cache read and ending it\nwhen we are done:\n\n[embedmd]:# (internal/readme/trace.go startend)\n```go\nctx, span := trace.StartSpan(ctx, "cache.Get")\ndefer span.End()\n\n// Do work to get from cache.\n```\n\n### Propagation\n\nSpans can have parents or can be root spans if they don\'t have any parents.\nThe current span is propagated in-process and across the network to allow associating\nnew child spans with the parent.\n\nIn the same process, `context.Context` is used to propagate spans.\n`trace.StartSpan` creates a new span as a root if the current context\ndoesn\'t contain a span. Or, it creates a child of the span that is\nalready in current context. The returned context can be used to keep\npropagating the newly created span in the current context.\n\n[embedmd]:# (internal/readme/trace.go startend)\n```go\nctx, span := trace.StartSpan(ctx, "cache.Get")\ndefer span.End()\n\n// Do work to get from cache.\n```\n\nAcross the network, OpenCensus provides different propagation\nmethods for different protocols.\n\n* gRPC integrations use the OpenCensus\' [binary propagation format](https://godoc.org/go.opencensus.io/trace/propagation).\n* HTTP integrations use Zipkin\'s [B3](https://github.com/openzipkin/b3-propagation)\n  by default but can be configured to use a custom propagation method by setting another\n  [propagation.HTTPFormat](https://godoc.org/go.opencensus.io/trace/propagation#HTTPFormat).\n\n## Execution Tracer\n\nWith Go 1.11, OpenCensus Go will support integration with the Go execution tracer.\nSee [Debugging Latency in Go](https://medium.com/observability/debugging-latency-in-go-1-11-9f97a7910d68)\nfor an example of their mutual use.\n\n## Profiles\n\nOpenCensus tags can be applied as profiler labels\nfor users who are on Go 1.9 and above.\n\n[embedmd]:# (internal/readme/tags.go profiler)\n```go\nctx, err = tag.New(ctx,\n\ttag.Insert(osKey, "macOS-10.12.5"),\n\ttag.Insert(userIDKey, "fff0989878"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\ntag.Do(ctx, func(ctx context.Context) {\n\t// Do work.\n\t// When profiling is on, samples will be\n\t// recorded with the key/values from the tag map.\n})\n```\n\nA screenshot of the CPU profile from the program above:\n\n![CPU profile](https://i.imgur.com/jBKjlkw.png)\n\n## Deprecation Policy\n\nBefore version 1.0.0, the following deprecation policy will be observed:\n\nNo backwards-incompatible changes will be made except for the removal of symbols that have\nbeen marked as *Deprecated* for at least one minor release (e.g. 0.9.0 to 0.10.0). A release\nremoving the *Deprecated* functionality will be made no sooner than 28 days after the first\nrelease in which the functionality was marked *Deprecated*.\n\n[travis-image]: https://travis-ci.org/census-instrumentation/opencensus-go.svg?branch=master\n[travis-url]: https://travis-ci.org/census-instrumentation/opencensus-go\n[appveyor-image]: https://ci.appveyor.com/api/projects/status/vgtt29ps1783ig38?svg=true\n[appveyor-url]: https://ci.appveyor.com/project/opencensusgoteam/opencensus-go/branch/master\n[godoc-image]: https://godoc.org/go.opencensus.io?status.svg\n[godoc-url]: https://godoc.org/go.opencensus.io\n[gitter-image]: https://badges.gitter.im/census-instrumentation/lobby.svg\n[gitter-url]: https://gitter.im/census-instrumentation/lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\n\n[new-ex]: https://godoc.org/go.opencensus.io/tag#example-NewMap\n[new-replace-ex]: https://godoc.org/go.opencensus.io/tag#example-NewMap--Replace\n\n[exporter-prom]: https://godoc.org/contrib.go.opencensus.io/exporter/prometheus\n[exporter-stackdriver]: https://godoc.org/contrib.go.opencensus.io/exporter/stackdriver\n[exporter-zipkin]: https://godoc.org/contrib.go.opencensus.io/exporter/zipkin\n[exporter-jaeger]: https://godoc.org/contrib.go.opencensus.io/exporter/jaeger\n[exporter-xray]: https://github.com/census-ecosystem/opencensus-go-exporter-aws\n[exporter-datadog]: https://github.com/DataDog/opencensus-go-exporter-datadog\n[exporter-graphite]: https://github.com/census-ecosystem/opencensus-go-exporter-graphite\n[exporter-honeycomb]: https://github.com/honeycombio/opencensus-exporter\n[exporter-newrelic]: https://github.com/newrelic/newrelic-opencensus-exporter-go\n'