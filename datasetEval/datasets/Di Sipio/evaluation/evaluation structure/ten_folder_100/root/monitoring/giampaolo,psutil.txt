b'|  |downloads| |stars| |forks| |contributors| |coverage| |quality|\n|  |version| |py-versions| |packages| |license|\n|  |travis| |appveyor| |doc| |twitter| |tidelift|\n\n.. |downloads| image:: https://img.shields.io/pypi/dm/psutil.svg\n    :target: https://pepy.tech/project/psutil\n    :alt: Downloads\n\n.. |stars| image:: https://img.shields.io/github/stars/giampaolo/psutil.svg\n    :target: https://github.com/giampaolo/psutil/stargazers\n    :alt: Github stars\n\n.. |forks| image:: https://img.shields.io/github/forks/giampaolo/psutil.svg\n    :target: https://github.com/giampaolo/psutil/network/members\n    :alt: Github forks\n\n.. |contributors| image:: https://img.shields.io/github/contributors/giampaolo/psutil.svg\n    :target: https://github.com/giampaolo/psutil/graphs/contributors\n    :alt: Contributors\n\n.. |quality| image:: https://img.shields.io/codacy/grade/ce63e7f7f69d44b5b59682196e6fbfca.svg\n    :target: https://www.codacy.com/app/g-rodola/psutil?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=giampaolo/psutil&amp;utm_campaign=Badge_Grade\n    :alt: Code quality\n\n.. |travis| image:: https://img.shields.io/travis/giampaolo/psutil/master.svg?maxAge=3600&label=linux%20/%20osx\n    :target: https://travis-ci.org/giampaolo/psutil\n    :alt: Linux tests (Travis)\n\n.. |appveyor| image:: https://img.shields.io/appveyor/ci/giampaolo/psutil/master.svg?maxAge=3600&label=windows\n    :target: https://ci.appveyor.com/project/giampaolo/psutil\n    :alt: Windows tests (Appveyor)\n\n.. |coverage| image:: https://img.shields.io/coveralls/github/giampaolo/psutil.svg?label=test%20coverage\n    :target: https://coveralls.io/github/giampaolo/psutil?branch=master\n    :alt: Test coverage (coverall.io)\n\n.. |doc| image:: https://readthedocs.org/projects/psutil/badge/?version=latest\n    :target: http://psutil.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. |version| image:: https://img.shields.io/pypi/v/psutil.svg?label=pypi\n    :target: https://pypi.org/project/psutil\n    :alt: Latest version\n\n.. |py-versions| image:: https://img.shields.io/pypi/pyversions/psutil.svg\n    :target: https://pypi.org/project/psutil\n    :alt: Supported Python versions\n\n.. |packages| image:: https://repology.org/badge/tiny-repos/python:psutil.svg\n    :target: https://repology.org/metapackage/python:psutil/versions\n    :alt: Binary packages\n\n.. |license| image:: https://img.shields.io/pypi/l/psutil.svg\n    :target: https://github.com/giampaolo/psutil/blob/master/LICENSE\n    :alt: License\n\n.. |twitter| image:: https://img.shields.io/twitter/follow/grodola.svg?label=follow&style=flat&logo=twitter&logoColor=4FADFF\n    :target: https://twitter.com/grodola\n    :alt: Twitter Follow\n\n.. |tidelift| image:: https://tidelift.com/badges/github/giampaolo/psutil?style=flat\n    :target: https://tidelift.com/subscription/pkg/pypi-psutil?utm_source=pypi-psutil&utm_medium=referral&utm_campaign=readme\n    :alt: Tidelift\n\n-----\n\nQuick links\n===========\n\n- `Home page <https://github.com/giampaolo/psutil>`_\n- `Install <https://github.com/giampaolo/psutil/blob/master/INSTALL.rst>`_\n- `Documentation <http://psutil.readthedocs.io>`_\n- `Download <https://pypi.org/project/psutil/#files>`_\n- `Forum <http://groups.google.com/group/psutil/topics>`_\n- `StackOverflow <https://stackoverflow.com/questions/tagged/psutil>`_\n- `Blog <http://grodola.blogspot.com/search/label/psutil>`_\n- `Development guide <https://github.com/giampaolo/psutil/blob/master/docs/DEVGUIDE.rst>`_\n- `What\'s new <https://github.com/giampaolo/psutil/blob/master/HISTORY.rst>`_\n\nSummary\n=======\n\npsutil (process and system utilities) is a cross-platform library for\nretrieving information on **running processes** and **system utilization**\n(CPU, memory, disks, network, sensors) in Python.\nIt is useful mainly for **system monitoring**, **profiling and limiting process\nresources** and **management of running processes**.\nIt implements many functionalities offered by classic UNIX command line tools\nsuch as *ps, top, iotop, lsof, netstat, ifconfig, free* and others.\npsutil currently supports the following platforms:\n\n- **Linux**\n- **Windows**\n- **macOS**\n- **FreeBSD, OpenBSD**, **NetBSD**\n- **Sun Solaris**\n- **AIX**\n\n...both **32-bit** and **64-bit** architectures. Supported Python versions are **2.6**, **2.7** and **3.4+**. `PyPy <http://pypy.org/>`__ is also known to work.\n\nProfessional support\n====================\n\n.. |tideliftlogo| image:: https://nedbatchelder.com/pix/Tidelift_Logos_RGB_Tidelift_Shorthand_On-White_small.png\n   :width: 100\n   :alt: Tidelift\n   :target: https://tidelift.com/subscription/pkg/pypi-psutil?utm_source=pypi-psutil&utm_medium=referral&utm_campaign=readme\n\n.. list-table::\n   :widths: 10 100\n\n   * - |tideliftlogo|\n     - Professional support for psutil is available as part of the\n       `Tidelift Subscription`_.\n       Tidelift gives software development teams a single source for purchasing\n       and maintaining their software, with professional grade assurances from\n       the experts who know it best, while seamlessly integrating with existing\n       tools.\n       By subscribing you will help me (`Giampaolo Rodola`_) support psutil\n       future development. Alternatively consider making a small `donation`_.\n\nSecurity\n========\n\nTo report a security vulnerability, please use the `Tidelift security\ncontact`_.  Tidelift will coordinate the fix and disclosure.\n\nExample applications\n====================\n\n+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+\n| .. image:: https://github.com/giampaolo/psutil/blob/master/docs/_static/procinfo-small.png     | .. image:: https://github.com/giampaolo/psutil/blob/master/docs/_static/top-small.png      |\n|    :target: https://github.com/giampaolo/psutil/blob/master/docs/_static/procinfo.png          |     :target: https://github.com/giampaolo/psutil/blob/master/docs/_static/top.png          |\n+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+\n| .. image:: https://github.com/giampaolo/psutil/blob/master/docs/_static/procsmem-small.png     | .. image:: https://github.com/giampaolo/psutil/blob/master/docs/_static/pmap-small.png     |\n|     :target: https://github.com/giampaolo/psutil/blob/master/docs/_static/procsmem.png         |     :target: https://github.com/giampaolo/psutil/blob/master/docs/_static/pmap.png         |\n+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+\n\nAlso see `scripts directory <https://github.com/giampaolo/psutil/tree/master/scripts>`__\nand `doc recipes <http://psutil.readthedocs.io/#recipes/>`__.\n\nProjects using psutil\n=====================\n\npsutil has roughly the following monthly downloads:\n\n.. image:: https://img.shields.io/pypi/dm/psutil.svg\n    :target: https://pepy.tech/project/psutil\n    :alt: Downloads\n\nThere are over\n`10.000 open source projects <https://libraries.io/pypi/psutil/dependent_repositories?page=1>`__\non github which depend from psutil.\nHere\'s some I find particularly interesting:\n\n- https://github.com/google/grr\n- https://github.com/facebook/osquery/\n- https://github.com/nicolargo/glances\n- https://github.com/Jahaja/psdash\n- https://github.com/ajenti/ajenti\n- https://github.com/home-assistant/home-assistant/\n\n\nPortings\n========\n\n- Go: https://github.com/shirou/gopsutil\n- C: https://github.com/hamon-in/cpslib\n- Node: https://github.com/christkv/node-psutil\n- Rust: https://github.com/borntyping/rust-psutil\n- Ruby: https://github.com/spacewander/posixpsutil\n- Nim: https://github.com/johnscillieri/psutil-nim\n\n\nExample usages\n==============\n\nThis represents pretty much the whole psutil API.\n\nCPU\n---\n\n.. code-block:: python\n\n    >>> import psutil\n    >>>\n    >>> psutil.cpu_times()\n    scputimes(user=3961.46, nice=169.729, system=2150.659, idle=16900.540, iowait=629.59, irq=0.0, softirq=19.42, steal=0.0, guest=0, nice=0.0)\n    >>>\n    >>> for x in range(3):\n    ...     psutil.cpu_percent(interval=1)\n    ...\n    4.0\n    5.9\n    3.8\n    >>>\n    >>> for x in range(3):\n    ...     psutil.cpu_percent(interval=1, percpu=True)\n    ...\n    [4.0, 6.9, 3.7, 9.2]\n    [7.0, 8.5, 2.4, 2.1]\n    [1.2, 9.0, 9.9, 7.2]\n    >>>\n    >>> for x in range(3):\n    ...     psutil.cpu_times_percent(interval=1, percpu=False)\n    ...\n    scputimes(user=1.5, nice=0.0, system=0.5, idle=96.5, iowait=1.5, irq=0.0, softirq=0.0, steal=0.0, guest=0.0, guest_nice=0.0)\n    scputimes(user=1.0, nice=0.0, system=0.0, idle=99.0, iowait=0.0, irq=0.0, softirq=0.0, steal=0.0, guest=0.0, guest_nice=0.0)\n    scputimes(user=2.0, nice=0.0, system=0.0, idle=98.0, iowait=0.0, irq=0.0, softirq=0.0, steal=0.0, guest=0.0, guest_nice=0.0)\n    >>>\n    >>> psutil.cpu_count()\n    4\n    >>> psutil.cpu_count(logical=False)\n    2\n    >>>\n    >>> psutil.cpu_stats()\n    scpustats(ctx_switches=20455687, interrupts=6598984, soft_interrupts=2134212, syscalls=0)\n    >>>\n    >>> psutil.cpu_freq()\n    scpufreq(current=931.42925, min=800.0, max=3500.0)\n    >>>\n    >>> psutil.getloadavg()  # also on Windows (emulated)\n    (3.14, 3.89, 4.67)\n\nMemory\n------\n\n.. code-block:: python\n\n    >>> psutil.virtual_memory()\n    svmem(total=10367352832, available=6472179712, percent=37.6, used=8186245120, free=2181107712, active=4748992512, inactive=2758115328, buffers=790724608, cached=3500347392, shared=787554304)\n    >>> psutil.swap_memory()\n    sswap(total=2097147904, used=296128512, free=1801019392, percent=14.1, sin=304193536, sout=677842944)\n    >>>\n\nDisks\n-----\n\n.. code-block:: python\n\n    >>> psutil.disk_partitions()\n    [sdiskpart(device=\'/dev/sda1\', mountpoint=\'/\', fstype=\'ext4\', opts=\'rw,nosuid\'),\n     sdiskpart(device=\'/dev/sda2\', mountpoint=\'/home\', fstype=\'ext, opts=\'rw\')]\n    >>>\n    >>> psutil.disk_usage(\'/\')\n    sdiskusage(total=21378641920, used=4809781248, free=15482871808, percent=22.5)\n    >>>\n    >>> psutil.disk_io_counters(perdisk=False)\n    sdiskio(read_count=719566, write_count=1082197, read_bytes=18626220032, write_bytes=24081764352, read_time=5023392, write_time=63199568, read_merged_count=619166, write_merged_count=812396, busy_time=4523412)\n    >>>\n\nNetwork\n-------\n\n.. code-block:: python\n\n    >>> psutil.net_io_counters(pernic=True)\n    {\'eth0\': netio(bytes_sent=485291293, bytes_recv=6004858642, packets_sent=3251564, packets_recv=4787798, errin=0, errout=0, dropin=0, dropout=0),\n     \'lo\': netio(bytes_sent=2838627, bytes_recv=2838627, packets_sent=30567, packets_recv=30567, errin=0, errout=0, dropin=0, dropout=0)}\n    >>>\n    >>> psutil.net_connections()\n    [sconn(fd=115, family=<AddressFamily.AF_INET: 2>, type=<SocketType.SOCK_STREAM: 1>, laddr=addr(ip=\'10.0.0.1\', port=48776), raddr=addr(ip=\'93.186.135.91\', port=80), status=\'ESTABLISHED\', pid=1254),\n     sconn(fd=117, family=<AddressFamily.AF_INET: 2>, type=<SocketType.SOCK_STREAM: 1>, laddr=addr(ip=\'10.0.0.1\', port=43761), raddr=addr(ip=\'72.14.234.100\', port=80), status=\'CLOSING\', pid=2987),\n     ...]\n    >>>\n    >>> psutil.net_if_addrs()\n    {\'lo\': [snicaddr(family=<AddressFamily.AF_INET: 2>, address=\'127.0.0.1\', netmask=\'255.0.0.0\', broadcast=\'127.0.0.1\', ptp=None),\n            snicaddr(family=<AddressFamily.AF_INET6: 10>, address=\'::1\', netmask=\'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\', broadcast=None, ptp=None),\n            snicaddr(family=<AddressFamily.AF_LINK: 17>, address=\'00:00:00:00:00:00\', netmask=None, broadcast=\'00:00:00:00:00:00\', ptp=None)],\n     \'wlan0\': [snicaddr(family=<AddressFamily.AF_INET: 2>, address=\'192.168.1.3\', netmask=\'255.255.255.0\', broadcast=\'192.168.1.255\', ptp=None),\n               snicaddr(family=<AddressFamily.AF_INET6: 10>, address=\'fe80::c685:8ff:fe45:641%wlan0\', netmask=\'ffff:ffff:ffff:ffff::\', broadcast=None, ptp=None),\n               snicaddr(family=<AddressFamily.AF_LINK: 17>, address=\'c4:85:08:45:06:41\', netmask=None, broadcast=\'ff:ff:ff:ff:ff:ff\', ptp=None)]}\n    >>>\n    >>> psutil.net_if_stats()\n    {\'lo\': snicstats(isup=True, duplex=<NicDuplex.NIC_DUPLEX_UNKNOWN: 0>, speed=0, mtu=65536),\n     \'wlan0\': snicstats(isup=True, duplex=<NicDuplex.NIC_DUPLEX_FULL: 2>, speed=100, mtu=1500)}\n    >>>\n\nSensors\n-------\n\n.. code-block:: python\n\n    >>> import psutil\n    >>> psutil.sensors_temperatures()\n    {\'acpitz\': [shwtemp(label=\'\', current=47.0, high=103.0, critical=103.0)],\n     \'asus\': [shwtemp(label=\'\', current=47.0, high=None, critical=None)],\n     \'coretemp\': [shwtemp(label=\'Physical id 0\', current=52.0, high=100.0, critical=100.0),\n                  shwtemp(label=\'Core 0\', current=45.0, high=100.0, critical=100.0)]}\n    >>>\n    >>> psutil.sensors_fans()\n    {\'asus\': [sfan(label=\'cpu_fan\', current=3200)]}\n    >>>\n    >>> psutil.sensors_battery()\n    sbattery(percent=93, secsleft=16628, power_plugged=False)\n    >>>\n\nOther system info\n-----------------\n\n.. code-block:: python\n\n    >>> import psutil\n    >>> psutil.users()\n    [suser(name=\'giampaolo\', terminal=\'pts/2\', host=\'localhost\', started=1340737536.0, pid=1352),\n     suser(name=\'giampaolo\', terminal=\'pts/3\', host=\'localhost\', started=1340737792.0, pid=1788)]\n    >>>\n    >>> psutil.boot_time()\n    1365519115.0\n    >>>\n\nProcess management\n------------------\n\n.. code-block:: python\n\n    >>> import psutil\n    >>> psutil.pids()\n    [1, 2, 3, 4, 5, 6, 7, 46, 48, 50, 51, 178, 182, 222, 223, 224, 268, 1215, 1216, 1220, 1221, 1243, 1244,\n     1301, 1601, 2237, 2355, 2637, 2774, 3932, 4176, 4177, 4185, 4187, 4189, 4225, 4243, 4245, 4263, 4282,\n     4306, 4311, 4312, 4313, 4314, 4337, 4339, 4357, 4358, 4363, 4383, 4395, 4408, 4433, 4443, 4445, 4446,\n     5167, 5234, 5235, 5252, 5318, 5424, 5644, 6987, 7054, 7055, 7071]\n    >>>\n    >>> p = psutil.Process(7055)\n    >>> p\n    psutil.Process(pid=7055, name=\'python\', started=\'09:04:44\')\n    >>> p.name()\n    \'python\'\n    >>> p.exe()\n    \'/usr/bin/python\'\n    >>> p.cwd()\n    \'/home/giampaolo\'\n    >>> p.cmdline()\n    [\'/usr/bin/python\', \'main.py\']\n    >>>\n    >>> p.pid\n    7055\n    >>> p.ppid()\n    7054\n    >>> p.children(recursive=True)\n    [psutil.Process(pid=29835, name=\'python2.7\', started=\'11:45:38\'),\n     psutil.Process(pid=29836, name=\'python2.7\', started=\'11:43:39\')]\n    >>>\n    >>> p.parent()\n    psutil.Process(pid=4699, name=\'bash\', started=\'09:06:44\')\n    >>> p.parents()\n    [psutil.Process(pid=4699, name=\'bash\', started=\'09:06:44\'),\n     psutil.Process(pid=4689, name=\'gnome-terminal-server\', started=\'0:06:44\'),\n     psutil.Process(pid=1, name=\'systemd\', started=\'05:56:55\')]\n    >>>\n    >>> p.status()\n    \'running\'\n    >>> p.username()\n    \'giampaolo\'\n    >>> p.create_time()\n    1267551141.5019531\n    >>> p.terminal()\n    \'/dev/pts/0\'\n    >>>\n    >>> p.uids()\n    puids(real=1000, effective=1000, saved=1000)\n    >>> p.gids()\n    pgids(real=1000, effective=1000, saved=1000)\n    >>>\n    >>> p.cpu_times()\n    pcputimes(user=1.02, system=0.31, children_user=0.32, children_system=0.1, iowait=0.0)\n    >>> p.cpu_percent(interval=1.0)\n    12.1\n    >>> p.cpu_affinity()\n    [0, 1, 2, 3]\n    >>> p.cpu_affinity([0, 1])  # set\n    >>> p.cpu_num()\n    1\n    >>>\n    >>> p.memory_info()\n    pmem(rss=10915840, vms=67608576, shared=3313664, text=2310144, lib=0, data=7262208, dirty=0)\n    >>> p.memory_full_info()  # "real" USS memory usage (Linux, macOS, Win only)\n    pfullmem(rss=10199040, vms=52133888, shared=3887104, text=2867200, lib=0, data=5967872, dirty=0, uss=6545408, pss=6872064, swap=0)\n    >>> p.memory_percent()\n    0.7823\n    >>> p.memory_maps()\n    [pmmap_grouped(path=\'/lib/x8664-linux-gnu/libutil-2.15.so\', rss=32768, size=2125824, pss=32768, shared_clean=0, shared_dirty=0, private_clean=20480, private_dirty=12288, referenced=32768, anonymous=12288, swap=0),\n     pmmap_grouped(path=\'/lib/x8664-linux-gnu/libc-2.15.so\', rss=3821568, size=3842048, pss=3821568, shared_clean=0, shared_dirty=0, private_clean=0, private_dirty=3821568, referenced=3575808, anonymous=3821568, swap=0),\n     pmmap_grouped(path=\'[heap]\',  rss=32768, size=139264, pss=32768, shared_clean=0, shared_dirty=0, private_clean=0, private_dirty=32768, referenced=32768, anonymous=32768, swap=0),\n     pmmap_grouped(path=\'[stack]\', rss=2465792, size=2494464, pss=2465792, shared_clean=0, shared_dirty=0, private_clean=0, private_dirty=2465792, referenced=2277376, anonymous=2465792, swap=0),\n     ...]\n    >>>\n    >>> p.io_counters()\n    pio(read_count=478001, write_count=59371, read_bytes=700416, write_bytes=69632, read_chars=456232, write_chars=517543)\n    >>>\n    >>> p.open_files()\n    [popenfile(path=\'/home/giampaolo/monit.py\', fd=3, position=0, mode=\'r\', flags=32768),\n     popenfile(path=\'/var/log/monit.log\', fd=4, position=235542, mode=\'a\', flags=33793)]\n    >>>\n    >>> p.connections()\n    [pconn(fd=115, family=<AddressFamily.AF_INET: 2>, type=<SocketType.SOCK_STREAM: 1>, laddr=addr(ip=\'10.0.0.1\', port=48776), raddr=addr(ip=\'93.186.135.91\', port=80), status=\'ESTABLISHED\'),\n     pconn(fd=117, family=<AddressFamily.AF_INET: 2>, type=<SocketType.SOCK_STREAM: 1>, laddr=addr(ip=\'10.0.0.1\', port=43761), raddr=addr(ip=\'72.14.234.100\', port=80), status=\'CLOSING\')]\n    >>>\n    >>> p.num_threads()\n    4\n    >>> p.num_fds()\n    8\n    >>> p.threads()\n    [pthread(id=5234, user_time=22.5, system_time=9.2891),\n     pthread(id=5237, user_time=0.0707, system_time=1.1)]\n    >>>\n    >>> p.num_ctx_switches()\n    pctxsw(voluntary=78, involuntary=19)\n    >>>\n    >>> p.nice()\n    0\n    >>> p.nice(10)  # set\n    >>>\n    >>> p.ionice(psutil.IOPRIO_CLASS_IDLE)  # IO priority (Win and Linux only)\n    >>> p.ionice()\n    pionice(ioclass=<IOPriority.IOPRIO_CLASS_IDLE: 3>, value=0)\n    >>>\n    >>> p.rlimit(psutil.RLIMIT_NOFILE, (5, 5))  # set resource limits (Linux only)\n    >>> p.rlimit(psutil.RLIMIT_NOFILE)\n    (5, 5)\n    >>>\n    >>> p.environ()\n    {\'LC_PAPER\': \'it_IT.UTF-8\', \'SHELL\': \'/bin/bash\', \'GREP_OPTIONS\': \'--color=auto\',\n    \'XDG_CONFIG_DIRS\': \'/etc/xdg/xdg-ubuntu:/usr/share/upstart/xdg:/etc/xdg\',\n     ...}\n    >>>\n    >>> p.as_dict()\n    {\'status\': \'running\', \'num_ctx_switches\': pctxsw(voluntary=63, involuntary=1), \'pid\': 5457, ...}\n    >>> p.is_running()\n    True\n    >>> p.suspend()\n    >>> p.resume()\n    >>>\n    >>> p.terminate()\n    >>> p.kill()\n    >>> p.wait(timeout=3)\n    0\n    >>>\n    >>> psutil.test()\n    USER         PID %CPU %MEM     VSZ     RSS TTY        START    TIME  COMMAND\n    root           1  0.0  0.0   24584    2240            Jun17   00:00  init\n    root           2  0.0  0.0       0       0            Jun17   00:00  kthreadd\n    ...\n    giampaolo  31475  0.0  0.0   20760    3024 /dev/pts/0 Jun19   00:00  python2.4\n    giampaolo  31721  0.0  2.2  773060  181896            00:04   10:30  chrome\n    root       31763  0.0  0.0       0       0            00:05   00:00  kworker/0:1\n    >>>\n\nFurther process APIs\n--------------------\n\n.. code-block:: python\n\n    >>> import psutil\n    >>> for proc in psutil.process_iter(attrs=[\'pid\', \'name\']):\n    ...     print(proc.info)\n    ...\n    {\'pid\': 1, \'name\': \'systemd\'}\n    {\'pid\': 2, \'name\': \'kthreadd\'}\n    {\'pid\': 3, \'name\': \'ksoftirqd/0\'}\n    ...\n    >>>\n    >>> psutil.pid_exists(3)\n    True\n    >>>\n    >>> def on_terminate(proc):\n    ...     print("process {} terminated".format(proc))\n    ...\n    >>> # waits for multiple processes to terminate\n    >>> gone, alive = psutil.wait_procs(procs_list, timeout=3, callback=on_terminate)\n    >>>\n\nPopen wrapper:\n\n.. code-block:: python\n\n    >>> import psutil\n    >>> from subprocess import PIPE\n    >>> p = psutil.Popen(["/usr/bin/python", "-c", "print(\'hello\')"], stdout=PIPE)\n    >>> p.name()\n    \'python\'\n    >>> p.username()\n    \'giampaolo\'\n    >>> p.communicate()\n    (\'hello\\n\', None)\n    >>> p.wait(timeout=2)\n    0\n    >>>\n\nWindows services\n----------------\n\n.. code-block:: python\n\n    >>> list(psutil.win_service_iter())\n    [<WindowsService(name=\'AeLookupSvc\', display_name=\'Application Experience\') at 38850096>,\n     <WindowsService(name=\'ALG\', display_name=\'Application Layer Gateway Service\') at 38850128>,\n     <WindowsService(name=\'APNMCP\', display_name=\'Ask Update Service\') at 38850160>,\n     <WindowsService(name=\'AppIDSvc\', display_name=\'Application Identity\') at 38850192>,\n     ...]\n    >>> s = psutil.win_service_get(\'alg\')\n    >>> s.as_dict()\n    {\'binpath\': \'C:\\\\Windows\\\\System32\\\\alg.exe\',\n     \'description\': \'Provides support for 3rd party protocol plug-ins for Internet Connection Sharing\',\n     \'display_name\': \'Application Layer Gateway Service\',\n     \'name\': \'alg\',\n     \'pid\': None,\n     \'start_type\': \'manual\',\n     \'status\': \'stopped\',\n     \'username\': \'NT AUTHORITY\\\\LocalService\'}\n\n\n.. _`Giampaolo Rodola`: http://grodola.blogspot.com/p/about.html\n.. _`donation`: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=A9ZS7PKKRM3S8\n.. _Tidelift security contact: https://tidelift.com/security\n.. _Tidelift Subscription: https://tidelift.com/subscription/pkg/pypi-psutil?utm_source=pypi-psutil&utm_medium=referral&utm_campaign=readme\n\n'