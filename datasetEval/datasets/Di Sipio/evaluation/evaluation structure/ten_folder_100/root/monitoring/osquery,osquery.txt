b'# osquery\n\n<p align="center">\n<img alt="osquery logo" width="200"\nsrc="https://github.com/facebook/osquery/raw/master/docs/img/logo-2x-dark.png" />\n</p>\n\n<p align="center">\nosquery is a SQL powered operating system instrumentation, monitoring, and analytics framework.\n<br>\nAvailable for Linux, macOS, Windows, and FreeBSD.\n</p>\n\n**Information and resources**\n- Homepage: https://osquery.io\n- Downloads: https://osquery.io/downloads\n- Documentation: https://osquery.readthedocs.org\n- Stack Overflow: https://stackoverflow.com/questions/tagged/osquery\n- Table Schema: https://osquery.io/schema\n- Query Packs: [https://osquery.io/packs](https://github.com/facebook/osquery/tree/master/packs)\n- Slack: [![Slack Status](https://osquery-slack.herokuapp.com/badge.svg)](https://osquery-slack.herokuapp.com)\n- Build Status: [![Build Status](https://dev.azure.com/trailofbits/osquery/_apis/build/status/osquery?branchName=master)](https://dev.azure.com/trailofbits/osquery/_build/latest?definitionId=6&branchName=master) [![Coverity Scan Build Status](https://scan.coverity.com/projects/13317/badge.svg)](https://scan.coverity.com/projects/osquery)\n- CII Best Practices: [![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/3125/badge)](https://bestpractices.coreinfrastructure.org/projects/3125)\n\n\n## What is osquery?\n\nosquery exposes an operating system as a high-performance relational database.  This allows you to\nwrite SQL-based queries to explore operating system data.  With osquery, SQL tables represent\nabstract concepts such as running processes, loaded kernel modules, open network connections,\nbrowser plugins, hardware events or file hashes.\n\nSQL tables are implemented via a simple plugin and extensions API. A variety of tables already exist\nand more are being written: [https://osquery.io/schema](https://osquery.io/schema/). To best\nunderstand the expressiveness that is afforded to you by osquery, consider the following SQL\nqueries:\n\nList the [`users`](https://osquery.io/schema/current#users):\n```sql\nSELECT * FROM users;\n```\n\nCheck the [`processes`](https://osquery.io/schema/current#processes) that have a deleted executable:\n```sql\nSELECT * FROM processes WHERE on_disk = 0;\n```\n\nGet the process name, port, and PID, for processes listening on all interfaces:\n```sql\nSELECT DISTINCT processes.name, listening_ports.port, processes.pid\n  FROM listening_ports JOIN processes USING (pid)\n  WHERE listening_ports.address = \'0.0.0.0\';\n```\n\nFind every macOS LaunchDaemon that launches an executable and keeps it running:\n```sql\nSELECT name, program || program_arguments AS executable\n  FROM launchd\n  WHERE (run_at_load = 1 AND keep_alive = 1)\n  AND (program != \'\' OR program_arguments != \'\');\n```\n\nCheck for ARP anomalies from the host\'s perspective:\n\n```sql\nSELECT address, mac, COUNT(mac) AS mac_count\n  FROM arp_cache GROUP BY mac\n  HAVING count(mac) > 1;\n```\n\nAlternatively, you could also use a SQL sub-query to accomplish the same result:\n\n```sql\nSELECT address, mac, mac_count\n  FROM\n    (SELECT address, mac, COUNT(mac) AS mac_count FROM arp_cache GROUP BY mac)\n  WHERE mac_count > 1;\n```\n\nThese queries can be:\n* performed on an ad-hoc basis to explore operating system state using the\n  [osqueryi](https://osquery.readthedocs.org/en/latest/introduction/using-osqueryi/) shell\n* executed via a [scheduler](https://osquery.readthedocs.org/en/latest/introduction/using-osqueryd/)\n  to monitor operating system state across a set of hosts\n* launched from custom applications using osquery Thrift APIs\n\n## Download & Install\n\nTo download the latest stable builds and for repository information and installation instructions\nvisit [https://osquery.io/downloads](https://osquery.io/downloads/).\n\n## Build from source\n\nBuilding osquery from source is encouraged! Check out our [build guide](https://osquery.readthedocs.io/en/latest/development/building/). Also check out our [contributing guide](CONTRIBUTING.md) and join the community on [Slack](https://slack.osquery.io).\n\n## License\n\nBy contributing to osquery you agree that your contributions will be licensed as defined on the\nLICENSE file.\n\n## Vulnerabilities\n\nWe keep track of security announcements in our tagged version release notes on GitHub. We aggregate\nthese into [SECURITY.md](SECURITY.md) too.\n\nFacebook has a [bug bounty](https://www.facebook.com/whitehat/) program that includes osquery. If\nyou find a security vulnerability in osquery, please submit it via the process outlined on that page\nand **do not file a public issue**. For more information on finding vulnerabilities in osquery, see\nour blog post [Bug Hunting\nosquery](https://www.facebook.com/notes/facebook-bug-bounty/bug-hunting-osquery/954850014529225).\n\n## Learn more\n\nIf you\'re interested in learning more about osquery read the [launch blog\npost](https://code.facebook.com/posts/844436395567983/introducing-osquery/) for background on the\nproject, visit the [users guide](https://osquery.readthedocs.org/).\n\nDevelopment and usage discussion is happening in the osquery Slack, grab an invite automatically\n[here](https://slack.osquery.io)!\n'