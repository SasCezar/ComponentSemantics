b'# Telegraf [![Circle CI](https://circleci.com/gh/influxdata/telegraf.svg?style=svg)](https://circleci.com/gh/influxdata/telegraf) [![Docker pulls](https://img.shields.io/docker/pulls/library/telegraf.svg)](https://hub.docker.com/_/telegraf/)\n\nTelegraf is an agent for collecting, processing, aggregating, and writing metrics.\n\nDesign goals are to have a minimal memory footprint with a plugin system so\nthat developers in the community can easily add support for collecting\nmetrics.\n\nTelegraf is plugin-driven and has the concept of 4 distinct plugin types:\n\n1. [Input Plugins](#input-plugins) collect metrics from the system, services, or 3rd party APIs\n2. [Processor Plugins](#processor-plugins) transform, decorate, and/or filter metrics\n3. [Aggregator Plugins](#aggregator-plugins) create aggregate metrics (e.g. mean, min, max, quantiles, etc.)\n4. [Output Plugins](#output-plugins) write metrics to various destinations\n\nNew plugins are designed to be easy to contribute, pull requests are welcomed\nand we work to incorporate as many pull requests as possible.\n\n## Try in Browser :rocket:\n\nYou can try Telegraf right in your browser in the [Telegraf playground](https://rootnroll.com/d/telegraf/).\n\n## Contributing\n\nThere are many ways to contribute:\n- Fix and [report bugs](https://github.com/influxdata/telegraf/issues/new)\n- [Improve documentation](https://github.com/influxdata/telegraf/issues?q=is%3Aopen+label%3Adocumentation)\n- [Review code and feature proposals](https://github.com/influxdata/telegraf/pulls)\n- Answer questions and discuss here on github and on the [Community Site](https://community.influxdata.com/)\n- [Contribute plugins](CONTRIBUTING.md)\n\n## Installation:\n\nYou can download the binaries directly from the [downloads](https://www.influxdata.com/downloads) page\nor from the [releases](https://github.com/influxdata/telegraf/releases) section.\n\n### Ansible Role:\n\nAnsible role: https://github.com/rossmcdonald/telegraf\n\n### From Source:\n\nTelegraf requires golang version 1.12 or newer, the Makefile requires GNU make.\n\n1. [Install Go](https://golang.org/doc/install) >=1.12 (1.13 recommended)\n2. [Install dep](https://golang.github.io/dep/docs/installation.html) ==v0.5.0\n3. Download Telegraf source:\n   ```\n   go get -d github.com/influxdata/telegraf\n   ```\n4. Run make from the source directory\n   ```\n   cd "$HOME/go/src/github.com/influxdata/telegraf"\n   make\n   ```\n\n### Changelog\n\nView the [changelog](/CHANGELOG.md) for the latest updates and changes by\nversion.\n\n### Nightly Builds\n\nThese builds are generated from the master branch:\n- [telegraf-nightly_darwin_amd64.tar.gz](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly_darwin_amd64.tar.gz)\n- [telegraf_nightly_amd64.deb](https://dl.influxdata.com/telegraf/nightlies/telegraf_nightly_amd64.deb)\n- [telegraf_nightly_arm64.deb](https://dl.influxdata.com/telegraf/nightlies/telegraf_nightly_arm64.deb)\n- [telegraf-nightly.arm64.rpm](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly.arm64.rpm)\n- [telegraf_nightly_armel.deb](https://dl.influxdata.com/telegraf/nightlies/telegraf_nightly_armel.deb)\n- [telegraf-nightly.armel.rpm](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly.armel.rpm)\n- [telegraf_nightly_armhf.deb](https://dl.influxdata.com/telegraf/nightlies/telegraf_nightly_armhf.deb)\n- [telegraf-nightly.armv6hl.rpm](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly.armv6hl.rpm)\n- [telegraf-nightly_freebsd_amd64.tar.gz](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly_freebsd_amd64.tar.gz)\n- [telegraf-nightly_freebsd_i386.tar.gz](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly_freebsd_i386.tar.gz)\n- [telegraf_nightly_i386.deb](https://dl.influxdata.com/telegraf/nightlies/telegraf_nightly_i386.deb)\n- [telegraf-nightly.i386.rpm](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly.i386.rpm)\n- [telegraf-nightly_linux_amd64.tar.gz](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly_linux_amd64.tar.gz)\n- [telegraf-nightly_linux_arm64.tar.gz](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly_linux_arm64.tar.gz)\n- [telegraf-nightly_linux_armel.tar.gz](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly_linux_armel.tar.gz)\n- [telegraf-nightly_linux_armhf.tar.gz](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly_linux_armhf.tar.gz)\n- [telegraf-nightly_linux_i386.tar.gz](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly_linux_i386.tar.gz)\n- [telegraf-nightly_linux_s390x.tar.gz](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly_linux_s390x.tar.gz)\n- [telegraf_nightly_s390x.deb](https://dl.influxdata.com/telegraf/nightlies/telegraf_nightly_s390x.deb)\n- [telegraf-nightly.s390x.rpm](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly.s390x.rpm)\n- [telegraf-nightly_windows_amd64.zip](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly_windows_amd64.zip)\n- [telegraf-nightly_windows_i386.zip](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly_windows_i386.zip)\n- [telegraf-nightly.x86_64.rpm](https://dl.influxdata.com/telegraf/nightlies/telegraf-nightly.x86_64.rpm)\n- [telegraf-static-nightly_linux_amd64.tar.gz](https://dl.influxdata.com/telegraf/nightlies/telegraf-static-nightly_linux_amd64.tar.gz)\n\n## How to use it:\n\nSee usage with:\n\n```\ntelegraf --help\n```\n\n#### Generate a telegraf config file:\n\n```\ntelegraf config > telegraf.conf\n```\n\n#### Generate config with only cpu input & influxdb output plugins defined:\n\n```\ntelegraf --input-filter cpu --output-filter influxdb config\n```\n\n#### Run a single telegraf collection, outputing metrics to stdout:\n\n```\ntelegraf --config telegraf.conf --test\n```\n\n#### Run telegraf with all plugins defined in config file:\n\n```\ntelegraf --config telegraf.conf\n```\n\n#### Run telegraf, enabling the cpu & memory input, and influxdb output plugins:\n\n```\ntelegraf --config telegraf.conf --input-filter cpu:mem --output-filter influxdb\n```\n\n## Documentation\n\n[Latest Release Documentation][release docs].\n\nFor documentation on the latest development code see the [documentation index][devel docs].\n\n[release docs]: https://docs.influxdata.com/telegraf\n[devel docs]: docs\n\n## Input Plugins\n\n* [activemq](./plugins/inputs/activemq)\n* [aerospike](./plugins/inputs/aerospike)\n* [amqp_consumer](./plugins/inputs/amqp_consumer) (rabbitmq)\n* [apache](./plugins/inputs/apache)\n* [apcupsd](./plugins/inputs/apcupsd)\n* [aurora](./plugins/inputs/aurora)\n* [aws cloudwatch](./plugins/inputs/cloudwatch)\n* [azure_storage_queue](./plugins/inputs/azure_storage_queue)\n* [bcache](./plugins/inputs/bcache)\n* [beanstalkd](./plugins/inputs/beanstalkd)\n* [bind](./plugins/inputs/bind)\n* [bond](./plugins/inputs/bond)\n* [burrow](./plugins/inputs/burrow)\n* [cassandra](./plugins/inputs/cassandra) (deprecated, use [jolokia2](./plugins/inputs/jolokia2))\n* [ceph](./plugins/inputs/ceph)\n* [cgroup](./plugins/inputs/cgroup)\n* [chrony](./plugins/inputs/chrony)\n* [cisco_telemetry_gnmi](./plugins/inputs/cisco_telemetry_gnmi)\n* [cisco_telemetry_mdt](./plugins/inputs/cisco_telemetry_mdt)\n* [cloud_pubsub](./plugins/inputs/cloud_pubsub) Google Cloud Pub/Sub\n* [cloud_pubsub_push](./plugins/inputs/cloud_pubsub_push) Google Cloud Pub/Sub push endpoint\n* [conntrack](./plugins/inputs/conntrack)\n* [consul](./plugins/inputs/consul)\n* [couchbase](./plugins/inputs/couchbase)\n* [couchdb](./plugins/inputs/couchdb)\n* [cpu](./plugins/inputs/cpu)\n* [DC/OS](./plugins/inputs/dcos)\n* [diskio](./plugins/inputs/diskio)\n* [disk](./plugins/inputs/disk)\n* [disque](./plugins/inputs/disque)\n* [dmcache](./plugins/inputs/dmcache)\n* [dns query time](./plugins/inputs/dns_query)\n* [docker](./plugins/inputs/docker)\n* [docker_log](./plugins/inputs/docker_log)\n* [dovecot](./plugins/inputs/dovecot)\n* [ecs](./plugins/inputs/ecs) (Amazon Elastic Container Service, Fargate)\n* [elasticsearch](./plugins/inputs/elasticsearch)\n* [ethtool](./plugins/inputs/ethtool)\n* [exec](./plugins/inputs/exec) (generic executable plugin, support JSON, influx, graphite and nagios)\n* [fail2ban](./plugins/inputs/fail2ban)\n* [fibaro](./plugins/inputs/fibaro)\n* [file](./plugins/inputs/file)\n* [filestat](./plugins/inputs/filestat)\n* [filecount](./plugins/inputs/filecount)\n* [fireboard](/plugins/inputs/fireboard)\n* [fluentd](./plugins/inputs/fluentd)\n* [github](./plugins/inputs/github)\n* [graylog](./plugins/inputs/graylog)\n* [haproxy](./plugins/inputs/haproxy)\n* [hddtemp](./plugins/inputs/hddtemp)\n* [httpjson](./plugins/inputs/httpjson) (generic JSON-emitting http service plugin)\n* [http_listener](./plugins/inputs/influxdb_listener) (deprecated, renamed to [influxdb_listener](/plugins/inputs/influxdb_listener))\n* [http_listener_v2](./plugins/inputs/http_listener_v2)\n* [http](./plugins/inputs/http) (generic HTTP plugin, supports using input data formats)\n* [http_response](./plugins/inputs/http_response)\n* [icinga2](./plugins/inputs/icinga2)\n* [influxdb](./plugins/inputs/influxdb)\n* [influxdb_listener](./plugins/inputs/influxdb_listener)\n* [internal](./plugins/inputs/internal)\n* [interrupts](./plugins/inputs/interrupts)\n* [ipmi_sensor](./plugins/inputs/ipmi_sensor)\n* [ipset](./plugins/inputs/ipset)\n* [iptables](./plugins/inputs/iptables)\n* [ipvs](./plugins/inputs/ipvs)\n* [jenkins](./plugins/inputs/jenkins)\n* [jolokia2](./plugins/inputs/jolokia2) (java, cassandra, kafka)\n* [jolokia](./plugins/inputs/jolokia) (deprecated, use [jolokia2](./plugins/inputs/jolokia2))\n* [jti_openconfig_telemetry](./plugins/inputs/jti_openconfig_telemetry)\n* [kafka_consumer](./plugins/inputs/kafka_consumer)\n* [kapacitor](./plugins/inputs/kapacitor)\n* [kinesis](./plugins/inputs/kinesis_consumer)\n* [kernel](./plugins/inputs/kernel)\n* [kernel_vmstat](./plugins/inputs/kernel_vmstat)\n* [kibana](./plugins/inputs/kibana)\n* [kubernetes](./plugins/inputs/kubernetes)\n* [kube_inventory](./plugins/inputs/kube_inventory)\n* [leofs](./plugins/inputs/leofs)\n* [linux_sysctl_fs](./plugins/inputs/linux_sysctl_fs)\n* [logparser](./plugins/inputs/logparser)\n* [logstash](./plugins/inputs/logstash)\n* [lustre2](./plugins/inputs/lustre2)\n* [mailchimp](./plugins/inputs/mailchimp)\n* [marklogic](./plugins/inputs/marklogic)\n* [mcrouter](./plugins/inputs/mcrouter)\n* [memcached](./plugins/inputs/memcached)\n* [mem](./plugins/inputs/mem)\n* [mesos](./plugins/inputs/mesos)\n* [minecraft](./plugins/inputs/minecraft)\n* [mongodb](./plugins/inputs/mongodb)\n* [mqtt_consumer](./plugins/inputs/mqtt_consumer)\n* [multifile](./plugins/inputs/multifile)\n* [mysql](./plugins/inputs/mysql)\n* [nats_consumer](./plugins/inputs/nats_consumer)\n* [nats](./plugins/inputs/nats)\n* [neptune_apex](./plugins/inputs/neptune_apex)\n* [net](./plugins/inputs/net)\n* [net_response](./plugins/inputs/net_response)\n* [netstat](./plugins/inputs/net)\n* [nginx](./plugins/inputs/nginx)\n* [nginx_plus_api](./plugins/inputs/nginx_plus_api)\n* [nginx_plus](./plugins/inputs/nginx_plus)\n* [nginx_upstream_check](./plugins/inputs/nginx_upstream_check)\n* [nginx_vts](./plugins/inputs/nginx_vts)\n* [nsq_consumer](./plugins/inputs/nsq_consumer)\n* [nsq](./plugins/inputs/nsq)\n* [nstat](./plugins/inputs/nstat)\n* [ntpq](./plugins/inputs/ntpq)\n* [nvidia_smi](./plugins/inputs/nvidia_smi)\n* [openldap](./plugins/inputs/openldap)\n* [openntpd](./plugins/inputs/openntpd)\n* [opensmtpd](./plugins/inputs/opensmtpd)\n* [openweathermap](./plugins/inputs/openweathermap)\n* [pf](./plugins/inputs/pf)\n* [pgbouncer](./plugins/inputs/pgbouncer)\n* [phpfpm](./plugins/inputs/phpfpm)\n* [phusion passenger](./plugins/inputs/passenger)\n* [ping](./plugins/inputs/ping)\n* [postfix](./plugins/inputs/postfix)\n* [postgresql_extensible](./plugins/inputs/postgresql_extensible)\n* [postgresql](./plugins/inputs/postgresql)\n* [powerdns](./plugins/inputs/powerdns)\n* [powerdns_recursor](./plugins/inputs/powerdns_recursor)\n* [processes](./plugins/inputs/processes)\n* [procstat](./plugins/inputs/procstat)\n* [prometheus](./plugins/inputs/prometheus) (can be used for [Caddy server](./plugins/inputs/prometheus/README.md#usage-for-caddy-http-server))\n* [puppetagent](./plugins/inputs/puppetagent)\n* [rabbitmq](./plugins/inputs/rabbitmq)\n* [raindrops](./plugins/inputs/raindrops)\n* [redis](./plugins/inputs/redis)\n* [rethinkdb](./plugins/inputs/rethinkdb)\n* [riak](./plugins/inputs/riak)\n* [salesforce](./plugins/inputs/salesforce)\n* [sensors](./plugins/inputs/sensors)\n* [smart](./plugins/inputs/smart)\n* [snmp_legacy](./plugins/inputs/snmp_legacy)\n* [snmp](./plugins/inputs/snmp)\n* [snmp_trap](./plugins/inputs/snmp_trap)\n* [socket_listener](./plugins/inputs/socket_listener)\n* [solr](./plugins/inputs/solr)\n* [sql server](./plugins/inputs/sqlserver) (microsoft)\n* [stackdriver](./plugins/inputs/stackdriver)\n* [statsd](./plugins/inputs/statsd)\n* [suricata](./plugins/inputs/suricata)\n* [swap](./plugins/inputs/swap)\n* [synproxy](./plugins/inputs/synproxy)\n* [syslog](./plugins/inputs/syslog)\n* [sysstat](./plugins/inputs/sysstat)\n* [system](./plugins/inputs/system)\n* [tail](./plugins/inputs/tail)\n* [temp](./plugins/inputs/temp)\n* [tcp_listener](./plugins/inputs/socket_listener)\n* [teamspeak](./plugins/inputs/teamspeak)\n* [tengine](./plugins/inputs/tengine)\n* [tomcat](./plugins/inputs/tomcat)\n* [twemproxy](./plugins/inputs/twemproxy)\n* [udp_listener](./plugins/inputs/socket_listener)\n* [unbound](./plugins/inputs/unbound)\n* [uswgi](./plugins/inputs/uswgi)\n* [varnish](./plugins/inputs/varnish)\n* [vsphere](./plugins/inputs/vsphere) VMware vSphere\n* [webhooks](./plugins/inputs/webhooks)\n  * [filestack](./plugins/inputs/webhooks/filestack)\n  * [github](./plugins/inputs/webhooks/github)\n  * [mandrill](./plugins/inputs/webhooks/mandrill)\n  * [papertrail](./plugins/inputs/webhooks/papertrail)\n  * [particle](./plugins/inputs/webhooks/particle)\n  * [rollbar](./plugins/inputs/webhooks/rollbar)\n* [win_perf_counters](./plugins/inputs/win_perf_counters) (windows performance counters)\n* [win_services](./plugins/inputs/win_services)\n* [wireless](./plugins/inputs/wireless)\n* [x509_cert](./plugins/inputs/x509_cert)\n* [zfs](./plugins/inputs/zfs)\n* [zipkin](./plugins/inputs/zipkin)\n* [zookeeper](./plugins/inputs/zookeeper)\n\n## Parsers\n\n- [InfluxDB Line Protocol](/plugins/parsers/influx)\n- [Collectd](/plugins/parsers/collectd)\n- [CSV](/plugins/parsers/csv)\n- [Dropwizard](/plugins/parsers/dropwizard)\n- [FormUrlencoded](/plugins/parser/form_urlencoded)\n- [Graphite](/plugins/parsers/graphite)\n- [Grok](/plugins/parsers/grok)\n- [JSON](/plugins/parsers/json)\n- [Logfmt](/plugins/parsers/logfmt)\n- [Nagios](/plugins/parsers/nagios)\n- [Value](/plugins/parsers/value), ie: 45 or "booyah"\n- [Wavefront](/plugins/parsers/wavefront)\n\n## Serializers\n\n- [InfluxDB Line Protocol](/plugins/serializers/influx)\n- [JSON](/plugins/serializers/json)\n- [Graphite](/plugins/serializers/graphite)\n- [ServiceNow](/plugins/serializers/nowmetric)\n- [SplunkMetric](/plugins/serializers/splunkmetric)\n- [Carbon2](/plugins/serializers/carbon2)\n- [Wavefront](/plugins/serializers/wavefront)\n\n## Processor Plugins\n\n* [clone](./plugins/processors/clone)\n* [converter](./plugins/processors/converter)\n* [date](./plugins/processors/date)\n* [enum](./plugins/processors/enum)\n* [override](./plugins/processors/override)\n* [parser](./plugins/processors/parser)\n* [pivot](./plugins/processors/pivot)\n* [printer](./plugins/processors/printer)\n* [regex](./plugins/processors/regex)\n* [rename](./plugins/processors/rename)\n* [strings](./plugins/processors/strings)\n* [tag_limit](./plugins/processors/tag_limit)\n* [topk](./plugins/processors/topk)\n* [unpivot](./plugins/processors/unpivot)\n\n## Aggregator Plugins\n\n* [basicstats](./plugins/aggregators/basicstats)\n* [final](./plugins/aggregators/final)\n* [histogram](./plugins/aggregators/histogram)\n* [merge](./plugins/aggregators/merge)\n* [minmax](./plugins/aggregators/minmax)\n* [valuecounter](./plugins/aggregators/valuecounter)\n\n## Output Plugins\n\n* [influxdb](./plugins/outputs/influxdb) (InfluxDB 1.x)\n* [influxdb_v2](./plugins/outputs/influxdb_v2) ([InfluxDB 2.x](https://github.com/influxdata/influxdb))\n* [amon](./plugins/outputs/amon)\n* [amqp](./plugins/outputs/amqp) (rabbitmq)\n* [application_insights](./plugins/outputs/application_insights)\n* [aws kinesis](./plugins/outputs/kinesis)\n* [aws cloudwatch](./plugins/outputs/cloudwatch)\n* [azure_monitor](./plugins/outputs/azure_monitor)\n* [cloud_pubsub](./plugins/outputs/cloud_pubsub) Google Cloud Pub/Sub\n* [cratedb](./plugins/outputs/cratedb)\n* [datadog](./plugins/outputs/datadog)\n* [discard](./plugins/outputs/discard)\n* [elasticsearch](./plugins/outputs/elasticsearch)\n* [exec](./plugins/outputs/exec)\n* [file](./plugins/outputs/file)\n* [graphite](./plugins/outputs/graphite)\n* [graylog](./plugins/outputs/graylog)\n* [health](./plugins/outputs/health)\n* [http](./plugins/outputs/http)\n* [instrumental](./plugins/outputs/instrumental)\n* [kafka](./plugins/outputs/kafka)\n* [librato](./plugins/outputs/librato)\n* [mqtt](./plugins/outputs/mqtt)\n* [nats](./plugins/outputs/nats)\n* [nsq](./plugins/outputs/nsq)\n* [opentsdb](./plugins/outputs/opentsdb)\n* [prometheus](./plugins/outputs/prometheus_client)\n* [riemann](./plugins/outputs/riemann)\n* [riemann_legacy](./plugins/outputs/riemann_legacy)\n* [socket_writer](./plugins/outputs/socket_writer)\n* [stackdriver](./plugins/outputs/stackdriver)\n* [syslog](./plugins/outputs/syslog)\n* [tcp](./plugins/outputs/socket_writer)\n* [udp](./plugins/outputs/socket_writer)\n* [wavefront](./plugins/outputs/wavefront)\n'