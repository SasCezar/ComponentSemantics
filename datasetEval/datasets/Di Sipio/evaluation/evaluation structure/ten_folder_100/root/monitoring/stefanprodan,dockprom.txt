b'dockprom\n========\n\nA monitoring solution for Docker hosts and containers with [Prometheus](https://prometheus.io/), [Grafana](http://grafana.org/), [cAdvisor](https://github.com/google/cadvisor),\n[NodeExporter](https://github.com/prometheus/node_exporter) and alerting with [AlertManager](https://github.com/prometheus/alertmanager).\n\n***If you\'re looking for the Docker Swarm version please go to [stefanprodan/swarmprom](https://github.com/stefanprodan/swarmprom)***\n\n## Install\n\nClone this repository on your Docker host, cd into dockprom directory and run compose up:\n\n```bash\ngit clone https://github.com/stefanprodan/dockprom\ncd dockprom\n\nADMIN_USER=admin ADMIN_PASSWORD=admin docker-compose up -d\n```\n\nPrerequisites:\n\n* Docker Engine >= 1.13\n* Docker Compose >= 1.11\n\nContainers:\n\n* Prometheus (metrics database) `http://<host-ip>:9090`\n* Prometheus-Pushgateway (push acceptor for ephemeral and batch jobs) `http://<host-ip>:9091`\n* AlertManager (alerts management) `http://<host-ip>:9093`\n* Grafana (visualize metrics) `http://<host-ip>:3000`\n* NodeExporter (host metrics collector)\n* cAdvisor (containers metrics collector)\n* Caddy (reverse proxy and basic auth provider for prometheus and alertmanager)\n\n## Setup Grafana\n\nNavigate to `http://<host-ip>:3000` and login with user ***admin*** password ***admin***. You can change the credentials in the compose file or by supplying the `ADMIN_USER` and `ADMIN_PASSWORD` environment variables on compose up. The config file can be added directly in grafana part like this\n```\ngrafana:\n  image: grafana/grafana:5.2.4\n  env_file:\n    - config\n\n```\nand the config file format should have this content\n```\nGF_SECURITY_ADMIN_USER=admin\nGF_SECURITY_ADMIN_PASSWORD=changeme\nGF_USERS_ALLOW_SIGN_UP=false\n```\nIf you want to change the password, you have to remove this entry, otherwise the change will not take effect\n```\n- grafana_data:/var/lib/grafana\n```\n\nGrafana is preconfigured with dashboards and Prometheus as the default data source:\n\n* Name: Prometheus\n* Type: Prometheus\n* Url: http://prometheus:9090\n* Access: proxy\n\n***Docker Host Dashboard***\n\n![Host](https://raw.githubusercontent.com/stefanprodan/dockprom/master/screens/Grafana_Docker_Host.png)\n\nThe Docker Host Dashboard shows key metrics for monitoring the resource usage of your server:\n\n* Server uptime, CPU idle percent, number of CPU cores, available memory, swap and storage\n* System load average graph, running and blocked by IO processes graph, interrupts graph\n* CPU usage graph by mode (guest, idle, iowait, irq, nice, softirq, steal, system, user)\n* Memory usage graph by distribution (used, free, buffers, cached)\n* IO usage graph (read Bps, read Bps and IO time)\n* Network usage graph by device (inbound Bps, Outbound Bps)\n* Swap usage and activity graphs\n\nFor storage and particularly Free Storage graph, you have to specify the fstype in grafana graph request.\nYou can find it in `grafana/dashboards/docker_host.json`, at line 480 :\n\n      "expr": "sum(node_filesystem_free_bytes{fstype=\\"btrfs\\"})",\n\nI work on BTRFS, so i need to change `aufs` to `btrfs`.\n\nYou can find right value for your system in Prometheus `http://<host-ip>:9090` launching this request :\n\n      node_filesystem_free_bytes\n\n***Docker Containers Dashboard***\n\n![Containers](https://raw.githubusercontent.com/stefanprodan/dockprom/master/screens/Grafana_Docker_Containers.png)\n\nThe Docker Containers Dashboard shows key metrics for monitoring running containers:\n\n* Total containers CPU load, memory and storage usage\n* Running containers graph, system load graph, IO usage graph\n* Container CPU usage graph\n* Container memory usage graph\n* Container cached memory usage graph\n* Container network inbound usage graph\n* Container network outbound usage graph\n\nNote that this dashboard doesn\'t show the containers that are part of the monitoring stack.\n\n***Monitor Services Dashboard***\n\n![Monitor Services](https://raw.githubusercontent.com/stefanprodan/dockprom/master/screens/Grafana_Prometheus.png)\n\nThe Monitor Services Dashboard shows key metrics for monitoring the containers that make up the monitoring stack:\n\n* Prometheus container uptime, monitoring stack total memory usage, Prometheus local storage memory chunks and series\n* Container CPU usage graph\n* Container memory usage graph\n* Prometheus chunks to persist and persistence urgency graphs\n* Prometheus chunks ops and checkpoint duration graphs\n* Prometheus samples ingested rate, target scrapes and scrape duration graphs\n* Prometheus HTTP requests graph\n* Prometheus alerts graph\n\n## Define alerts\n\nThree alert groups have been setup within the [alert.rules](https://github.com/stefanprodan/dockprom/blob/master/prometheus/alert.rules) configuration file:\n\n* Monitoring services alerts [targets](https://github.com/stefanprodan/dockprom/blob/master/prometheus/alert.rules#L2-L11)\n* Docker Host alerts [host](https://github.com/stefanprodan/dockprom/blob/master/prometheus/alert.rules#L13-L40)\n* Docker Containers alerts [containers](https://github.com/stefanprodan/dockprom/blob/master/prometheus/alert.rules#L42-L69)\n\nYou can modify the alert rules and reload them by making a HTTP POST call to Prometheus:\n\n```\ncurl -X POST http://admin:admin@<host-ip>:9090/-/reload\n```\n\n***Monitoring services alerts***\n\nTrigger an alert if any of the monitoring targets (node-exporter and cAdvisor) are down for more than 30 seconds:\n\n```yaml\n- alert: monitor_service_down\n    expr: up == 0\n    for: 30s\n    labels:\n      severity: critical\n    annotations:\n      summary: "Monitor service non-operational"\n      description: "Service {{ $labels.instance }} is down."\n```\n\n***Docker Host alerts***\n\nTrigger an alert if the Docker host CPU is under high load for more than 30 seconds:\n\n```yaml\n- alert: high_cpu_load\n    expr: node_load1 > 1.5\n    for: 30s\n    labels:\n      severity: warning\n    annotations:\n      summary: "Server under high load"\n      description: "Docker host is under high load, the avg load 1m is at {{ $value}}. Reported by instance {{ $labels.instance }} of job {{ $labels.job }}."\n```\n\nModify the load threshold based on your CPU cores.\n\nTrigger an alert if the Docker host memory is almost full:\n\n```yaml\n- alert: high_memory_load\n    expr: (sum(node_memory_MemTotal_bytes) - sum(node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes) ) / sum(node_memory_MemTotal_bytes) * 100 > 85\n    for: 30s\n    labels:\n      severity: warning\n    annotations:\n      summary: "Server memory is almost full"\n      description: "Docker host memory usage is {{ humanize $value}}%. Reported by instance {{ $labels.instance }} of job {{ $labels.job }}."\n```\n\nTrigger an alert if the Docker host storage is almost full:\n\n```yaml\n- alert: high_storage_load\n    expr: (node_filesystem_size_bytes{fstype="aufs"} - node_filesystem_free_bytes{fstype="aufs"}) / node_filesystem_size_bytes{fstype="aufs"}  * 100 > 85\n    for: 30s\n    labels:\n      severity: warning\n    annotations:\n      summary: "Server storage is almost full"\n      description: "Docker host storage usage is {{ humanize $value}}%. Reported by instance {{ $labels.instance }} of job {{ $labels.job }}."\n```\n\n***Docker Containers alerts***\n\nTrigger an alert if a container is down for more than 30 seconds:\n\n```yaml\n- alert: jenkins_down\n    expr: absent(container_memory_usage_bytes{name="jenkins"})\n    for: 30s\n    labels:\n      severity: critical\n    annotations:\n      summary: "Jenkins down"\n      description: "Jenkins container is down for more than 30 seconds."\n```\n\nTrigger an alert if a container is using more than 10% of total CPU cores for more than 30 seconds:\n\n```yaml\n- alert: jenkins_high_cpu\n    expr: sum(rate(container_cpu_usage_seconds_total{name="jenkins"}[1m])) / count(node_cpu_seconds_total{mode="system"}) * 100 > 10\n    for: 30s\n    labels:\n      severity: warning\n    annotations:\n      summary: "Jenkins high CPU usage"\n      description: "Jenkins CPU usage is {{ humanize $value}}%."\n```\n\nTrigger an alert if a container is using more than 1.2GB of RAM for more than 30 seconds:\n\n```yaml\n- alert: jenkins_high_memory\n    expr: sum(container_memory_usage_bytes{name="jenkins"}) > 1200000000\n    for: 30s\n    labels:\n      severity: warning\n    annotations:\n      summary: "Jenkins high memory usage"\n      description: "Jenkins memory consumption is at {{ humanize $value}}."\n```\n\n## Setup alerting\n\nThe AlertManager service is responsible for handling alerts sent by Prometheus server.\nAlertManager can send notifications via email, Pushover, Slack, HipChat or any other system that exposes a webhook interface.\nA complete list of integrations can be found [here](https://prometheus.io/docs/alerting/configuration).\n\nYou can view and silence notifications by accessing `http://<host-ip>:9093`.\n\nThe notification receivers can be configured in [alertmanager/config.yml](https://github.com/stefanprodan/dockprom/blob/master/alertmanager/config.yml) file.\n\nTo receive alerts via Slack you need to make a custom integration by choose ***incoming web hooks*** in your Slack team app page.\nYou can find more details on setting up Slack integration [here](http://www.robustperception.io/using-slack-with-the-alertmanager/).\n\nCopy the Slack Webhook URL into the ***api_url*** field and specify a Slack ***channel***.\n\n```yaml\nroute:\n    receiver: \'slack\'\n\nreceivers:\n    - name: \'slack\'\n      slack_configs:\n          - send_resolved: true\n            text: "{{ .CommonAnnotations.description }}"\n            username: \'Prometheus\'\n            channel: \'#<channel>\'\n            api_url: \'https://hooks.slack.com/services/<webhook-id>\'\n```\n\n![Slack Notifications](https://raw.githubusercontent.com/stefanprodan/dockprom/master/screens/Slack_Notifications.png)\n\n## Sending metrics to the Pushgateway\n\nThe [pushgateway](https://github.com/prometheus/pushgateway) is used to collect data from batch jobs or from services.\n\nTo push data, simply execute:\n\n    echo "some_metric 3.14" | curl --data-binary @- http://user:password@localhost:9091/metrics/job/some_job\n\nPlease replace the `user:password` part with your user and password set in the initial configuration (default: `admin:admin`).\n\n## Updating Grafana to v5.2.2\n\n[In Grafana versions >= 5.1 the id of the grafana user has been changed](http://docs.grafana.org/installation/docker/#migration-from-a-previous-version-of-the-docker-container-to-5-1-or-later). Unfortunately this means that files created prior to 5.1 won\xe2\x80\x99t have the correct permissions for later versions.\n\n| Version |   User  | User ID |\n|:-------:|:-------:|:-------:|\n|  < 5.1  | grafana |   104   |\n|  \\>= 5.1 | grafana |   472   |\n\nThere are two possible solutions to this problem.\n- Change ownership from 104 to 472\n- Start the upgraded container as user 104\n\n##### Specifying a user in docker-compose.yml\n\nTo change ownership of the files run your grafana container as root and modify the permissions.\n\nFirst perform a `docker-compose down` then modify your docker-compose.yml to include the `user: root` option:\n\n```\n  grafana:\n    image: grafana/grafana:5.2.2\n    container_name: grafana\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./grafana/datasources:/etc/grafana/datasources\n      - ./grafana/dashboards:/etc/grafana/dashboards\n      - ./grafana/setup.sh:/setup.sh\n    entrypoint: /setup.sh\n    user: root\n    environment:\n      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}\n      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}\n      - GF_USERS_ALLOW_SIGN_UP=false\n    restart: unless-stopped\n    expose:\n      - 3000\n    networks:\n      - monitor-net\n    labels:\n      org.label-schema.group: "monitoring"\n```\n\nPerform a `docker-compose up -d` and then issue the following commands:\n\n```\ndocker exec -it --user root grafana bash\n\n# in the container you just started:\nchown -R root:root /etc/grafana && \\\nchmod -R a+r /etc/grafana && \\\nchown -R grafana:grafana /var/lib/grafana && \\\nchown -R grafana:grafana /usr/share/grafana\n```\n\nTo run the grafana container as `user: 104` change your `docker-compose.yml` like such:\n\n```\n  grafana:\n    image: grafana/grafana:5.2.2\n    container_name: grafana\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./grafana/datasources:/etc/grafana/datasources\n      - ./grafana/dashboards:/etc/grafana/dashboards\n      - ./grafana/setup.sh:/setup.sh\n    entrypoint: /setup.sh\n    user: "104"\n    environment:\n      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}\n      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}\n      - GF_USERS_ALLOW_SIGN_UP=false\n    restart: unless-stopped\n    expose:\n      - 3000\n    networks:\n      - monitor-net\n    labels:\n      org.label-schema.group: "monitoring"\n```\n'