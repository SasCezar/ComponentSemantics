b"React Swipeable\n=========================\n\nReact swipe event handler component & hook\n\n[![build status](https://img.shields.io/travis/dogfessional/react-swipeable/master.svg?style=flat-square)](https://travis-ci.org/dogfessional/react-swipeable) [![Coverage Status](https://img.shields.io/coveralls/dogfessional/react-swipeable/master.svg?style=flat-square)](https://coveralls.io/github/dogfessional/react-swipeable?branch=master) [![npm version](https://img.shields.io/npm/v/react-swipeable.svg?style=flat-square)](https://www.npmjs.com/package/react-swipeable) [![npm downloads](https://img.shields.io/npm/dm/react-swipeable.svg?style=flat-square)](https://www.npmjs.com/package/react-swipeable) [![gzip size](https://flat.badgen.net/bundlephobia/minzip/react-swipeable)](https://bundlephobia.com/result?p=react-swipeable)\n\n[![Edit react-swipeable image carousel with hook](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/lrk6955l79?module=%2Fsrc%2FCarousel.js)\n\n[Github Pages Demo](https://dogfessional.github.io/react-swipeable/)\n\n### Api\nUse React-hooks or a Component and set your swipe(d) handlers.\n```js\nimport { useSwipeable, Swipeable } from 'react-swipeable'\n```\n\n#### Hook\n```jsx\nconst handlers = useSwipeable({ onSwiped: (eventData) => eventHandler, ...config })\nreturn (<div {...handlers}> You can swipe here </div>)\n```\nSpread `handlers` onto the element you wish to track swipes inside of. [Details below](#hook-details).\n\n#### Component\n```jsx\n<Swipeable onSwiped={(eventData) => eventHandler} {...config} >\n  You can swipe here!\n</Swipeable>\n```\n\nThe Component `<Swipeable>` uses a `<div>` by default under the hood to attach event handlers to.\n\n## Props / Config Options\n\n### Event Handler Props\n\n```\n{\n  onSwiped,          // Fired after any swipe\n  onSwipedLeft,      // Fired after LEFT swipe\n  onSwipedRight,     // Fired after RIGHT swipe\n  onSwipedUp,        // Fired after UP swipe\n  onSwipedDown,      // Fired after DOWN swipe\n  onSwiping,         // Fired during any swipe\n}\n```\n\n### Event data\nAll Event Handlers are called with the below event data.\n```\n{\n  event,          // source event\n  initial,        // initial swipe [x,y]\n  deltaX,         // x offset (initial.x - current.x)\n  deltaY,         // y offset (initial.y - current.y)\n  absX,           // absolute deltaX\n  absY,           // absolute deltaY\n  velocity,       // \xe2\x88\x9a(absX^2 + absY^2) / time\n  dir,            // direction of swipe (Left|Right|Up|Down)\n}\n```\n\n### Configuration Props\n\n```\n{\n  delta: 10,                             // min distance(px) before a swipe starts\n  preventDefaultTouchmoveEvent: false,   // preventDefault on touchmove, *See Details*\n  trackTouch: true,                      // track touch input\n  trackMouse: false,                     // track mouse input\n  rotationAngle: 0,                      // set a rotation angle\n}\n```\n\n### Component Specific Props\n\n```\n{\n  nodeName: 'div',    // internally rendered component dom node\n  innerRef            // callback ref for internal component dom node\n}\n```\n\n**None of the props/config options are required.**\n\n### Hook details\n- Hook use requires **react >= 16.8.0**\n- The props contained in `handlers` are currently `ref` and `onMouseDown`\n  - Please spread `handlers` as the props contained in it could change as react improves event listening capabilities\n    - See [#127](https://github.com/dogfessional/react-swipeable/issues/127) for some more context\n\n### preventDefaultTouchmoveEvent Details\n\n**`preventDefaultTouchmoveEvent`** prevents the browser's [touchmove](https://developer.mozilla.org/en-US/docs/Web/Events/touchmove) event. Use this to stop the browser from scrolling while a user swipes.\n* `e.preventDefault()` is only called when:\n  * `preventDefaultTouchmoveEvent: true`\n  * `trackTouch: true`\n  * the users current swipe has an associated `onSwiping` or `onSwiped` handler/prop\n\nExample:\n   * If a user is swiping right with `<Swipable onSwipedRight={this.userSwipedRight} preventDefaultTouchmoveEvent={true} >` then `e.preventDefault()` will be called, but if the user was swiping left then `e.preventDefault()` would **not** be called.\n\nPlease experiment with the [example](http://dogfessional.github.io/react-swipeable/) to test `preventDefaultTouchmoveEvent`.\n\n\n### Version 5 Updates\n[React hooks](https://reactjs.org/docs/hooks-reference.html) have been released with [16.8.0](https://reactjs.org/blog/2019/02/06/react-v16.8.0.html) \xf0\x9f\x8e\x89\n\nv5 of `react-swipeable` includes a hook, `useSwipeable`, that provides the same great functionality as `<Swipeable>`. See the `useSwipeable` hook in action with this [codesandbox](https://codesandbox.io/s/lrk6955l79?module=%2Fsrc%2FCarousel.js).\n\nThe component is still included and migration to v5 is straightforward. Please see the [migration doc](./migration.md) for more details including more info on the simplified api.\n\n## Development\n\nInitial set up, with `node 10+`, run `npm install`.\n\nMake changes/updates to the `src/index.js` file.\n\n***Please add tests if PR adds/changes functionality.***\n\n#### Verify updates with the examples\n\nBuild, run, and test examples locally:\n`npm run start:examples`\n\nAfter the server starts you can then view the examples page with your changes at `http://localhost:3000`.\n\nYou can now make updates/changes to `src/index.js` and webpack will rebuild, then reload the page so you can test your changes!\n\n## License\n\nMIT\n"