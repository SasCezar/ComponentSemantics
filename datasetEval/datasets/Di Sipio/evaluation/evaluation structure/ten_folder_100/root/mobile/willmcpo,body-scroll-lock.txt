b'<p align="left"> <img width="675" src="https://raw.githubusercontent.com/willmcpo/body-scroll-lock/master/images/logo.png" alt="Body scroll lock...just works with everything ;-)" /> </p>\n\n## Why BSL?\nEnables body scroll locking (for iOS Mobile and Tablet, Android, desktop Safari/Chrome/Firefox) without breaking scrolling of a target element (eg. modal/lightbox/flyouts/nav-menus).\n\n*Features:*\n\n- disables body scroll WITHOUT disabling scroll of a target element\n- works on iOS mobile/tablet (!!)\n- works on Android\n- works on Safari desktop\n- works on Chrome/Firefox \n- works with vanilla JS and frameworks such as React / Angular / VueJS\n- supports nested target elements (eg. a modal that appears on top of a flyout)\n- can reserve scrollbar width\n- `-webkit-overflow-scrolling: touch` still works\n\n*Aren\'t the alternative approaches sufficient?*\n\n- the approach `document.body.ontouchmove = (e) => { e.preventDefault(); return false; };` locks the\nbody scroll, but ALSO locks the scroll of a target element (eg. modal).\n- the approach `overflow: hidden` on the body or html elements doesn\'t work for all browsers\n- the `position: fixed` approach causes the body scroll to reset\n- some approaches break inertia/momentum/rubber-band scrolling on iOS\n\n*Package Size:*\n\n- LIGHT - package is only 2.8KB and 1.1KB when gzipped (see [here](https://bundlephobia.com/result?p=body-scroll-lock))!\n\n## Install\n\n    $ yarn add body-scroll-lock\n    \n    or\n    \n    $ npm install body-scroll-lock\n    \n    \n    \nYou can also load via a `<script src="lib/bodyScrollLock.js"></script>` tag (refer to the lib folder).\n\n\n## Usage examples\n\n##### Common JS\n```javascript\n// 1. Import the functions\nconst bodyScrollLock = require(\'body-scroll-lock\');\nconst disableBodyScroll = bodyScrollLock.disableBodyScroll;\nconst enableBodyScroll = bodyScrollLock.enableBodyScroll;\n  \n// 2. Get a target element that you want to persist scrolling for (such as a modal/lightbox/flyout/nav). \n// Specifically, the target element is the one we would like to allow scroll on (NOT a parent of that element).\n// This is also the element to apply the CSS \'-webkit-overflow-scrolling: touch;\' if desired.\nconst targetElement = document.querySelector("#someElementId");\n  \n  \n// 3. ...in some event handler after showing the target element...disable body scroll\ndisableBodyScroll(targetElement);\n \n \n// 4. ...in some event handler after hiding the target element...\nenableBodyScroll(targetElement);\n```\n  \n  \n##### React/ES6\n```javascript\n// 1. Import the functions\nimport { disableBodyScroll, enableBodyScroll, clearAllBodyScrollLocks } from \'body-scroll-lock\';\n  \nclass SomeComponent extends React.Component {\n  targetElement = null;\n  \n  componentDidMount() {\n    // 2. Get a target element that you want to persist scrolling for (such as a modal/lightbox/flyout/nav). \n    // Specifically, the target element is the one we would like to allow scroll on (NOT a parent of that element).\n    // This is also the element to apply the CSS \'-webkit-overflow-scrolling: touch;\' if desired.\n    this.targetElement = document.querySelector(\'#targetElementId\');\n  }\n  \n  showTargetElement = () => {\n    // ... some logic to show target element\n    \n    // 3. Disable body scroll\n    disableBodyScroll(this.targetElement);\n  };\n  \n  hideTargetElement = () => {\n    // ... some logic to hide target element\n    \n    // 4. Re-enable body scroll\n    enableBodyScroll(this.targetElement);\n  }\n  \n  componentWillUnmount() {\n    // 5. Useful if we have called disableBodyScroll for multiple target elements,\n    // and we just want a kill-switch to undo all that.\n    // OR useful for if the `hideTargetElement()` function got circumvented eg. visitor \n    // clicks a link which takes him/her to a different page within the app.\n    clearAllBodyScrollLocks();\n  }\n\n  render() {   \n    return (\n      <div>\n        some JSX to go here\n      </div> \n    );\n  }\n}\n```\n\n##### React/ES6 with Refs\n```javascript\n// 1. Import the functions\nimport { disableBodyScroll, enableBodyScroll, clearAllBodyScrollLocks } from \'body-scroll-lock\';\n  \nclass SomeComponent extends React.Component {\n  // 2. Initialise your ref and targetElement here\n  targetRef = React.createRef();\n  targetElement = null;\n\n  componentDidMount() {\n    // 3. Get a target element that you want to persist scrolling for (such as a modal/lightbox/flyout/nav). \n    // Specifically, the target element is the one we would like to allow scroll on (NOT a parent of that element).\n    // This is also the element to apply the CSS \'-webkit-overflow-scrolling: touch;\' if desired.\n    this.targetElement = this.targetRef.current; \n  }\n  \n  showTargetElement = () => {\n    // ... some logic to show target element\n    \n    // 4. Disable body scroll\n    disableBodyScroll(this.targetElement);\n  };\n  \n  hideTargetElement = () => {\n    // ... some logic to hide target element\n    \n    // 5. Re-enable body scroll\n    enableBodyScroll(this.targetElement);\n  }\n  \n  componentWillUnmount() {\n    // 5. Useful if we have called disableBodyScroll for multiple target elements,\n    // and we just want a kill-switch to undo all that.\n    // OR useful for if the `hideTargetElement()` function got circumvented eg. visitor \n    // clicks a link which takes him/her to a different page within the app.\n    clearAllBodyScrollLocks();\n  }\n\n  render() {   \n    return (\n      // 6. Pass your ref with the reference to the targetElement to SomeOtherComponent\n      <SomeOtherComponent ref={this.targetRef}>\n        some JSX to go here\n      </SomeOtherComponent> \n    );\n  }\n}\n\n// 7. SomeOtherComponent needs to be a Class component to receive the ref (unless Hooks - https://reactjs.org/docs/hooks-faq.html#can-i-make-a-ref-to-a-function-component - are used).\nclass SomeOtherComponent extends React.Component {\n\n  componentDidMount() {\n    // Your logic on mount goes here\n  }\n\n  // 8. BSL will be applied to div below in SomeOtherComponent and persist scrolling for the container\n  render() {   \n    return (\n      <div>\n        some JSX to go here\n      </div> \n    );\n  }\n}\n```\n\n##### Vanilla JS\nIn the html:\n```html\n<head>\n  <script src="some-path-where-you-dump-the-javascript-libraries/lib/bodyScrollLock.js"></script>\n</head>\n```\n\nThen in the javascript:\n\n```javascript\n// 1. Get a target element that you want to persist scrolling for (such as a modal/lightbox/flyout/nav).\n// Specifically, the target element is the one we would like to allow scroll on (NOT a parent of that element).\n// This is also the element to apply the CSS \'-webkit-overflow-scrolling: touch;\' if desired.\nconst targetElement = document.querySelector("#someElementId");\n\n// 2. ...in some event handler after showing the target element...disable body scroll\nbodyScrollLock.disableBodyScroll(targetElement);\n\n// 3. ...in some event handler after hiding the target element...\nbodyScrollLock.enableBodyScroll(targetElement);\n\n// 4. Useful if we have called disableBodyScroll for multiple target elements,\n// and we just want a kill-switch to undo all that.\nbodyScrollLock.clearAllBodyScrollLocks();\n```\n\n## Demo\nCheck out the demo, powered by Now, @ https://bodyscrolllock.now.sh\n\n## Caveat\n~~On iOS mobile (as is visible in the above demo), if you scroll the body directly even when the scrolling is \nlocked (on iOS), the body scrolls - this is not what this package solves. It solves the typical case where a modal \noverlays the screen, and scrolling within the modal never causes the body to scroll too (when the top or bottom \nwithin the modal has been reached).~~\n\nSince the update from @Neddz, this caveat is no longer valid. iOS mobile behaviour should be the same as \nother devices (eg. Android Chrome). \n\n## Functions\n\n| Function | Arguments | Return | Description |\n| :--- | :--- | :---: | :--- |\n| `disableBodyScroll` | `targetElement: HTMLElement` <br/>`options: BodyScrollOptions`| `void` | Disables body scroll while enabling scroll on target element |\n| `enableBodyScroll` | `targetElement: HTMLElement` | `void` | Enables body scroll and removing listeners on target element |\n| `clearAllBodyScrollLocks` | `null` | `void` | Clears all scroll locks |\n\n## Options\n### reserveScrollBarGap\n**optional, default:** false\n\nIf the overflow property of the body is set to hidden, the body widens by the width of the scrollbar. This produces an\nunpleasant flickering effect, especially on websites with centered content. If the `reserveScrollBarGap` option is set,\nthis gap is filled by a `padding-right` on the body element. If `disableBodyScroll` is called for the last target element,\nor `clearAllBodyScrollLocks` is called, the `padding-right` is automatically reset to the previous value.\n``` js\nimport { disableBodyScroll } from \'body-scroll-lock\';\nimport type { BodyScrollOptions } from \'body-scroll-lock\';\n\nconst options: BodyScrollOptions = {\n    reserveScrollBarGap: true\n}\n\ndisableBodyScroll(targetElement, options);\n```\n\n### allowTouchMove\n**optional, default:** undefined\n\nThere are cases where you have called `disableBodyScroll` on an element, but you still want some or all\nchildren of it to receive touch moves still; or in other words, you want child elements to\nignore the fact that a parent element has the body scroll lock set (and hence, not be affected at all by this setting).\nSee below for 2 use cases:\n\n##### Simple \n```javascript\n  disableBodyScroll(container, {\n    allowTouchMove: el => (el.tagName === \'TEXTAREA\')\n  });\n```\n\n##### More Complex\nJavascript:\n```javascript\n  disableBodyScroll(container, {\n    allowTouchMove: el => {\n      while (el && el !== document.body) {\n        if (el.getAttribute(\'body-scroll-lock-ignore\') !== null) {\n          return true\n        }\n  \n        el = el.parentNode\n      }\n    },\n  });\n```\nHtml:\n```html\n  <div id="container">\n    <div id="scrolling-map" body-scroll-lock-ignore>\n      ...\n    </div>\n  </div>\n```\n\n## References\nhttps://medium.com/jsdownunder/locking-body-scroll-for-all-devices-22def9615177\nhttps://stackoverflow.com/questions/41594997/ios-10-safari-prevent-scrolling-behind-a-fixed-overlay-and-maintain-scroll-posi\n\n## Changelog\nRefer to the [releases](https://github.com/willmcpo/body-scroll-lock/releases) page.\n'