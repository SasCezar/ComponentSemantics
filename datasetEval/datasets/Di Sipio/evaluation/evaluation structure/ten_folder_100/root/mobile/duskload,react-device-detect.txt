b'## react-device-detect\n\nDetect device, and render view according to detected device type.\n\n## Installation\n\nTo install, you can use npm or yarn:\n\n```\nnpm install react-device-detect --save\n\nor\n\nyarn add react-device-detect\n```\n\n## Usage\n\nExample:\n\n```javascript\nimport {\n  BrowserView,\n  MobileView,\n  isBrowser,\n  isMobile\n} from "react-device-detect";\n```\n\n```html\n<BrowserView>\n    <h1> This is rendered only in browser </h1>\n</BrowserView>\n<MobileView>\n    <h1> This is rendered only on mobile </h1>\n</MobileView>\n```\n\nif you don\'t need a view, you can use `isMobile` for conditional rendering\n\n```javascript\nimport {isMobile} from \'react-device-detect\';\n\nrenderContent = () => {\n    if (isMobile) {\n        return <div> This content is unavailable on mobile</div>\n    }\n    return <div> ...content </div>\n}\n\nrender() {\n    return this.renderContent();\n}\n```\n\nIf you want to leave a message to specific browser (e.g IE), you can use `isIE` selector\n\n```javascript\nimport {isIE} from \'react-device-detect\';\n\nrender() {\n    if (isIE) return <div> IE is not supported. Download Chrome/Opera/Firefox </div>\n    return (\n        <div>...content</div>\n    )\n}\n```\n\nIf you want to render a view on specific device and with specific condition:\n\n```javascript\nimport { browserName, CustomView } from \'react-device-detect\';\n\nrender() {\n    return (\n        <CustomView condition={browserName === "Chrome"}>\n            <div>...content</div>\n        </CustomView>\n    )\n}\n```\n\n## Style the view\n\nYoa can style view component by passing class to `viewClassName` prop\n\n```html\n<BrowserView viewClassName=\'custom-class\'>\n    <p> View content </p>\n</BrowserView>\n```\n\nor you can pass inline styles to `style` prop\n\n```javascript\nconst styles = {\n  background: "red",\n  fontSize: "24px",\n  lineHeight: "2"\n};\n```\n\n```html\n<BrowserView style={styles}>\n    <p> View content</p>\n</BrowserView>\n```\n\n## Selectors and views\n\n### Selectors\n\n| prop               | type     | description                                                                            |\n| ------------------ | -------- | -------------------------------------------------------------------------------------- |\n| isMobile           | bool     | returns true if device type is `mobile` or `tablet`                                    |\n| isMobileOnly       | bool     | returns true if device type is `mobile`                                                |\n| isTablet           | bool     | returns true if device type is `tablet`                                                |\n| isBrowser          | bool     | returns true if device type is `browser`                                               |\n| isSmartTV          | bool     | returns true if device type is `smarttv`                                               |\n| isWearable         | bool     | returns true if device type is `wearable`                                              |\n| isConsole          | bool     | returns true if device type is `console`                                               |\n| isAndroid          | bool     | returns true if os type is `Android`                                                   |\n| isWinPhone         | bool     | returns true if os type is `Windows Phone`                                             |\n| isIOS              | bool     | returns true if os type is `iOS`                                                       |\n| isChrome           | bool     | returns true if browser is `Chrome`                                                    |\n| isFirefox          | bool     | returns true if browser is `Firefox`                                                   |\n| isSafari           | bool     | returns true if browser is `Safari`                                                    |\n| isOpera            | bool     | returns true if browser is `Opera`                                                     |\n| isIE               | bool     | returns true if browser is `Internet Explorer`                                         |\n| isEdge             | bool     | returns true if browser is `Edge`                                                      |\n| isYandex           | bool     | returns true if browser is `Yandex`                                                    |\n| isChromium         | bool     | returns true if browser is `Chromium`                                                  |\n| isMobileSafari     | bool     | returns true if browser is `Mobile Safari`                                             |\n| osVersion          | string   | returns os version (e.g 7 for `Windows` or 6 for `Android`)                            |\n| osName             | string   | returns os name (e.g `Windows`, `Android`)                                             |\n| fullBrowserVersion | string   | returns full browser version (e.g 65.0.3325.181 for `Chrome`)                          |\n| browserVersion     | string   | returns browser `major` version (e.g 65 in `Chrome` or 9 in `IE`)                      |\n| browserName        | string   | returns browser name                                                                   |\n| mobileVendor       | string   | returns mobile device vendor (e.g `LG`, `iPhone` etc)                                  |\n| mobileModel        | string   | returns mobile device model (e.g `Nexus 5`)                                            |\n| engineName         | string   | returns browser engine `name` (e.g `Gecko` for FF or `WebKit` for Chrome)              |\n| engineVersion      | string   | returns engine version                                                                 |\n| getUA              | string   | returns user agent                                                                     |\n| deviceType         | string   | returns device type (e.g `mobile` or `tablet`)                                         |\n| deviceDetect       | function | return data object which includes all data about device (e.g version, engine, os etc.) |\n\n### Views\n\nAvailable views:\n\n- MobileView\n- BrowserView\n- TabletView\n- AndroidView\n- IOSView\n- IEView\n- WinPhoneView\n- MobileOnlyView\n- SmartTVView\n- ConsoleView\n- WearableView\n- CustomView -- has `condition` prop which takes any expression which results into boolean (e.g browserName === \'Chrome\')\n\nEach view accepts three props:\n\n1.  `viewClassName` - to style the view\n2.  `style` - to add inline styles to view\n3.  `children` - to pass children to view\n4.  `renderWithFragment` - render with `React.Fragment` instead of `<div>`\n\n### withOrientationChange\nA HOC for getting `isLandscape` and `isPortrait` props for mobile\n\n```js\nimport { withOrientationChange } from \'react-device-detect\'\n\nlet App = props => {\n  const { isLandscape, isPortrait } = props\n\n  if (isLandscape) {\n    return  <div>The device is in Landscape mode</div>\n  }\n  \n  if (isPortrait) {\n    return  <div>The device is in Portrait mode</div>\n  }\n}\n\nApp = withOrientationChange(App)\n\nexport { App }\n```\n\n## License\n\nMIT\n'