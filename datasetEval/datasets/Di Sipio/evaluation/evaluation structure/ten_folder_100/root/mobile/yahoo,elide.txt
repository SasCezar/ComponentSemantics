b'# Elide\n\n> _Opinionated APIs for web & mobile applications._\n\n![Elide Logo](elide-logo.svg)\n\n[![Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/elide)\n[![Build Status](https://travis-ci.org/yahoo/elide.svg?branch=master)](https://travis-ci.org/yahoo/elide)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.yahoo.elide/elide-core/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.yahoo.elide/elide-core)\n[![Coverage Status](https://coveralls.io/repos/github/yahoo/elide/badge.svg?branch=master)](https://coveralls.io/github/yahoo/elide?branch=master)\n[![Code Quality: Java](https://img.shields.io/lgtm/grade/java/g/yahoo/elide.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/yahoo/elide/context:java)\n[![Total Alerts](https://img.shields.io/lgtm/alerts/g/yahoo/elide.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/yahoo/elide/alerts)\n[![Mentioned in Awesome Java](https://awesome.re/mentioned-badge.svg)](https://github.com/akullpp/awesome-java)\n[![Mentioned in Awesome GraphQL](https://awesome.re/mentioned-badge.svg)](https://github.com/chentsulin/awesome-graphql)\n\n*Read this in other languages: [\xe4\xb8\xad\xe6\x96\x87](translations/zh/README.md).*\n\n## Table of Contents\n\n- [Background](#background)\n- [Documentation](#documentation)\n- [Install](#install)\n- [Usage](#usage)\n- [Security](#security)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Background\n\n[Elide](http://elide.io/) is a Java library that lets you set up a [GraphQL](http://graphql.org) or [JSON API](http://jsonapi.org) web service with minimal effort starting from\na [JPA annotated data model](https://en.wikipedia.org/wiki/Java_Persistence_API).\n\nElide supports a number of features:\n\n### Security Comes Standard\nControl access to fields and entities through a declarative, intuitive permission syntax.\n\n### Mobile Friendly APIs\nJSON-API & GraphQL lets developers fetch entire object graphs in a single round trip. Only requested elements of the data model are returned.\nOur opinionated approach for mutations addresses common application scenarios:\n* Create a new object and add it to an existing collection in the same operation.\n* Create a set of related, composite objects (a subgraph) and connect it to an existing, persisted graph.\n* Differentiate between deleting an object vs disassociating an object from a relationship (but not deleting it).\n* Change the composition of a relationship to something different.\n* Reference a newly created object inside other mutation operations.\n\nFiltering, sorting, and pagination are supported out of the box.\n\n### Atomicity For Complex Writes\nElide supports multiple data model mutations in a single request in either JSON-API or GraphQL. Create objects, add them to relationships, modify or delete together in a single atomic request.\n\n### Persistence Layer Agnostic\nElide is agnostic to your particular persistence strategy. Use an ORM or provide your own implementation of a data store.\n\n### Schema Introspection\nExplore, understand, and compose queries against your Elide API through generated Swagger documentation or GraphQL schema.\n\n### Customize\nCustomize the behavior of data model operations with computed attributes, data validation annotations, and request lifecycle hooks.\n\n## Documentation\n\nMore information about Elide can be found at [elide.io](http://elide.io/).\n\n### Tutorials\n[Create a JSON API REST Service With Spring Boot and Elide](https://dzone.com/articles/create-a-json-api-rest-service-with-spring-boot-an)\n\n[Custom Security With a Spring Boot/Elide Json API Server](https://dzone.com/articles/custom-security-with-a-spring-bootelide-json-api-s)\n\n[Logging Into a Spring Boot/Elide JSON API Server](https://dzone.com/articles/logging-into-a-spring-bootelide-json-api-server)\n\n[Securing a JSON API REST Service With Spring Boot and Elide](https://dzone.com/articles/securing-a-json-api-rest-service-with-spring-boot)\n\n[Creating Entities in a Spring Boot/Elide JSON API Server](https://dzone.com/articles/creating-entities-in-a-spring-bootelide-json-api-s)\n\n[Updating and Deleting with a Spring Boot/Elide JSON API Server](https://dzone.com/articles/updating-and-deleting-with-a-spring-bootelide-json)\n\n## Install\n\nTo try out an Elide example service (with a Postgres database), you can deploy via Heroku.\n\n[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/yahoo/elide)\n\nThe code that generates this example can be found [here](https://github.com/yahoo/elide/tree/master/elide-example/elide-blog-example)\n\nAlternatively, use [elide-standalone](https://github.com/yahoo/elide/tree/master/elide-standalone) which allows you to quickly setup a local instance\nof Elide running inside an embedded Jetty application.\n\n## Usage\n\nTo use Elide, create a set of JPA annotated data models that represent the domain model of your web service:\n\n```java\n@Entity\npublic class Book {\n\n    @Id\n    private Integer id;\n\n    private String title;\n\n    @ManyToMany(mappedBy = "books")\n    private Set<Author> authors;\n}\n```\n\nAdd Elide annotations to both expose your models through the web service and define security policies for access:\n\n\n```java\n@Entity\n@Include(rootLevel = true)\n@ReadPermission("Everyone")\n@CreatePermission("Admin OR Publisher")\n@DeletePermission("Noone"\n@UpdatePermission("Noone")\npublic class Book {\n\n    @Id\n    private Integer id;\n\n    @UpdatePermission("Admin OR Publisher")\n    private String title;\n\n    @ManyToMany(mappedBy = "books")\n    private Set<Author> authors;\n}\n```\n\nAdd Lifecycle hooks to your models to embed custom business logic that execute inline with CRUD operations through the web service:\n\n```java\n@Entity\n@Include(rootLevel = true)\n@ReadPermission("Everyone")\n@CreatePermission("Admin OR Publisher")\n@DeletePermission("Noone")\n@UpdatePermission("Noone")\npublic class Book {\n\n    @Id\n    private Integer id;\n\n    @UpdatePermission("Admin OR Publisher")\n    private String title;\n\n    @ManyToMany(mappedBy = "books")\n    private Set<Author> authors;\n\n    @OnCreatePreCommit\n    public void onCreate(RequestScope scope) {\n       //Do something\n    }\n}\n```\n\nMap expressions to security functions or predicates that get pushed to the persistence layer:\n\n```java\n    public static class IsAdminUser extends UserCheck {\n        @Override\n        public boolean ok(User user) {\n            return isUserInRole(user, UserRole.admin);\n        }\n    }\n```\n\nTo expose these models, follow the steps documented in [elide-standalone](https://github.com/yahoo/elide/tree/master/elide-standalone):\n\n```java\npublic class YourMain {\n  public static void main(String[] args) {\n\n    ElideStandaloneSettings settings = new ElideStandaloneSettings() {\n\n        @Override\n        public String getModelPackageName() {\n            //This needs to be changed to the package where your models live.\n            return "your.model.package";\n        }\n\n        @Override\n        public Map<String, Class<? extends Check>> getCheckMappings() {\n            //Maps expression clauses to your security check functions & predicates\n            return new HashMap<String, Class<? extends Check>>() { {\n                put("Admin", IsAdminUser.class);\n            }\n        };\n    });\n\n    ElideStandalone elide = new ElideStandalone(settings);\n\n    elide.start();\n  }\n}\n```\n\nFor example API calls, look at:\n1. [*JSON-API*](http://elide.io/pages/guide/10-jsonapi.html)\n2. [*GraphQL*](http://elide.io/pages/guide/11-graphql.html)\n\n## Security\n\nSecurity is documented in depth [here](http://elide.io/pages/guide/03-security.html).\n\n## Contribute\nPlease refer to [the contributing.md file](CONTRIBUTING.md) for information about how to get involved. We welcome issues, questions, and pull requests.\n\nIf you are contributing to Elide using an IDE, such as IntelliJ, make sure to install the [Lombok](https://projectlombok.org/) plugin.\n\nDiscussion is on [spectrum](https://spectrum.chat/elide) or through filing issues.\n\n## License\nThis project is licensed under the terms of the [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0.html) open source license.\nPlease refer to [LICENSE](LICENSE.txt) for the full terms.\n'