b'# Shiny, Simulating Reflections for Mobile Websites\n\nAdd shiny reflections to **text**, **backgrounds**, and **borders** on devices that support the `DeviceMotion` event.\n\n[![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/rikschennink/shiny/blob/gh-pages/LICENSE)\n[![Still in beta](https://badge.fury.io/js/%40rikschennink%2Fshiny.svg)](https://badge.fury.io/js/%40rikschennink%2Fshiny)\n[![Less than 1kB](https://badgen.net/bundlephobia/minzip/shiny)](https://bundlephobia.com/result?p=shiny)\n\n**\xe2\x9a\xa0\xef\xb8\x8f It looks like iOS 12.2 will [disable use of device sensors](https://twitter.com/rikschennink/status/1090912464403861504) on Safari, so development of Shiny.js is on hold for now**\n\n<img src="https://github.com/rikschennink/shiny/blob/master/demo.gif?raw=true" width="450" alt=""/>\n\n[Demo](https://pqina.nl/shiny/) \n\n*Use a mobile device, preferably iPhone in portrait mode at the moment*\n\n## Todo\n\n- Fix landscape orientation rendering\n- Test on Android (waiting for test device to arrive)\n- Add option to pass custom handler\n\n\n## Installation\n\nInstall from npm:\n\n```\nnpm install @rikschennink/shiny --save\n```\n\nOr download `dist/shiny.umd.js` and include the script on your page like shown below.\n\n\n## API\n\nThere\'s currently only one API call to make and it\'s `shiny()`. You can either pass a selector or an element (or array of elements), the second argument can be a configuration object telling Shiny how to render the special effects. \n\nIf the second argument is not supplied Shiny will render a radial background gradient with a white center and a transparent outer ring.\n\n```js\n// No config supplied, select element by class\nshiny(\'.my-shiny-element\');\n\n// Select multiple elements\nshiny(\'.my-shiny-element, #my-other-shiny-element\');\n\n// Configuration object, see below for details\nshiny(\'.my-shiny-element\', { /* config here */ });\n\n// Pass element object\nconst myElement = document.querySelector(\'my-shiny-element\');\nshiny(myElement, { /* config here */ });\n\n// Pass array of elements\nshiny([myElement, myOtherElement], { /* config here */ });\n```\n\n\n## Usage\n\n```html\n<!-- The element you want to make shiny -->\n<div class="my-shiny-element">Hello World</div>\n\n<!-- Include the library -->\n<script src="shiny.umd.js"></script>\n\n<!-- Initialize the SHINYNESS -->\n<script>\nshiny(\'.my-shiny-element\', {\n    // type of shiny to render, \n    // \'background\', \'border\', or \'text\'\n    type: \'background\',\n    gradient: {\n\n        // type of gradient\n        // \'linear\' or \'radial\'\n        type: \'radial\',\n\n        // angle of gradient when type is linear\n        angle: \'110deg\',\n\n        // flip axis movement\n        flip: {\n            x: true,\n            y: false\n        },\n\n        // colors to use\n        colors: [\n            // offset, color, opacity\n            // ! don\'t pass rgba or hsla colors, supply the opacity seperately\n            [0, \'#fff\', 1], // white at 0%\n            [1, \'#fff\', 0], // to fully transparent white at 100%\n        ]\n\n    },\n\n    // optional pattern fill\n    pattern: {\n        type: \'noise\', // only \'noise\' for now\n        opacity: .5\n    }\n});\n</script>\n```\n\n'