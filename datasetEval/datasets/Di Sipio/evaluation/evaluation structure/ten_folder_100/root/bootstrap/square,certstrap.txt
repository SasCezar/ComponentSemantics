b'# certstrap\n[![godoc](http://img.shields.io/badge/godoc-certstrap-blue.svg?style=flat)](https://godoc.org/github.com/square/certstrap)\n[![build](https://img.shields.io/travis/square/certstrap.svg?style=flat)](https://travis-ci.org/square/certstrap) [![license](http://img.shields.io/badge/license-apache_2.0-red.svg?style=flat)](https://raw.githubusercontent.com/square/certstrap/master/LICENSE)\n\nA simple certificate manager written in Go, to bootstrap your own certificate authority and public key infrastructure.  Adapted from etcd-ca.\n\ncertstrap is a very convenient app if you don\'t feel like dealing with openssl, its myriad of options or config files.\n\n## Common Uses\n\ncertstrap allows you to build your own certificate system:\n\n1. Initialize certificate authorities\n2. Create identities and certificate signature requests for hosts\n3. Sign and generate certificates\n\n## Certificate architecture\n\ncertstrap can init multiple certificate authorities to sign certificates with.  Users can make arbitrarily long certificate chains by using signed hosts to sign later certificate requests, as well.\n\n## Examples\n\n## Getting Started\n\n### Building\n\ncertstrap must be built with Go 1.13+. You can build certstrap from source:\n\n```\n$ git clone https://github.com/square/certstrap\n$ cd certstrap\n$ ./build\n```\n\nThis will generate a binary called `./bin/certstrap`\n\n### Initialize a new certificate authority:\n\n```\n$ ./bin/certstrap init --common-name "CertAuth"\nCreated out/CertAuth.key\nCreated out/CertAuth.crt\nCreated out/CertAuth.crl\n```\n\nNote that the `-common-name` flag is required, and will be used to name output files.\n\nMoreover, this will also generate a new keypair for the Certificate Authority,\nthough you can use a pre-existing private PEM key with the `-key` flag.\n\nIf the CN contains spaces, certstrap will change them to underscores in the filename for easier use.  The spaces will be preserved inside the fields of the generated files:\n\n```\n$ ./bin/certstrap init --common-name "Cert Auth"\nCreated out/Cert_Auth.key\nCreated out/Cert_Auth.crt\nCreated out/Cert_Auth.crl\n```\n\n### Request a certificate, including keypair:\n\n```\n$ ./bin/certstrap request-cert --common-name Alice\nCreated out/Alice.key\nCreated out/Alice.csr\n```\n\ncertstrap requires either `-common-name` or `-domain` flag to be set in order to generate a certificate signing request.  The CN for the certificate will be found from these fields.\n\nIf your server has mutiple ip addresses or domains, use comma seperated ip/domain/uri list. eg: `./certstrap request-cert -ip $ip1,$ip2 -domain $domain1,$domain2 -uri $uri1,$uri2`\n\nIf you do not wish to generate a new keypair, you can use a pre-existing private\nPEM key with the `-key` flag\n\n### Sign certificate request of host and generate the certificate:\n\n```\n$ ./bin/certstrap sign Alice --CA CertAuth\nCreated out/Alice.crt from out/Alice.csr signed by out/CertAuth.key\n```\n\n#### PKCS Format:\nIf you\'d like to convert your certificate and key to PKCS12 format, simply run:\n```\n$ openssl pkcs12 -export -out outputCert.p12 -inkey inputKey.key -in inputCert.crt -certfile CA.crt\n```\n`inputKey.key` and `inputCert.crt` make up the leaf private key and certificate pair of your choosing (generated by a `sign` command), with `CA.crt` being the certificate authority certificate that was used to sign it.  The output PKCS12 file is `outputCert.p12`\n\n\n### Retrieving Files\n\nOutputted key, request, and certificate files can be found in the depot directory.\nBy default, this is in `out/`\n\n\n## Project Details\n\n### Contributing\n\nSee [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches.\n\n### License\n\ncertstrap is under the Apache 2.0 license. See the [LICENSE](LICENSE) file for details.\n'