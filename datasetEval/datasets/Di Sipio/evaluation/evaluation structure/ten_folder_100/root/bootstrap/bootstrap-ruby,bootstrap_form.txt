b'If you are using Bootstrap v3, refer to the legacy [legacy-2.7](https://github.com/bootstrap-ruby/bootstrap_form/tree/legacy-2.7) branch.\n\nThis is a new take on the `bootstrap_form` README. Please leave comments at: #520. You can go back to the traditional [README](/OLD-README.md).\n\n---\n\n# bootstrap_form\n\n[![Build Status](https://travis-ci.org/bootstrap-ruby/bootstrap_form.svg?branch=master)](https://travis-ci.org/bootstrap-ruby/bootstrap_form)\n[![Gem Version](https://badge.fury.io/rb/bootstrap_form.svg)](https://rubygems.org/gems/bootstrap_form)\n\n`bootstrap_form` is a Rails form builder that makes it super easy to integrate Bootstrap v4-style forms into your Rails application. It provides form helpers that augment the Rails form helpers. `bootstrap_forms`\'s form helpers generate the form field and its label and all the Bootstrap mark-up required for proper Bootstrap display. `bootstrap_form` also provides:\n\n* [Validation error messages](#validation-and-errors) below the field they correspond to, by default. You can also put the error messages after the label, or turn off `bootstrap_form`\'s validation error handling and do it yourself.\n* Automatic [mark-up for the `required` attribute](#required-fields) on required fields.\n* An easy way to consistently show [help](#help-text) text on fields.\n* Mark-up for [Bootstrap horizontal forms](#horizontal-forms) (labels to the left of their fields, like a traditional desktop application), if that\'s what you want.\n* Many [options](#form-helpers) to modify or augment the generated mark-up.\n* A way to [escape to the Rails form helpers](#accessing-rails-form-helpers) if you need to do something that `bootstrap_form` can\'t do.\n\nSome other nice things that `bootstrap_form` does for you are:\n\n* Reduces the amount of code in your `.erb` files.\n* Gets you going faster with Bootstrap, because you don\'t need to learn all the rules of Bootstrap form mark-up to get started.\n* Reduces errors, because you\'re doing less typing.\n* Makes it easier to see the logic of the form, because it\'s not mixed in with the Bootstrap mark-up.\n\n`bootstrap_form` works like the standard Rails form helpers, and this README assumes you know how they work. You start a form with one of [`bootstrap_form_with`](#bootstrap-form-with), [`bootstrap_form_for`](#bootstrap-form-for), or [`bootstrap_form_tag`](#bootstrap-form-tag) in a view file. You get a form builder that calls the [`bootstrap_form` helpers](#form-helpers) instead of the standard Rails helpers. You use that form builder in the view file to render one or more form fields.\n\n## Requirements\n\n`bootstrap_form` supports at a minimum the currently supported versions of Ruby and Rails:\n\n* Ruby 2.4+\n* Rails 5.0+ (Rails 5.1+ for `bootstrap_form_with`)\n* Bootstrap 4.0+\n\n## Installation\n\nAdd it to your Gemfile:\n\n```ruby\ngem "bootstrap_form", "~> 4.0"\n```\n\nThen:\n\n`bundle install`\n\nDepending on which CSS pre-processor you are using, adding the bootstrap form styles differs slightly.\nIf you use Rails in the default mode without any pre-processor, you\'ll have to add the following line to your `application.css` file:\n\n```css\n*= require rails_bootstrap_forms\n```\n\nIf you followed the [official bootstrap installation guide](https://github.com/twbs/bootstrap-rubygem#a-ruby-on-rails), you\'ll probably have switched to SCSS. In this case add the following line to your `application.scss`:\n```\n@import "rails_bootstrap_forms";\n```\n\n## Usage\n\n### bootstrap_form_for\n\nTo get started, use the `bootstrap_form_for` helper in place of the Rails `form_for` helper. Here\'s an example:\n\n```erb\n<%= bootstrap_form_for(@user) do |f| %>\n  <%= f.email_field :email %>\n  <%= f.password_field :password %>\n  <%= f.check_box :remember_me %>\n  <%= f.submit "Log In" %>\n<% end %>\n```\n\nThis generates the following HTML:\n\n```html\n<form accept-charset="UTF-8" action="/users" class="new_user" id="new_user" method="post">\n  <div class="form-group">\n    <label for="user_email">Email</label>\n    <input class="form-control" id="user_email" name="user[email]" type="email">\n  </div>\n  <div class="form-group">\n    <label for="user_password">Password</label>\n    <input class="form-control" id="user_password" name="user[password]" type="password">\n  </div>\n  <div class="form-check">\n    <input name="user[remember_me]" type="hidden" value="0">\n    <input class="form-check-input" id="user_remember_me" name="user[remember_me]" type="checkbox" value="1">\n    <label class="form-check-label" for="user_remember_me">Remember me</label>\n  </div>\n  <input class="btn btn-secondary" name="commit" type="submit" value="Log In">\n</form>\n```\n\n### bootstrap_form_tag\n\nIf your form is not backed by a model, use the `bootstrap_form_tag`. Usage of this helper is the same as `bootstrap_form_for`, except no model object is passed in as the first argument. Here\'s an example:\n\n```erb\n<%= bootstrap_form_tag url: \'/subscribe\' do |f| %>\n  <%= f.email_field :email, value: \'name@example.com\' %>\n  <%= f.submit %>\n<% end %>\n```\n\n### bootstrap_form_with (Rails 5.1+)\n\nNote that `form_with` in Rails 5.1 does not add IDs to form elements and labels by default, which are both important to Bootstrap markup. This behaviour is corrected in Rails 5.2.\n\nTo get started, just use the `bootstrap_form_with` helper in place of `form_with`. Here\'s an example:\n\n```erb\n<%= bootstrap_form_with(model: @user, local: true) do |f| %>\n  <%= f.email_field :email %>\n  <%= f.password_field :password %>\n  <%= f.check_box :remember_me %>\n  <%= f.submit "Log In" %>\n<% end %>\n```\n\nThis generates:\n\n```html\n<form role="form" action="/users" accept-charset="UTF-8" method="post">\n  <input name="utf8" type="hidden" value="&#x2713;" />\n  <div class="form-group">\n    <label class="required" for="user_email">Email</label>\n    <input class="form-control" type="email" value="steve@example.com" name="user[email]" />\n  </div>\n  <div class="form-group">\n    <label for="user_password">Password</label>\n    <input class="form-control" type="password" name="user[password]" />\n    <small class="form-text text-muted">A good password should be at least six characters long</small>\n  </div>\n  <div class="form-check">\n    <input name="user[remember_me]" type="hidden" value="0">\n    <input class="form-check-input" id="user_remember_me" name="user[remember_me]" type="checkbox" value="1">\n    <label class="form-check-label" for="user_remember_me">Remember me</label>\n  </div>\n  <input type="submit" name="commit" value="Log In" class="btn btn-secondary" data-disable-with="Log In" />\n</form>\n```\n\n`bootstrap_form_with` supports both the `model:` and `url:` use cases\nin `form_with`.\n\n`form_with` has some important differences compared to `form_for` and `form_tag`, and these differences apply to `bootstrap_form_with`. A good summary of the differences can be found at: https://m.patrikonrails.com/rails-5-1s-form-with-vs-old-form-helpers-3a5f72a8c78a, or in the [Rails documentation](api.rubyonrails.org).\n\n## Form Helpers\n\n`bootstrap_form` provides its own version of the following Rails form helpers:\n\n```\nbutton                   email_field                               search_field\ncheck_box                file_field                                select\ncollection_check_boxes   grouped_collection_select                 submit\ncollection_radio_buttons hidden_field (not wrapped, but supported) telephone_field\ncollection_select        month_field                               text_area\ncolor_field              number_field                              text_field\ndate_field               password_field                            time_field\ndate_select              phone_field                               time_select\ndatetime_field           radio_button                              time_zone_select\ndatetime_local_field     range_field                               url_field\ndatetime_select          rich_text_area (Rails 6+)                 week_field\n```\n\nBy default, the helpers generate a `label` tag, and an `input`, `select`, or `textarea` tag, by calling the Rails `label` helper, and then the Rails helper with the same name as the `bootstrap_form` helper.\n\nThe `bootstrap_form` helpers accept the same options as the standard Rails form helpers, and pass those options through to the Rails helper. They also accept additional options, described in the following section.\n\n## Form Helper Options\n\nMany of the helpers accept the same options. The exceptions are:\n\n[button](#submit-buttons),\n[check_box](#checkboxes-and-radios),\n[collection_check_boxes](#collections),\n[collection_radio_buttons](#collections),\n[collection_select](#selects),\n[date_select](#date-helpers),\n[datetime_select](#date-helpers),\n[file_field](#file-fields),\n[grouped_collection_select](#selects),\n[hidden_field](#hidden-fields),\n[radio_button](#checkboxes-and-radios),\n[rich_text_area](#rich-text-areas-aka-trix-editor),\n[select](#selects),\n[submit](#submit-buttons),\n[time_select](#date-helpers),\n[time_zone_select](#selects)\n\nThe options for the form helpers that aren\'t in the exceptions list are described in the following sub-sections:\n\n### Labels\n\nUse the `label` option if you want to specify the field\'s label text:\n\n```erb\n<%= f.password_field :password_confirmation, label: "Confirm Password" %>\n```\n\nTo hide a label, use the `hide_label: true` option. This adds the `sr-only`\nclass, which keeps your labels accessible to those using screen readers.\n\n```erb\n<%= f.text_area :comment, hide_label: true, placeholder: "Leave a comment..." %>\n```\n\nTo add custom classes to the field\'s label:\n\n```erb\n<%= f.text_field :email, label_class: "custom-class" %>\n```\n\nOr you can add the label as input placeholder instead (this automatically hides the label):\n\n```erb\n<%= f.text_field :email, label_as_placeholder: true %>\n```\n\n### Input Elements / Controls\n\nTo specify the class of the generated input tag, use the `control_class` option:\n\n```erb\n<%= f.text_field :email, control_class: "custom-class" %>\n```\n\n### Help Text\n\nTo add help text, use the `help` option:\n\n```erb\n<%= f.password_field :password, help: "Must be at least 6 characters long" %>\n```\n\nThis generates:\n```\n<small class="form-text text-muted">Must be at least 6 characters long</small>\n```\n\nThis gem is also aware of help messages in locale translation files (i18n):\n\n```yml\nen:\n  activerecord:\n    help:\n      user:\n        password: "A good password should be at least six characters long"\n```\n\nHelp translations containing HTML should follow the convention of appending `_html` to the name:\n\n```yml\nen:\n  activerecord:\n    help:\n      user:\n        password_html: "A <strong>good</strong> password should be at least six characters long"\n```\n\nIf your model name has multiple words (like `SuperUser`), the key on the\ntranslation file should be underscored (`super_user`).\n\nYou can override help translations for a particular field by passing the `help`\noption or turn them off completely by passing `help: false`.\n\n### Prepending and Appending Inputs\n\nYou can pass `prepend` and/or `append` options to input fields:\n\n```erb\n<%= f.text_field :price, prepend: "$", append: ".00" %>\n```\n\nYou can also prepend and append buttons. Note: The buttons must contain the\n`btn` class to generate the correct markup.\n\n```erb\n<%= f.text_field :search, append: link_to("Go", "#", class: "btn btn-secondary") %>\n```\n\nTo add a class to the input group wrapper, use the `:input_group_class` option.\n\n```erb\n<%= f.email_field :email, append: f.primary(\'Subscribe\'), input_group_class: \'input-group-lg\' %>\n```\n\n### Additional Form Group Attributes\n\nBootstrap mark-up dictates that most input field types have the label and input wrapped in a `div.form-group`.\n\nIf you want to add an additional CSS class or any other attribute to the form group div, you can use the `wrapper: { class: \'additional-class\', data: { foo: \'bar\' } }` option.\n\n```erb\n<%= f.text_field :name, wrapper: { class: \'has-warning\', data: { foo: \'bar\' } } %>\n```\n\nWhich produces the following output:\n\n```erb\n<div class="form-group has-warning" data-foo="bar">\n  <label class="form-control-label" for="user_name">Id</label>\n  <input class="form-control" id="user_name" name="user[name]" type="text">\n</div>\n```\n\nIf you only want to set the class on the form group div, you can use the `wrapper_class` option. It\'s just a short form of `wrapper: { class: \'additional-class\' }`.\n\n### Suppressing the Form Group Altogether\n\nYou may have want to define your own form group div around a field. To do so, add the option `wrapper: false` to the input field. For example:\n\n```\nf.form_group :user do\n  f.email_field :email, wrapper: false\nend\n```\n\nNote that Bootstrap relies on the form group div to correctly format most fields, so if you use the `wrapper: false` option, you should provide your own form group div around the input field. You can write your own HTML, or use the `form_group` helper.\n\n## Selects\n\nOur select helper accepts the same arguments as the [default Rails helper](http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-select). Here\'s an example of how you pass both options and html_options hashes:\n\n```erb\n<%= f.select :product, [["Apple", 1], ["Grape", 2]], { label: "Choose your favorite fruit:", wrapper: { class: \'has-warning\', data: { foo: \'bar\' } } }, { class: "selectpicker" } %>\n```\n\n## Checkboxes and Radios\n\nCheckboxes and radios should be placed inside of a `form_group` to render\nproperly. The following example ensures that the entire form group will display\nan error if an associated validations fails:\n\n```erb\n<%= f.form_group :skill_level, label: { text: "Skill" }, help: "Optional Help Text" do %>\n  <%= f.radio_button :skill_level, 0, label: "Novice", checked: true %>\n  <%= f.radio_button :skill_level, 1, label: "Intermediate" %>\n  <%= f.radio_button :skill_level, 2, label: "Advanced" %>\n<% end %>\n\n<%= f.form_group :terms do %>\n  <%= f.check_box :terms, label: "I agree to the Terms of Service" %>\n<% end %>\n```\n\nYou can also create a checkbox using a block:\n\n```erb\n<%= f.form_group :terms, label: { text: "Optional Label" } do %>\n  <%= f.check_box :terms do %>\n    You need to check this box to accept our terms of service and privacy policy\n  <% end %>\n<% end %>\n```\n\nTo display checkboxes and radios inline, pass the `inline: true` option:\n\n```erb\n<%= f.form_group :skill_level, label: { text: "Skill" } do %>\n  <%= f.radio_button :skill_level, 0, label: "Novice", inline: true %>\n  <%= f.radio_button :skill_level, 1, label: "Intermediate", inline: true %>\n  <%= f.radio_button :skill_level, 2, label: "Advanced", inline: true %>\n<% end %>\n```\n\nCheck boxes and radio buttons are wrapped in a `div.form-check`. You can add classes to this `div` with the `:wrapper_class` option:\n\n```erb\n<%= f.radio_button :skill_level, 0, label: "Novice", inline: true, wrapper_class: "w-auto" %>\n```\n### Switches\n\nTo render checkboxes as switches with Bootstrap 4.2+, use `custom: :switch`:\n\n```erb\n<%= f.check_box :remember_me, custom: :switch %>\n```\n\n### Collections\n\n`bootstrap_form` also provides helpers that automatically create the\n`form_group` and the `radio_button`s or `check_box`es for you:\n\n```erb\n<%= f.collection_radio_buttons :skill_level, Skill.all, :id, :name %>\n<%= f.collection_check_boxes :skills, Skill.all, :id, :name %>\n```\n\nNOTE: These helpers do not currently support a block, unlike their equivalent Rails helpers. See issue [#477](https://github.com/bootstrap-ruby/bootstrap_form/issues/477). If you need to use the block syntax, use `collection_check_boxes_without_bootstrap` or `collection_radio_buttons_without_bootstrap` for now.\n\nCollection methods accept these options:\n* `:label`: Customize the `form_group`\'s label\n* `:hide_label`: Pass true to hide the `form_group`\'s label\n* `:help`: Add a help span to the `form_group`\n* Other options will be forwarded to the `radio_button`/`check_box` method\n\n## Static Controls\n\nYou can create a static control like this:\n\n```erb\n<%= f.static_control :email %>\n```\n\nHere\'s the output for a horizontal layout:\n\n```html\n<div class="form-group">\n  <label class="col-sm-2 form-control-label" for="user_email">Email</label>\n  <div class="col-sm-10">\n    <input class="form-control-plaintext" id="user_email" name="user[email]" readonly="readonly" type="text" value="test@email.com"/>\n  </div>\n</div>\n```\n\nYou can also create a static control that isn\'t based on a model attribute:\n\n```erb\n<%= f.static_control :field_name, label: "Custom Static Control", value: "Content Here" %>\n```\n\n`field_name` may be any name that isn\'t already used in the form. Note that you may get "unpermitted parameter" messages in your log file with this approach.\n\nYou can also create the static control the following way, if you don\'t need to get the value of the static control as a parameter when the form is submitted:\n\n```erb\n<%= f.static_control label: "Custom Static Control", value: "Content Here", name: nil %>\n```\n\n(If you neither provide a field name nor `name: nil`, the Rails code that submits the form will give a JavaScript error.)\n\nPrior to version 4 of `bootstrap_form`, you could pass a block to the `static_control` method.\nThe value of the block would be used for the content of the static "control".\nBootstrap 4 actually creates and styles a disabled input field for static controls, so the value of the control has to be specified by the `value:` option.\nPassing a block to `static_control` no longer has any effect.\n\n## Date Helpers\n\nThe multiple selects that the date and time helpers (`date_select`,\n`time_select`, `datetime_select`) generate are wrapped inside a\n`div.rails-bootstrap-forms-[date|time|datetime]-select` tag. This is because\nBootstrap automatically styles our controls as `block`s. This wrapper fixes\nthis defining these selects as `inline-block` and a width of `auto`.\n\n## Submit Buttons\n\nThe `btn btn-secondary` CSS classes are automatically added to your submit\nbuttons.\n\n```erb\n<%= f.submit %>\n```\n\nYou can also use the `primary` helper, which adds `btn btn-primary` to your\nsubmit button:\n\n```erb\n<%= f.primary "Optional Label" %>\n```\n\nYou can specify your own classes like this:\n\n```erb\n<%= f.submit "Log In", class: "btn btn-success" %>\n```\n\nIf the `primary` helper receives a `render_as_button: true` option or a block,\nit will be rendered as an HTML button, instead of an input tag. This allows you\nto specify HTML content and styling for your buttons (such as adding\nillustrative icons to them). For example, the following statements\n\n```erb\n<%= f.primary "Save changes <span class=\'fa fa-save\'></span>".html_safe, render_as_button: true %>\n\n<%= f.primary do\n      concat \'Save changes \'\n      concat content_tag(:span, nil, class: \'fa fa-save\')\n    end %>\n```\n\nare equivalent, and each of them both be rendered as:\n\n```html\n<button name="button" type="submit" class="btn btn-primary">Save changes <span class="fa fa-save"></span></button>\n```\n\nIf you wish to add additional CSS classes to your button, while keeping the\ndefault ones, you can use the `extra_class` option. This is particularly useful\nfor adding extra details to buttons (without forcing you to repeat the\nBootstrap classes), or for element targeting via CSS classes.\nBe aware, however, that using the `class` option will discard any extra classes\nyou add. As an example, the following button declarations\n\n```erb\n<%= f.primary "My Nice Button", extra_class: \'my-button\' %>\n\n<%= f.primary "My Button", class: \'my-button\' %>\n```\n\nwill be rendered as\n\n```html\n<input type="submit" value="My Nice Button" class="btn btn-primary my-button" />\n\n<input type="submit" value="My Button" class="my-button" />\n```\n\n(some unimportant HTML attributes have been removed for simplicity)\n\n## Rich Text Areas AKA Trix Editor\n\nIf you\'re using Rails 6, `bootstrap_form` supports the `rich_text_area` helper.\n\n\n```erb\n<%= f.rich_text_area(:life_story) %>\n```\n\nwill be rendered as:\n\n```html\n<div class="form-group">\n  <label for="user_life_story">Life story</label>\n  <input type="hidden" name="user[life_story]" id="user_life_story_trix_input_user"/>\n  <trix-editor id="user_life_story" data-blob-url-template="http://test.host/rails/active_storage/blobs/:signed_id/:filename" data-direct-upload-url="http://test.host/rails/active_storage/direct_uploads" input="user_life_story_trix_input_user" class="trix-content form-control"/>\n  </trix-editor>\n</div>\n```\n\n## File Fields\n\nThe `file_field` helper generates mark-up for a Bootstrap 4 custom file field entry. It takes the [options for `text_field`](#form-helper-options), minus `append` and `prepend`.\n\n## Hidden Fields\n\nThe `hidden_field` helper in `bootstrap_form` calls the Rails helper directly, and does no additional mark-up.\n\n## Accessing Rails Form Helpers\n\nIf you want to use the original Rails form helpers for a particular field,\nappend `_without_bootstrap` to the helper:\n\n```erb\n<%= f.text_field_without_bootstrap :email %>\n```\n\n## Form Styles\n\nBy default, your forms will stack labels on top of controls and your controls\nwill grow to 100 percent of the available width. This is consistent with Bootstrap\'s "mobile first" approach.\n\n### Inline Forms\n\nTo use an inline-layout form, use the `layout: :inline` option. To hide labels,\nuse the `hide_label: true` option, which keeps your labels accessible to those\nusing screen readers.\n\n```erb\n<%= bootstrap_form_for(@user, layout: :inline) do |f| %>\n  <%= f.email_field :email, hide_label: true %>\n  <%= f.password_field :password, hide_label: true %>\n  <%= f.check_box :remember_me %>\n  <%= f.submit %>\n<% end %>\n```\n\nTo skip label rendering at all, use `skip_label: true` option.\n\n```erb\n<%= f.password_field :password, skip_label: true %>\n```\n\n### Horizontal Forms\n\nTo use a horizontal-layout form with labels to the left of the control, use the\n`layout: :horizontal` option. You should specify both `label_col` and\n`control_col` css classes as well (they default to `col-sm-2` and `col-sm-10`).\n\nIn the example below, the checkbox and submit button have been wrapped in a\n`form_group` to keep them properly aligned.\n\n```erb\n<%= bootstrap_form_for(@user, layout: :horizontal, label_col: "col-sm-2", control_col: "col-sm-10") do |f| %>\n  <%= f.email_field :email %>\n  <%= f.password_field :password %>\n  <%= f.form_group do %>\n    <%= f.check_box :remember_me %>\n  <% end %>\n  <%= f.form_group do %>\n    <%= f.submit %>\n  <% end %>\n<% end %>\n```\n\nThe `label_col` and `control_col` css classes can also be changed per control:\n\n```erb\n<%= bootstrap_form_for(@user, layout: :horizontal) do |f| %>\n  <%= f.email_field :email %>\n  <%= f.text_field :age, control_col: "col-sm-3" %>\n  <%= f.form_group do %>\n    <%= f.submit %>\n  <% end %>\n<% end %>\n```\n\nor default value can be changed in initializer:\n\n```ruby\n# config/initializers/bootstrap_form.rb\nmodule BootstrapForm\n  class FormBuilder\n    def default_label_col\n      \'col-sm-4\'\n    end\n    def default_control_col\n      \'col-sm-8\'\n    end\n    def default_layout\n      # :default, :horizontal or :inline\n      :horizontal\n    end\n  end\nend\n```\n\nControl col wrapper class can be modified with `add_control_col_class`. This option will preserve column definition:\n\n```erb\n<%= bootstrap_form_for(@user, layout: :horizontal) do |f| %>\n  <%= f.email_field :email %>\n  <%= f.text_field :age, add_control_col_class: "additional-control-col-class" %>\n  <%= f.form_group do %>\n    <%= f.submit %>\n  <% end %>\n<% end %>\n```\n\n### Custom Field Layout\n\nThe form-level `layout` can be overridden per field, unless the form-level layout was `inline`:\n\n```erb\n<%= bootstrap_form_for(@user, layout: :horizontal) do |f| %>\n  <%= f.email_field :email %>\n  <%= f.text_field :feet, layout: :default %>\n  <%= f.text_field :inches, layout: :default %>\n  <%= f.form_group do %>\n    <%= f.submit %>\n  <% end %>\n<% end %>\n```\n\nA form-level `layout: :inline` can\'t be overridden because of the way Bootstrap 4 implements in-line layouts. One possible work-around is to leave the form-level layout as default, and specify the individual fields as `layout: :inline`, except for the fields(s) that should be other than in-line.\n\n### Custom Form Element Styles\n\nThe `custom` option can be used to replace the browser default styles for check boxes and radio buttons with dedicated Bootstrap styled form elements. Here\'s an example:\n\n```erb\n<%= bootstrap_form_for(@user) do |f| %>\n  <%= f.email_field :email %>\n  <%= f.password_field :password %>\n  <%= f.check_box :remember_me, custom: true %>\n  <%= f.submit "Log In" %>\n<% end %>\n```\n\n## Validation and Errors\n\nRails normally wraps fields with validation errors in a `div.field_with_errors`, but this behaviour isn\'t consistent with Bootstrap 4 styling. By default, `bootstrap_form` generations in-line errors which appear below the field. But it can also generate errors on the label, or not display any errors, leaving it up to you.\n\n### Inline Errors\n\nBy default, fields that have validation errors will be outlined in red and the\nerror will be displayed below the field. Here\'s an example:\n\n```html\n<div class="form-group">\n  <label class="form-control-label" for="user_email">Email</label>\n  <input class="form-control is-invalid" id="user_email" name="user[email]" type="email" value="">\n  <small class="invalid-feedback">can\'t be blank</small>\n</div>\n```\n\nYou can turn off inline errors for the entire form like this:\n\n```erb\n<%= bootstrap_form_for(@user, inline_errors: false) do |f| %>\n  ...\n<% end %>\n```\n\n### Label Errors\n\nYou can also display validation errors in the field\'s label; just turn\non the `:label_errors` option. Here\'s an example:\n\n```erb\n<%= bootstrap_form_for(@user, label_errors: true) do |f| %>\n  ...\n<% end %>\n```\n\nBy default, turning on `:label_errors` will also turn off\n`:inline_errors`. If you want both turned on, you can do that too:\n\n```erb\n<%= bootstrap_form_for(@user, label_errors: true, inline_errors: true) do |f| %>\n  ...\n<% end %>\n```\n\n### Alert Messages\n\nTo display an error message with an error summary, you can use the\n`alert_message` helper. This won\'t output anything unless a model validation\nhas failed.\n\n```erb\n<%= f.alert_message "Please fix the errors below." %>\n```\n\nWhich outputs:\n\n```html\n<div class="alert alert-danger">\n  <p>Please fix the errors below.</p>\n  <ul class="rails-bootstrap-forms-error-summary">\n    <li>Email can\'t be blank</li>\n  </ul>\n</div>\n```\n\nYou can turn off the error summary like this:\n\n```erb\n<%= f.alert_message "Please fix the errors below.", error_summary: false %>\n```\n\nTo output a simple unordered list of errors, use the `error_summary` helper.\n\n```erb\n<%= f.error_summary %>\n```\n\nWhich outputs:\n\n```html\n<ul class="rails-bootstrap-forms-error-summary">\n  <li>Email can\'t be blank</li>\n</ul>\n```\n\n### Errors On\n\nIf you want to display a custom inline error for a specific attribute not\nrepresented by a form field, use the `errors_on` helper.\n\n```erb\n<%= f.errors_on :tasks %>\n```\n\nWhich outputs:\n\n```html\n<div class="alert alert-danger">Tasks can\'t be blank.</div>\n```\n\nYou can hide the attribute name like this:\n\n```erb\n<%= f.errors_on :tasks, hide_attribute_name: true %>\n```\n\nWhich outputs:\n\n```html\n<div class="alert alert-danger">can\'t be blank.</div>\n```\n\n## Required Fields\n\nA label that is associated with a required field is automatically annotated with\na `required` CSS class. `bootstrap_form` doesn\'t provide any styling for required fields. You\'re free to add any appropriate CSS to style\nrequired fields as desired. One example would be to automatically add an\nasterisk to the end of the label:\n\n```css\nlabel.required:after {\n  content:" *";\n}\n```\n\nThe label `required` class is determined based on the definition of a presence\nvalidator with the associated model attribute. Presently this is one of:\nActiveRecord::Validations::PresenceValidator or\nActiveModel::Validations::PresenceValidator.\n\nIn cases where this behaviour is undesirable, use the `required` option to force the class to be present or absent:\n\n```erb\n<%= f.password_field :login, label: "New Username", required: true %>\n<%= f.password_field :password, label: "New Password", required: false %>\n```\n\n## Internationalization\n\nbootstrap_form follows standard rails conventions so it\'s i18n-ready. See more\nhere: http://guides.rubyonrails.org/i18n.html#translations-for-active-record-models\n\n## Future Compatibility\n\nThe Rails team has [suggested](https://github.com/rails/rails/issues/25197) that `form_for` and `form_tag` may be deprecated and then removed in future versions of Rails. `bootstrap_form` will continue to support `bootstrap_form_for` and `bootstrap_form_tag` as long as Rails supports `form_for` and `form_tag`.\n\n## Other Tips and Edge Cases\n\nBy their very nature, forms are extremely diverse. It would be extremely difficult to provide a gem that could handle every need. Here are some tips for handling edge cases.\n\n### Empty But Visible Labels\n\nSome third party plug-ins require an empty but visible label on an input control. The `hide_label` option generates a label that won\'t appear on the screen, but it\'s considered invisible and therefore doesn\'t work with such a plug-in. An empty label (e.g. `""`) causes the underlying Rails helper to generate a label based on the field\'s attribute\'s name.\n\nThe solution is to use a zero-width character for the label, or some other "empty" HTML. For example:\n\n```ruby\nlabel: "&#8203;".html_safe\n```\n\nor\n\n```ruby\nlabel: "<span></span>".html_safe\n```\n\n## Contributing\n\nWe welcome contributions.\nIf you\'re considering contributing to bootstrap_form,\nplease review the [Contributing](/CONTRIBUTING.md)\ndocument first.\n\n## License\n\nMIT License. Copyright 2012-2019 Stephen Potenza (https://github.com/potenza)\n'