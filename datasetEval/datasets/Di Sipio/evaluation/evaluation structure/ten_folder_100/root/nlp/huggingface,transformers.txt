b'<p align="center">\n    <br>\n    <img src="https://raw.githubusercontent.com/huggingface/transformers/master/docs/source/imgs/transformers_logo_name.png" width="400"/>\n    <br>\n<p>\n<p align="center">\n    <a href="https://circleci.com/gh/huggingface/transformers">\n        <img alt="Build" src="https://img.shields.io/circleci/build/github/huggingface/transformers/master">\n    </a>\n    <a href="https://github.com/huggingface/transformers/blob/master/LICENSE">\n        <img alt="GitHub" src="https://img.shields.io/github/license/huggingface/transformers.svg?color=blue">\n    </a>\n    <a href="https://huggingface.co/transformers/index.html">\n        <img alt="Documentation" src="https://img.shields.io/website/http/huggingface.co/transformers/index.html.svg?down_color=red&down_message=offline&up_message=online">\n    </a>\n    <a href="https://github.com/huggingface/transformers/releases">\n        <img alt="GitHub release" src="https://img.shields.io/github/release/huggingface/transformers.svg">\n    </a>\n</p>\n\n<h3 align="center">\n<p>State-of-the-art Natural Language Processing for TensorFlow 2.0 and PyTorch\n</h3>\n\n\xf0\x9f\xa4\x97 Transformers (formerly known as `pytorch-transformers` and `pytorch-pretrained-bert`) provides state-of-the-art general-purpose architectures (BERT, GPT-2, RoBERTa, XLM, DistilBert, XLNet, CTRL...) for Natural Language Understanding (NLU) and Natural Language Generation (NLG) with over 32+ pretrained models in 100+ languages and deep interoperability between TensorFlow 2.0 and PyTorch.\n\n### Features\n\n- As easy to use as pytorch-transformers\n- As powerful and concise as Keras\n- High performance on NLU and NLG tasks\n- Low barrier to entry for educators and practitioners\n\nState-of-the-art NLP for everyone\n- Deep learning researchers\n- Hands-on practitioners\n- AI/ML/NLP teachers and educators\n\nLower compute costs, smaller carbon footprint\n- Researchers can share trained models instead of always retraining\n- Practitioners can reduce compute time and production costs\n- 10 architectures with over 30 pretrained models, some in more than 100 languages\n\nChoose the right framework for every part of a model\'s lifetime\n- Train state-of-the-art models in 3 lines of code\n- Deep interoperability between TensorFlow 2.0 and PyTorch models\n- Move a single model between TF2.0/PyTorch frameworks at will\n- Seamlessly pick the right framework for training, evaluation, production\n\n\n| Section | Description |\n|-|-|\n| [Installation](#installation) | How to install the package |\n| [Model architectures](#model-architectures) | Architectures (with pretrained weights) |\n| [Online demo](#online-demo) | Experimenting with this repo\xe2\x80\x99s text generation capabilities |\n| [Quick tour: Usage](#quick-tour) | Tokenizers & models usage: Bert and GPT-2 |\n| [Quick tour: TF 2.0 and PyTorch ](#Quick-tour-TF-20-training-and-PyTorch-interoperability) | Train a TF 2.0 model in 10 lines of code, load it in PyTorch |\n| [Quick tour: Fine-tuning/usage scripts](#quick-tour-of-the-fine-tuningusage-scripts) | Using provided scripts: GLUE, SQuAD and Text generation |\n| [Migrating from pytorch-transformers to transformers](#Migrating-from-pytorch-transformers-to-transformers) | Migrating your code from pytorch-transformers to transformers |\n| [Migrating from pytorch-pretrained-bert to pytorch-transformers](#Migrating-from-pytorch-pretrained-bert-to-transformers) | Migrating your code from pytorch-pretrained-bert to transformers |\n| [Documentation][(v2.2.0)](https://huggingface.co/transformers/v2.2.0) [(v2.1.1)](https://huggingface.co/transformers/v2.1.1) [(v2.0.0)](https://huggingface.co/transformers/v2.0.0) [(v1.2.0)](https://huggingface.co/transformers/v1.2.0) [(v1.1.0)](https://huggingface.co/transformers/v1.1.0) [(v1.0.0)](https://huggingface.co/transformers/v1.0.0) [(master)](https://huggingface.co/transformers) | Full API documentation and more |\n\n## Installation\n\nThis repo is tested on Python 2.7 and 3.5+ (examples are tested only on python 3.5+), PyTorch 1.0.0+ and TensorFlow 2.0.0-rc1\n\n### With pip\n\nFirst you need to install one of, or both, TensorFlow 2.0 and PyTorch.\nPlease refer to [TensorFlow installation page](https://www.tensorflow.org/install/pip#tensorflow-2.0-rc-is-available) and/or [PyTorch installation page](https://pytorch.org/get-started/locally/#start-locally) regarding the specific install command for your platform.\n\nWhen TensorFlow 2.0 and/or PyTorch has been installed, \xf0\x9f\xa4\x97 Transformers can be installed using pip as follows:\n\n```bash\npip install transformers\n```\n\n### From source\n\nHere also, you first need to install one of, or both, TensorFlow 2.0 and PyTorch.\nPlease refer to [TensorFlow installation page](https://www.tensorflow.org/install/pip#tensorflow-2.0-rc-is-available) and/or [PyTorch installation page](https://pytorch.org/get-started/locally/#start-locally) regarding the specific install command for your platform.\n\nWhen TensorFlow 2.0 and/or PyTorch has been installed, you can install from source by cloning the repository and running:\n\n```bash\npip install [--editable] .\n```\n\n### Run the examples\n\nExamples are included in the repository but are not shipped with the library.\nTherefore, in order to run the latest versions of the examples you also need to install from source. To do so, create a new virtual environment and follow these steps:\n\n```bash\ngit clone https://github.com/huggingface/transformers\ncd transformers\npip install [--editable] .\n```\n\n### Tests\n\nA series of tests are included for the library and the example scripts. Library tests can be found in the [tests folder](https://github.com/huggingface/transformers/tree/master/transformers/tests) and examples tests in the [examples folder](https://github.com/huggingface/transformers/tree/master/examples).\n\nThese tests can be run using `pytest` (install pytest if needed with `pip install pytest`).\n\nDepending on which framework is installed (TensorFlow 2.0 and/or PyTorch), the irrelevant tests will be skipped. Ensure that both frameworks are installed if you want to execute all tests.\n\nYou can run the tests from the root of the cloned repository with the commands:\n\n```bash\npython -m pytest -sv ./transformers/tests/\npython -m pytest -sv ./examples/\n```\n\n### Do you want to run a Transformer model on a mobile device?\n\nYou should check out our [`swift-coreml-transformers`](https://github.com/huggingface/swift-coreml-transformers) repo.\n\nIt contains a set of tools to convert PyTorch or TensorFlow 2.0 trained Transformer models (currently contains `GPT-2`, `DistilGPT-2`, `BERT`, and `DistilBERT`) to CoreML models that run on iOS devices.\n\nAt some point in the future, you\'ll be able to seamlessly move from pre-training or fine-tuning models to productizing them in CoreML, or prototype a model or an app in CoreML then research its hyperparameters or architecture from TensorFlow 2.0 and/or PyTorch. Super exciting!\n\n## Model architectures\n\n\xf0\x9f\xa4\x97 Transformers currently provides 10 NLU/NLG architectures:\n\n1. **[BERT](https://github.com/google-research/bert)** (from Google) released with the paper [BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding](https://arxiv.org/abs/1810.04805) by Jacob Devlin, Ming-Wei Chang, Kenton Lee and Kristina Toutanova.\n2. **[GPT](https://github.com/openai/finetune-transformer-lm)** (from OpenAI) released with the paper [Improving Language Understanding by Generative Pre-Training](https://blog.openai.com/language-unsupervised/) by Alec Radford, Karthik Narasimhan, Tim Salimans and Ilya Sutskever.\n3. **[GPT-2](https://blog.openai.com/better-language-models/)** (from OpenAI) released with the paper [Language Models are Unsupervised Multitask Learners](https://blog.openai.com/better-language-models/) by Alec Radford*, Jeffrey Wu*, Rewon Child, David Luan, Dario Amodei** and Ilya Sutskever**.\n4. **[Transformer-XL](https://github.com/kimiyoung/transformer-xl)** (from Google/CMU) released with the paper [Transformer-XL: Attentive Language Models Beyond a Fixed-Length Context](https://arxiv.org/abs/1901.02860) by Zihang Dai*, Zhilin Yang*, Yiming Yang, Jaime Carbonell, Quoc V. Le, Ruslan Salakhutdinov.\n5. **[XLNet](https://github.com/zihangdai/xlnet/)** (from Google/CMU) released with the paper [\xe2\x80\x8bXLNet: Generalized Autoregressive Pretraining for Language Understanding](https://arxiv.org/abs/1906.08237) by Zhilin Yang*, Zihang Dai*, Yiming Yang, Jaime Carbonell, Ruslan Salakhutdinov, Quoc V. Le.\n6. **[XLM](https://github.com/facebookresearch/XLM/)** (from Facebook) released together with the paper [Cross-lingual Language Model Pretraining](https://arxiv.org/abs/1901.07291) by Guillaume Lample and Alexis Conneau.\n7. **[RoBERTa](https://github.com/pytorch/fairseq/tree/master/examples/roberta)** (from Facebook), released together with the paper a [Robustly Optimized BERT Pretraining Approach](https://arxiv.org/abs/1907.11692) by Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, Veselin Stoyanov.\n8. **[DistilBERT](https://github.com/huggingface/transformers/tree/master/examples/distillation)** (from HuggingFace), released together with the paper [DistilBERT, a distilled version of BERT: smaller, faster, cheaper and lighter](https://arxiv.org/abs/1910.01108) by Victor Sanh, Lysandre Debut and Thomas Wolf. The same method has been applied to compress GPT2 into [DistilGPT2](https://github.com/huggingface/transformers/tree/master/examples/distillation).\n9. **[CTRL](https://github.com/salesforce/ctrl/)** (from Salesforce) released with the paper [CTRL: A Conditional Transformer Language Model for Controllable Generation](https://arxiv.org/abs/1909.05858) by Nitish Shirish Keskar*, Bryan McCann*, Lav R. Varshney, Caiming Xiong and Richard Socher.\n10. **[CamemBERT](https://camembert-model.fr)** (from Inria/Facebook/Sorbonne) released with the paper [CamemBERT: a Tasty French Language Model](https://arxiv.org/abs/1911.03894) by Louis Martin*, Benjamin Muller*, Pedro Javier Ortiz Su\xc3\xa1rez*, Yoann Dupont, Laurent Romary, \xc3\x89ric Villemonte de la Clergerie, Djam\xc3\xa9 Seddah and Beno\xc3\xaet Sagot.\n11. **[ALBERT](https://github.com/google-research/google-research/tree/master/albert)** (from Google Research and the Toyota Technological Institute at Chicago) released with the paper [ALBERT: A Lite BERT for Self-supervised Learning of Language Representations](https://arxiv.org/abs/1909.11942), by Zhenzhong Lan, Mingda Chen, Sebastian Goodman, Kevin Gimpel, Piyush Sharma, Radu Soricut.\n11. Want to contribute a new model? We have added a **detailed guide and templates** to guide you in the process of adding a new model. You can find them in the [`templates`](./templates) folder of the repository. Be sure to check the [contributing guidelines](./CONTRIBUTING.md) and contact the maintainers or open an issue to collect feedbacks before starting your PR.\n\nThese implementations have been tested on several datasets (see the example scripts) and should match the performances of the original implementations (e.g. ~93 F1 on SQuAD for BERT Whole-Word-Masking, ~88 F1 on RocStories for OpenAI GPT, ~18.3 perplexity on WikiText 103 for Transformer-XL, ~0.916 Peason R coefficient on STS-B for XLNet). You can find more details on the performances in the Examples section of the [documentation](https://huggingface.co/transformers/examples.html).\n\n## Online demo\n\n**[Write With Transformer](https://transformer.huggingface.co)**, built by the Hugging Face team at transformer.huggingface.co, is the official demo of this repo\xe2\x80\x99s text generation capabilities.\nYou can use it to experiment with completions generated by `GPT2Model`, `TransfoXLModel`, and `XLNetModel`.\n\n> \xe2\x80\x9c\xf0\x9f\xa6\x84 Write with transformer is to writing what calculators are to calculus.\xe2\x80\x9d\n\n![write_with_transformer](https://transformer.huggingface.co/front/assets/thumbnail-large.png)\n\n## Quick tour\n\nLet\'s do a very quick overview of the model architectures in \xf0\x9f\xa4\x97 Transformers. Detailed examples for each model architecture (Bert, GPT, GPT-2, Transformer-XL, XLNet and XLM) can be found in the [full documentation](https://huggingface.co/transformers/).\n\n```python\nimport torch\nfrom transformers import *\n\n# Transformers has a unified API\n# for 8 transformer architectures and 30 pretrained weights.\n#          Model          | Tokenizer          | Pretrained weights shortcut\nMODELS = [(BertModel,       BertTokenizer,       \'bert-base-uncased\'),\n          (OpenAIGPTModel,  OpenAIGPTTokenizer,  \'openai-gpt\'),\n          (GPT2Model,       GPT2Tokenizer,       \'gpt2\'),\n          (CTRLModel,       CTRLTokenizer,       \'ctrl\'),\n          (TransfoXLModel,  TransfoXLTokenizer,  \'transfo-xl-wt103\'),\n          (XLNetModel,      XLNetTokenizer,      \'xlnet-base-cased\'),\n          (XLMModel,        XLMTokenizer,        \'xlm-mlm-enfr-1024\'),\n          (DistilBertModel, DistilBertTokenizer, \'distilbert-base-uncased\'),\n          (RobertaModel,    RobertaTokenizer,    \'roberta-base\')]\n\n# To use TensorFlow 2.0 versions of the models, simply prefix the class names with \'TF\', e.g. `TFRobertaModel` is the TF 2.0 counterpart of the PyTorch model `RobertaModel`\n\n# Let\'s encode some text in a sequence of hidden-states using each model:\nfor model_class, tokenizer_class, pretrained_weights in MODELS:\n    # Load pretrained model/tokenizer\n    tokenizer = tokenizer_class.from_pretrained(pretrained_weights)\n    model = model_class.from_pretrained(pretrained_weights)\n\n    # Encode text\n    input_ids = torch.tensor([tokenizer.encode("Here is some text to encode", add_special_tokens=True)])  # Add special tokens takes care of adding [CLS], [SEP], <s>... tokens in the right way for each model.\n    with torch.no_grad():\n        last_hidden_states = model(input_ids)[0]  # Models outputs are now tuples\n\n# Each architecture is provided with several class for fine-tuning on down-stream tasks, e.g.\nBERT_MODEL_CLASSES = [BertModel, BertForPreTraining, BertForMaskedLM, BertForNextSentencePrediction,\n                      BertForSequenceClassification, BertForTokenClassification, BertForQuestionAnswering]\n\n# All the classes for an architecture can be initiated from pretrained weights for this architecture\n# Note that additional weights added for fine-tuning are only initialized\n# and need to be trained on the down-stream task\npretrained_weights = \'bert-base-uncased\'\ntokenizer = BertTokenizer.from_pretrained(pretrained_weights)\nfor model_class in BERT_MODEL_CLASSES:\n    # Load pretrained model/tokenizer\n    model = model_class.from_pretrained(pretrained_weights)\n\n    # Models can return full list of hidden-states & attentions weights at each layer\n    model = model_class.from_pretrained(pretrained_weights,\n                                        output_hidden_states=True,\n                                        output_attentions=True)\n    input_ids = torch.tensor([tokenizer.encode("Let\'s see all hidden-states and attentions on this text")])\n    all_hidden_states, all_attentions = model(input_ids)[-2:]\n\n    # Models are compatible with Torchscript\n    model = model_class.from_pretrained(pretrained_weights, torchscript=True)\n    traced_model = torch.jit.trace(model, (input_ids,))\n\n    # Simple serialization for models and tokenizers\n    model.save_pretrained(\'./directory/to/save/\')  # save\n    model = model_class.from_pretrained(\'./directory/to/save/\')  # re-load\n    tokenizer.save_pretrained(\'./directory/to/save/\')  # save\n    tokenizer = BertTokenizer.from_pretrained(\'./directory/to/save/\')  # re-load\n\n    # SOTA examples for GLUE, SQUAD, text generation...\n```\n\n## Quick tour TF 2.0 training and PyTorch interoperability\n\nLet\'s do a quick example of how a TensorFlow 2.0 model can be trained in 12 lines of code with \xf0\x9f\xa4\x97 Transformers and then loaded in PyTorch for fast inspection/tests.\n\n```python\nimport tensorflow as tf\nimport tensorflow_datasets\nfrom transformers import *\n\n# Load dataset, tokenizer, model from pretrained model/vocabulary\ntokenizer = BertTokenizer.from_pretrained(\'bert-base-cased\')\nmodel = TFBertForSequenceClassification.from_pretrained(\'bert-base-cased\')\ndata = tensorflow_datasets.load(\'glue/mrpc\')\n\n# Prepare dataset for GLUE as a tf.data.Dataset instance\ntrain_dataset = glue_convert_examples_to_features(data[\'train\'], tokenizer, max_length=128, task=\'mrpc\')\nvalid_dataset = glue_convert_examples_to_features(data[\'validation\'], tokenizer, max_length=128, task=\'mrpc\')\ntrain_dataset = train_dataset.shuffle(100).batch(32).repeat(2)\nvalid_dataset = valid_dataset.batch(64)\n\n# Prepare training: Compile tf.keras model with optimizer, loss and learning rate schedule \noptimizer = tf.keras.optimizers.Adam(learning_rate=3e-5, epsilon=1e-08, clipnorm=1.0)\nloss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\nmetric = tf.keras.metrics.SparseCategoricalAccuracy(\'accuracy\')\nmodel.compile(optimizer=optimizer, loss=loss, metrics=[metric])\n\n# Train and evaluate using tf.keras.Model.fit()\nhistory = model.fit(train_dataset, epochs=2, steps_per_epoch=115,\n                    validation_data=valid_dataset, validation_steps=7)\n\n# Load the TensorFlow model in PyTorch for inspection\nmodel.save_pretrained(\'./save/\')\npytorch_model = BertForSequenceClassification.from_pretrained(\'./save/\', from_tf=True)\n\n# Quickly test a few predictions - MRPC is a paraphrasing task, let\'s see if our model learned the task\nsentence_0 = "This research was consistent with his findings."\nsentence_1 = "His findings were compatible with this research."\nsentence_2 = "His findings were not compatible with this research."\ninputs_1 = tokenizer.encode_plus(sentence_0, sentence_1, add_special_tokens=True, return_tensors=\'pt\')\ninputs_2 = tokenizer.encode_plus(sentence_0, sentence_2, add_special_tokens=True, return_tensors=\'pt\')\n\npred_1 = pytorch_model(inputs_1[\'input_ids\'], token_type_ids=inputs_1[\'token_type_ids\'])[0].argmax().item()\npred_2 = pytorch_model(inputs_2[\'input_ids\'], token_type_ids=inputs_2[\'token_type_ids\'])[0].argmax().item()\n\nprint("sentence_1 is", "a paraphrase" if pred_1 else "not a paraphrase", "of sentence_0")\nprint("sentence_2 is", "a paraphrase" if pred_2 else "not a paraphrase", "of sentence_0")\n```\n\n## Quick tour of the fine-tuning/usage scripts\n\n**Important**  \nBefore running the fine-tuning scripts, please read the\n[instructions](#run-the-examples) on how to\nsetup your environment to run the examples.\n\nThe library comprises several example scripts with SOTA performances for NLU and NLG tasks:\n\n- `run_glue.py`: an example fine-tuning Bert, XLNet and XLM on nine different GLUE tasks (*sequence-level classification*)\n- `run_squad.py`: an example fine-tuning Bert, XLNet and XLM on the question answering dataset SQuAD 2.0 (*token-level classification*)\n- `run_generation.py`: an example using GPT, GPT-2, CTRL, Transformer-XL and XLNet for conditional language generation\n- other model-specific examples (see the documentation).\n\nHere are three quick usage examples for these scripts:\n\n### `run_glue.py`: Fine-tuning on GLUE tasks for sequence classification\n\nThe [General Language Understanding Evaluation (GLUE) benchmark](https://gluebenchmark.com/) is a collection of nine sentence- or sentence-pair language understanding tasks for evaluating and analyzing natural language understanding systems.\n\nBefore running anyone of these GLUE tasks you should download the\n[GLUE data](https://gluebenchmark.com/tasks) by running\n[this script](https://gist.github.com/W4ngatang/60c2bdb54d156a41194446737ce03e2e)\nand unpack it to some directory `$GLUE_DIR`.\n\nYou should also install the additional packages required by the examples:\n\n```shell\npip install -r ./examples/requirements.txt\n```\n\n```shell\nexport GLUE_DIR=/path/to/glue\nexport TASK_NAME=MRPC\n\npython ./examples/run_glue.py \\\n    --model_type bert \\\n    --model_name_or_path bert-base-uncased \\\n    --task_name $TASK_NAME \\\n    --do_train \\\n    --do_eval \\\n    --do_lower_case \\\n    --data_dir $GLUE_DIR/$TASK_NAME \\\n    --max_seq_length 128 \\\n    --per_gpu_eval_batch_size=8   \\\n    --per_gpu_train_batch_size=8   \\\n    --learning_rate 2e-5 \\\n    --num_train_epochs 3.0 \\\n    --output_dir /tmp/$TASK_NAME/\n```\n\nwhere task name can be one of CoLA, SST-2, MRPC, STS-B, QQP, MNLI, QNLI, RTE, WNLI.\n\nThe dev set results will be present within the text file \'eval_results.txt\' in the specified output_dir. In case of MNLI, since there are two separate dev sets, matched and mismatched, there will be a separate output folder called \'/tmp/MNLI-MM/\' in addition to \'/tmp/MNLI/\'.\n\n#### Fine-tuning XLNet model on the STS-B regression task\n\nThis example code fine-tunes XLNet on the STS-B corpus using parallel training on a server with 4 V100 GPUs.\nParallel training is a simple way to use several GPUs (but is slower and less flexible than distributed training, see below).\n\n```shell\nexport GLUE_DIR=/path/to/glue\n\npython ./examples/run_glue.py \\\n    --model_type xlnet \\\n    --model_name_or_path xlnet-large-cased \\\n    --do_train  \\\n    --do_eval   \\\n    --task_name=sts-b     \\\n    --data_dir=${GLUE_DIR}/STS-B  \\\n    --output_dir=./proc_data/sts-b-110   \\\n    --max_seq_length=128   \\\n    --per_gpu_eval_batch_size=8   \\\n    --per_gpu_train_batch_size=8   \\\n    --gradient_accumulation_steps=1 \\\n    --max_steps=1200  \\\n    --model_name=xlnet-large-cased   \\\n    --overwrite_output_dir   \\\n    --overwrite_cache \\\n    --warmup_steps=120\n```\n\nOn this machine we thus have a batch size of 32, please increase `gradient_accumulation_steps` to reach the same batch size if you have a smaller machine. These hyper-parameters should result in a Pearson correlation coefficient of `+0.917` on the development set.\n\n#### Fine-tuning Bert model on the MRPC classification task\n\nThis example code fine-tunes the Bert Whole Word Masking model on the Microsoft Research Paraphrase Corpus (MRPC) corpus using distributed training on 8 V100 GPUs to reach a F1 > 92.\n\n```bash\npython -m torch.distributed.launch --nproc_per_node 8 ./examples/run_glue.py   \\\n    --model_type bert \\\n    --model_name_or_path bert-large-uncased-whole-word-masking \\\n    --task_name MRPC \\\n    --do_train   \\\n    --do_eval   \\\n    --do_lower_case   \\\n    --data_dir $GLUE_DIR/MRPC/   \\\n    --max_seq_length 128   \\\n    --per_gpu_eval_batch_size=8   \\\n    --per_gpu_train_batch_size=8   \\\n    --learning_rate 2e-5   \\\n    --num_train_epochs 3.0  \\\n    --output_dir /tmp/mrpc_output/ \\\n    --overwrite_output_dir   \\\n    --overwrite_cache \\\n```\n\nTraining with these hyper-parameters gave us the following results:\n\n```bash\n  acc = 0.8823529411764706\n  acc_and_f1 = 0.901702786377709\n  eval_loss = 0.3418912578906332\n  f1 = 0.9210526315789473\n  global_step = 174\n  loss = 0.07231863956341798\n```\n\n### `run_squad.py`: Fine-tuning on SQuAD for question-answering\n\nThis example code fine-tunes BERT on the SQuAD dataset using distributed training on 8 V100 GPUs and Bert Whole Word Masking uncased model to reach a F1 > 93 on SQuAD:\n\n```bash\npython -m torch.distributed.launch --nproc_per_node=8 ./examples/run_squad.py \\\n    --model_type bert \\\n    --model_name_or_path bert-large-uncased-whole-word-masking \\\n    --do_train \\\n    --do_eval \\\n    --do_lower_case \\\n    --train_file $SQUAD_DIR/train-v1.1.json \\\n    --predict_file $SQUAD_DIR/dev-v1.1.json \\\n    --learning_rate 3e-5 \\\n    --num_train_epochs 2 \\\n    --max_seq_length 384 \\\n    --doc_stride 128 \\\n    --output_dir ../models/wwm_uncased_finetuned_squad/ \\\n    --per_gpu_eval_batch_size=3   \\\n    --per_gpu_train_batch_size=3   \\\n```\n\nTraining with these hyper-parameters gave us the following results:\n\n```bash\npython $SQUAD_DIR/evaluate-v1.1.py $SQUAD_DIR/dev-v1.1.json ../models/wwm_uncased_finetuned_squad/predictions.json\n{"exact_match": 86.91579943235573, "f1": 93.1532499015869}\n```\n\nThis is the model provided as `bert-large-uncased-whole-word-masking-finetuned-squad`.\n\n### `run_generation.py`: Text generation with GPT, GPT-2, CTRL, Transformer-XL and XLNet\n\nA conditional generation script is also included to generate text from a prompt.\nThe generation script includes the [tricks](https://github.com/rusiaaman/XLNet-gen#methodology) proposed by Aman Rusia to get high-quality generation with memory models like Transformer-XL and XLNet (include a predefined text to make short inputs longer).\n\nHere is how to run the script with the small version of OpenAI GPT-2 model:\n\n```shell\npython ./examples/run_generation.py \\\n    --model_type=gpt2 \\\n    --length=20 \\\n    --model_name_or_path=gpt2 \\\n```\n\nand from the Salesforce CTRL model: \n```shell\npython ./examples/run_generation.py \\\n    --model_type=ctrl \\\n    --length=20 \\\n    --model_name_or_path=ctrl \\\n    --temperature=0 \\\n    --repetition_penalty=1.2 \\\n```\n\n## Migrating from pytorch-transformers to transformers\n\nHere is a quick summary of what you should take care of when migrating from `pytorch-transformers` to `transformers`.\n\n### Positional order of some models\' keywords inputs (`attention_mask`, `token_type_ids`...) changed\n\nTo be able to use Torchscript (see #1010, #1204 and #1195) the specific order of some models **keywords inputs** (`attention_mask`, `token_type_ids`...) has been changed.\n\nIf you used to call the models with keyword names for keyword arguments, e.g. `model(inputs_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)`, this should not cause any change.\n\nIf you used to call the models with positional inputs for keyword arguments, e.g. `model(inputs_ids, attention_mask, token_type_ids)`, you may have to double check the exact order of input arguments.\n\n\n## Migrating from pytorch-pretrained-bert to transformers\n\nHere is a quick summary of what you should take care of when migrating from `pytorch-pretrained-bert` to `transformers`.\n\n### Models always output `tuples`\n\nThe main breaking change when migrating from `pytorch-pretrained-bert` to `transformers` is that every model\'s forward method always outputs a `tuple` with various elements depending on the model and the configuration parameters.\n\nThe exact content of the tuples for each model is detailed in the models\' docstrings and the [documentation](https://huggingface.co/transformers/).\n\nIn pretty much every case, you will be fine by taking the first element of the output as the output you previously used in `pytorch-pretrained-bert`.\n\nHere is a `pytorch-pretrained-bert` to `transformers` conversion example for a `BertForSequenceClassification` classification model:\n\n```python\n# Let\'s load our model\nmodel = BertForSequenceClassification.from_pretrained(\'bert-base-uncased\')\n\n# If you used to have this line in pytorch-pretrained-bert:\nloss = model(input_ids, labels=labels)\n\n# Now just use this line in transformers to extract the loss from the output tuple:\noutputs = model(input_ids, labels=labels)\nloss = outputs[0]\n\n# In transformers you can also have access to the logits:\nloss, logits = outputs[:2]\n\n# And even the attention weights if you configure the model to output them (and other outputs too, see the docstrings and documentation)\nmodel = BertForSequenceClassification.from_pretrained(\'bert-base-uncased\', output_attentions=True)\noutputs = model(input_ids, labels=labels)\nloss, logits, attentions = outputs\n```\n\n### Using hidden states\n\nBy enabling the configuration option `output_hidden_states`, it was possible to retrieve the last hidden states of the encoder. In `pytorch-transformers` as well as `transformers` the return value has changed slightly: `all_hidden_states` now also includes the hidden state of the embeddings in addition to those of the encoding layers. This allows users to easily access the embeddings final state.\n\n### Serialization\n\nBreaking change in the `from_pretrained()` method:\n\n1. Models are now set in evaluation mode by default when instantiated with the `from_pretrained()` method. To train them, don\'t forget to set them back in training mode (`model.train()`) to activate the dropout modules.\n\n2. The additional `*input` and `**kwargs` arguments supplied to the `from_pretrained()` method used to be directly passed to the underlying model\'s class `__init__()` method. They are now used to update the model configuration attribute instead, which can break derived model classes built based on the previous `BertForSequenceClassification` examples. We are working on a way to mitigate this breaking change in [#866](https://github.com/huggingface/transformers/pull/866) by forwarding the the model\'s `__init__()` method (i) the provided positional arguments and (ii) the keyword arguments which do not match any configuration class attributes.\n\nAlso, while not a breaking change, the serialization methods have been standardized and you probably should switch to the new method `save_pretrained(save_directory)` if you were using any other serialization method before.\n\nHere is an example:\n\n```python\n### Let\'s load a model and tokenizer\nmodel = BertForSequenceClassification.from_pretrained(\'bert-base-uncased\')\ntokenizer = BertTokenizer.from_pretrained(\'bert-base-uncased\')\n\n### Do some stuff to our model and tokenizer\n# Ex: add new tokens to the vocabulary and embeddings of our model\ntokenizer.add_tokens([\'[SPECIAL_TOKEN_1]\', \'[SPECIAL_TOKEN_2]\'])\nmodel.resize_token_embeddings(len(tokenizer))\n# Train our model\ntrain(model)\n\n### Now let\'s save our model and tokenizer to a directory\nmodel.save_pretrained(\'./my_saved_model_directory/\')\ntokenizer.save_pretrained(\'./my_saved_model_directory/\')\n\n### Reload the model and the tokenizer\nmodel = BertForSequenceClassification.from_pretrained(\'./my_saved_model_directory/\')\ntokenizer = BertTokenizer.from_pretrained(\'./my_saved_model_directory/\')\n```\n\n### Optimizers: BertAdam & OpenAIAdam are now AdamW, schedules are standard PyTorch schedules\n\nThe two optimizers previously included, `BertAdam` and `OpenAIAdam`, have been replaced by a single `AdamW` optimizer which has a few differences:\n\n- it only implements weights decay correction,\n- schedules are now externals (see below),\n- gradient clipping is now also external (see below).\n\nThe new optimizer `AdamW` matches PyTorch `Adam` optimizer API and let you use standard PyTorch or apex methods for the schedule and clipping.\n\nThe schedules are now standard [PyTorch learning rate schedulers](https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate) and not part of the optimizer anymore.\n\nHere is a conversion examples from `BertAdam` with a linear warmup and decay schedule to `AdamW` and the same schedule:\n\n```python\n# Parameters:\nlr = 1e-3\nmax_grad_norm = 1.0\nnum_training_steps = 1000\nnum_warmup_steps = 100\nwarmup_proportion = float(num_warmup_steps) / float(num_training_steps)  # 0.1\n\n### Previously BertAdam optimizer was instantiated like this:\noptimizer = BertAdam(model.parameters(), lr=lr, schedule=\'warmup_linear\', warmup=warmup_proportion, t_total=num_training_steps)\n### and used like this:\nfor batch in train_data:\n    loss = model(batch)\n    loss.backward()\n    optimizer.step()\n\n### In Transformers, optimizer and schedules are splitted and instantiated like this:\noptimizer = AdamW(model.parameters(), lr=lr, correct_bias=False)  # To reproduce BertAdam specific behavior set correct_bias=False\nscheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=num_warmup_steps, num_training_steps=num_training_steps)  # PyTorch scheduler\n### and used like this:\nfor batch in train_data:\n    model.train()\n    loss = model(batch)\n    loss.backward()\n    torch.nn.utils.clip_grad_norm_(model.parameters(), max_grad_norm)  # Gradient clipping is not in AdamW anymore (so you can use amp without issue)\n    optimizer.step()\n    scheduler.step()\n    optimizer.zero_grad()\n```\n\n## Citation\n\nWe now have a paper you can cite for the \xf0\x9f\xa4\x97 Transformers library:\n```\n@article{Wolf2019HuggingFacesTS,\n  title={HuggingFace\'s Transformers: State-of-the-art Natural Language Processing},\n  author={Thomas Wolf and Lysandre Debut and Victor Sanh and Julien Chaumond and Clement Delangue and Anthony Moi and Pierric Cistac and Tim Rault and R\'emi Louf and Morgan Funtowicz and Jamie Brew},\n  journal={ArXiv},\n  year={2019},\n  volume={abs/1910.03771}\n}\n```\n'