b'# prose [![Build Status](https://travis-ci.org/jdkato/prose.svg?branch=master)](https://travis-ci.org/jdkato/prose) [![fuzzit](https://app.fuzzit.dev/badge?org_id=prose=master)](https://fuzzit.dev) [![GoDoc](https://godoc.org/github.com/golang/gddo?status.svg)](https://godoc.org/gopkg.in/jdkato/prose.v2) [![Coverage Status](https://coveralls.io/repos/github/jdkato/prose/badge.svg?branch=master)](https://coveralls.io/github/jdkato/prose?branch=v2) [![Go Report Card](https://goreportcard.com/badge/github.com/jdkato/prose)](https://goreportcard.com/report/github.com/jdkato/prose) [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/avelino/awesome-go#natural-language-processing)\n\n`prose` is a natural language processing library (English only) in *pure Go*. It supports tokenization, segmentation, part-of-speech tagging, and named-entity extraction.\n\nYou can find a more detailed summary on the library\'s performance here: [Introducing `prose` v2.0.0: Bringing NLP *to Go*](https://medium.com/@errata.ai/introducing-prose-v2-0-0-bringing-nlp-to-go-a1f0c121e4a5).\n\n> **NOTE**: If you\'re looking for v1.0.0\'s README, you can still [find it here](https://github.com/jdkato/prose/blob/v1/README.md).\n\n## Installation\n\n```console\n$ go get gopkg.in/jdkato/prose.v2\n```\n\n## Usage\n\n### Contents\n\n* [Overview](#overview)\n* [Tokenizing](#tokenizing)\n* [Segmenting](#segmenting)\n* [Tagging](#tagging)\n* [NER](#ner)\n\n### Overview\n\n\n```go\npackage main\n\nimport (\n    "fmt"\n    "log"\n\n    "gopkg.in/jdkato/prose.v2"\n)\n\nfunc main() {\n    // Create a new document with the default configuration:\n    doc, err := prose.NewDocument("Go is an open-source programming language created at Google.")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Iterate over the doc\'s tokens:\n    for _, tok := range doc.Tokens() {\n        fmt.Println(tok.Text, tok.Tag, tok.Label)\n        // Go NNP B-GPE\n        // is VBZ O\n        // an DT O\n        // ...\n    }\n\n    // Iterate over the doc\'s named-entities:\n    for _, ent := range doc.Entities() {\n        fmt.Println(ent.Text, ent.Label)\n        // Go GPE\n        // Google GPE\n    }\n\n    // Iterate over the doc\'s sentences:\n    for _, sent := range doc.Sentences() {\n        fmt.Println(sent.Text)\n        // Go is an open-source programming language created at Google.\n    }\n}\n```\n\nThe document-creation process adheres to the following sequence of steps:\n\n```text\ntokenization -> POS tagging -> NE extraction\n            \\\n             segmentation\n```\n\nEach step may be disabled (assuming later steps aren\'t required) by passing the appropriate [*functional option*](https://godoc.org/gopkg.in/jdkato/prose.v2#DocOpt). To disable named-entity extraction, for example, you\'d do the following:\n\n```go\ndoc, err := prose.NewDocument(\n        "Go is an open-source programming language created at Google.",\n        prose.WithExtraction(false))\n```\n\n### Tokenizing\n\n`prose` includes a tokenizer capable of handling modern text, including the non-word character spans shown below.\n\n| Type            | Example                           |\n|-----------------|-----------------------------------|\n| Email addresses | `Jane.Doe@example.com`            |\n| Hashtags        | `#trending`                       |\n| Mentions        | `@jdkato`                         |\n| URLs            | `https://github.com/jdkato/prose` |\n| Emoticons       | `:-)`, `>:(`, `o_0`, etc.         |\n\n\n```go\npackage main\n\nimport (\n    "fmt"\n    "log"\n\n    "gopkg.in/jdkato/prose.v2"\n)\n\nfunc main() {\n    // Create a new document with the default configuration:\n    doc, err := prose.NewDocument("@jdkato, go to http://example.com thanks :).")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Iterate over the doc\'s tokens:\n    for _, tok := range doc.Tokens() {\n        fmt.Println(tok.Text, tok.Tag)\n        // @jdkato NN\n        // , ,\n        // go VB\n        // to TO\n        // http://example.com NN\n        // thanks NNS\n        // :) SYM\n        // . .\n    }\n}\n```\n\n### Segmenting\n\n`prose` includes one of the most accurate sentence segmenters available according to the [Golden Rules](https://github.com/diasks2/pragmatic_segmenter#comparison-of-segmentation-tools-libraries-and-algorithms) created by the developers of the `pragmatic_segmenter`.\n\n| Name                | Language | License   | GRS (English)  | GRS (Other) | Speed\xe2\x80\xa0   |\n|---------------------|----------|-----------|----------------|-------------|----------|\n| Pragmatic Segmenter | Ruby     | MIT       | 98.08% (51/52) | 100.00%     | 3.84 s   |\n| prose               | Go       | MIT       | 73.07% (38/52) | N/A         | 0.96 s   |\n| TactfulTokenizer    | Ruby     | GNU GPLv3 | 65.38% (34/52) | 48.57%      | 46.32 s  |\n| OpenNLP             | Java     | APLv2     | 59.62% (31/52) | 45.71%      | 1.27 s   |\n| Standford CoreNLP   | Java     | GNU GPLv3 | 59.62% (31/52) | 31.43%      | 0.92 s   |\n| Splitta             | Python   | APLv2     | 55.77% (29/52) | 37.14%      | N/A      |\n| Punkt               | Python   | APLv2     | 46.15% (24/52) | 48.57%      | 1.79 s   |\n| SRX English         | Ruby     | GNU GPLv3 | 30.77% (16/52) | 28.57%      | 6.19 s   |\n| Scapel              | Ruby     | GNU GPLv3 | 28.85% (15/52) | 20.00%      | 0.13 s   |\n\n> \xe2\x80\xa0 The original tests were performed using a *MacBook Pro 3.7 GHz Quad-Core Intel Xeon E5 running 10.9.5*, while `prose` was timed using a *MacBook Pro 2.9 GHz Intel Core i7 running 10.13.3*.\n\n```go\npackage main\n\nimport (\n    "fmt"\n    "strings"\n\n    "gopkg.in/jdkato/prose.v2"\n)\n\nfunc main() {\n    // Create a new document with the default configuration:\n    doc, _ := prose.NewDocument(strings.Join([]string{\n        "I can see Mt. Fuji from here.",\n        "St. Michael\'s Church is on 5th st. near the light."}, " "))\n\n    // Iterate over the doc\'s sentences:\n    sents := doc.Sentences()\n    fmt.Println(len(sents)) // 2\n    for _, sent := range sents {\n        fmt.Println(sent.Text)\n        // I can see Mt. Fuji from here.\n        // St. Michael\'s Church is on 5th st. near the light.\n    }\n}\n```\n\n### Tagging\n\n`prose` includes a tagger based on Textblob\'s ["fast and accurate" POS tagger](https://github.com/sloria/textblob-aptagger). Below is a comparison of its performance against [NLTK](http://www.nltk.org/)\'s implementation of the same tagger on the Treebank corpus:\n\n| Library | Accuracy | 5-Run Average (sec) |\n|:--------|---------:|--------------------:|\n| NLTK    |    0.893 |               7.224 |\n| `prose` |    0.961 |               2.538 |\n\n(See [`scripts/test_model.py`](https://github.com/jdkato/aptag/blob/master/scripts/test_model.py) for more information.)\n\nThe full list of supported POS tags is given below.\n\n| TAG        | DESCRIPTION                               |\n|------------|-------------------------------------------|\n| `(`        | left round bracket                        |\n| `)`        | right round bracket                       |\n| `,`        | comma                                     |\n| `:`        | colon                                     |\n| `.`        | period                                    |\n| `\'\'`       | closing quotation mark                    |\n| ``` `` ``` | opening quotation mark                    |\n| `#`        | number sign                               |\n| `$`        | currency                                  |\n| `CC`       | conjunction, coordinating                 |\n| `CD`       | cardinal number                           |\n| `DT`       | determiner                                |\n| `EX`       | existential there                         |\n| `FW`       | foreign word                              |\n| `IN`       | conjunction, subordinating or preposition |\n| `JJ`       | adjective                                 |\n| `JJR`      | adjective, comparative                    |\n| `JJS`      | adjective, superlative                    |\n| `LS`       | list item marker                          |\n| `MD`       | verb, modal auxiliary                     |\n| `NN`       | noun, singular or mass                    |\n| `NNP`      | noun, proper singular                     |\n| `NNPS`     | noun, proper plural                       |\n| `NNS`      | noun, plural                              |\n| `PDT`      | predeterminer                             |\n| `POS`      | possessive ending                         |\n| `PRP`      | pronoun, personal                         |\n| `PRP$`     | pronoun, possessive                       |\n| `RB`       | adverb                                    |\n| `RBR`      | adverb, comparative                       |\n| `RBS`      | adverb, superlative                       |\n| `RP`       | adverb, particle                          |\n| `SYM`      | symbol                                    |\n| `TO`       | infinitival to                            |\n| `UH`       | interjection                              |\n| `VB`       | verb, base form                           |\n| `VBD`      | verb, past tense                          |\n| `VBG`      | verb, gerund or present participle        |\n| `VBN`      | verb, past participle                     |\n| `VBP`      | verb, non-3rd person singular present     |\n| `VBZ`      | verb, 3rd person singular present         |\n| `WDT`      | wh-determiner                             |\n| `WP`       | wh-pronoun, personal                      |\n| `WP$`      | wh-pronoun, possessive                    |\n| `WRB`      | wh-adverb                                 |\n\n### NER\n\n`prose` v2.0.0 includes a much improved version of v1.0.0\'s chunk package, which can identify people (`PERSON`) and geographical/political Entities (`GPE`) by default.\n\n```go\npackage main\n\nimport (\n    "gopkg.in/jdkato/prose.v2"\n)\n\nfunc main() {\n    doc, _ := prose.NewDocument("Lebron James plays basketball in Los Angeles.")\n    for _, ent := range doc.Entities() {\n        fmt.Println(ent.Text, ent.Label)\n        // Lebron James PERSON\n        // Los Angeles GPE\n    }\n}\n```\n\nHowever, in an attempt to make this feature more useful, we\'ve made it straightforward to train your own models for specific use cases. See [Prodigy + `prose`: Radically efficient machine teaching *in Go*](https://medium.com/@errata.ai/prodigy-prose-radically-efficient-machine-teaching-in-go-93389bf2d772) for a tutorial.\n\n'