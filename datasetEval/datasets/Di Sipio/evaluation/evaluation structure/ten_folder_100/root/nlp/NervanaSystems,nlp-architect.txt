b'<p align="center">\n    <br>\n    <img src="https://raw.githubusercontent.com/NervanaSystems/nlp-architect/master/assets/nlp_architect_logo.png" width="400"/>\n    <br>\n<p>\n<h2 align="center">\nA Deep Learning NLP/NLU library by <a href="https://www.intel.ai/research/">Intel\xc2\xae AI Lab</a>\n</h2>\n<p align="center">\n    <a href="https://github.com/NervanaSystems/nlp-architect/blob/master/LICENSE">\n        <img alt="GitHub" src="https://img.shields.io/github/license/NervanaSystems/nlp-architect.svg?color=blue&style=flat-square">\n    </a>\n    <a href="http://nlp_architect.nervanasys.com">\n        <img alt="Website" src="https://img.shields.io/website/http/nlp_architect.nervanasys.com.svg?down_color=red&down_message=offline&style=flat-square&up_message=online">\n    </a>\n    <a href="https://github.com/NervanaSystems/nlp-architect/blob/master/LICENSE">\n        <img alt="GitHub release" src="https://img.shields.io/github/release/NervanaSystems/nlp-architect.svg?style=flat-square">\n    </a>\n</p>\n\n<h4 align="center">\n  <a href="#overview">Overview</a> |\n  <a href="#models">Models</a> |\n  <a href="#installing-nlp-architect">Installation</a> |\n  <a href="https://github.com/NervanaSystems/nlp-architect/tree/master/examples">Examples</a> <a href="http://nlp_architect.nervanasys.com/"></a> |\n  <a href="http://nlp_architect.nervanasys.com">Documentation</a> |\n  <a href="https://github.com/NervanaSystems/nlp-architect/tree/master/tutorials">Tutorials</a> |\n  <a href="http://nlp_architect.nervanasys.com/developer_guide.html">Contributing</a>\n</h4>\n\nNLP Architect is an open source Python library for exploring state-of-the-art\ndeep learning topologies and techniques for optimizing Natural Language Processing and\nNatural Language Understanding Neural Networks.\n\n## Overview\n\nNLP Architect is an NLP library designed to be flexible, easy to extend, allow for easy and rapid integration of NLP models in applications and to showcase optimized models.\n\nFeatures:\n\n* Core NLP models used in many NLP tasks and useful in many NLP applications\n* Novel NLU models showcasing novel topologies and techniques\n* Optimized NLP/NLU models showcasing different optimization algorithms on neural NLP/NLU models\n* Model-oriented design:\n  * Train and run models from command-line.\n  * API for using models for inference in python.\n  * Procedures to define custom processes for training,    inference or anything related to processing.\n  * CLI sub-system for running procedures\n* Based on optimized Deep Learning frameworks:\n\n  * [TensorFlow]\n  * [PyTorch]\n  * [Intel-Optimized TensorFlow with MKL-DNN]\n  * [Dynet]\n\n* Essential utilities for working with NLP models - Text/String pre-processing, IO, data-manipulation, metrics, embeddings.\n* Plug-able REST API server to serve models via REST API\n\n## Installing NLP Architect\n\nWe recommend to install NLP Architect in a new python environment, to use python 3.6+ with up-to-date `pip`, `setuptools` and `h5py`.\n\n### Install using `pip`\n\nIncludes only core library (for examples, tutorials and the rest clone the repo)\n\n```sh\npip install nlp-architect\n```\n\n### Install from source (Github)\n\n```sh\ngit clone https://github.com/NervanaSystems/nlp-architect.git\ncd nlp-architect\npip install -e .  # install in developer mode\n```\n\n## Models\n\nNLP models that provide best (or near) in class performance:\n\n* [Word chunking](http://nlp_architect.nervanasys.com/tagging/sequence_tagging.html#word-chunker)\n* [Named Entity Recognition](http://nlp_architect.nervanasys.com/tagging/sequence_tagging.html#named-entity-recognition)\n* [Dependency parsing](http://nlp_architect.nervanasys.com/bist_parser.html)\n* [Intent Extraction](http://nlp_architect.nervanasys.com/intent.html)\n* [Sentiment classification](http://nlp_architect.nervanasys.com/sentiment.html#supervised-sentiment)\n* [Language models](http://nlp_architect.nervanasys.com/lm.html#language-modeling-with-tcn)\n* [Transformers](http://nlp_architect.nervanasys.com/transformers.html) (for NLP tasks)\n\nNatural Language Understanding (NLU) models that address semantic understanding:\n\n* [Aspect Based Sentiment Analysis (ABSA)](http://nlp_architect.nervanasys.com/absa.html)\n* [Joint intent detection and slot tagging](http://nlp_architect.nervanasys.com/intent.html)\n* [Noun phrase embedding representation (NP2Vec)](http://nlp_architect.nervanasys.com/np2vec.html)\n* [Most common word sense detection](http://nlp_architect.nervanasys.com/word_sense.html)\n* [Relation identification](http://nlp_architect.nervanasys.com/identifying_semantic_relation.html)\n* [Cross document coreference](http://nlp_architect.nervanasys.com/cross_doc_coref.html)\n* [Noun phrase semantic segmentation](http://nlp_architect.nervanasys.com/np_segmentation.html)\n\nOptimizing NLP/NLU models and misc. optimization techniques:\n\n* [Quantized BERT (8bit)](http://nlp_architect.nervanasys.com/quantized_bert.html)\n* [Knowledge Distillation using Transformers](http://nlp_architect.nervanasys.com/transformers_distillation.html)\n* [Sparse and Quantized Neural Machine Translation (GNMT)](http://nlp_architect.nervanasys.com/sparse_gnmt.html)\n\nSolutions (End-to-end applications) using one or more models:\n\n* [Term Set expansion](http://nlp_architect.nervanasys.com/term_set_expansion.html) - uses the included word chunker as a noun phrase extractor and NP2Vec to create semantic term sets\n* [Topics and trend analysis](http://nlp_architect.nervanasys.com/trend_analysis.html) - analyzing trending phrases in temporal corpora\n* [Aspect Based Sentiment Analysis (ABSA)](http://nlp_architect.nervanasys.com/absa_solution.html)\n\n## Documentation\n\nFull library [documentation](http://nlp_architect.nervanasys.com/) of NLP models, algorithms, solutions and instructions\non how to run each model can be found on our [website](http://nlp_architect.nervanasys.com/).\n\n## NLP Architect library design philosophy\n\nNLP Architect is a _model-oriented_ library designed to showcase novel and different neural network optimizations. The library contains NLP/NLU related models per task, different neural network topologies (which are used in models), procedures for simplifying workflows in the library, pre-defined data processors and dataset loaders and misc utilities.\nThe library is designed to be a tool for model development: data pre-process, build model, train, validate, infer, save or load a model.\n\nThe main design guidelines are:\n\n* Deep Learning framework agnostic\n* NLP/NLU models per task\n* Different topologies used in models\n* Showcase End-to-End applications (Solutions) utilizing one or more NLP Architect model\n* Generic dataset loaders, textual data processing utilities, and miscellaneous utilities that support NLP model development (loaders, text processors, io, metrics, etc.)\n* Procedures for defining processes for training, inference, optimization or any kind of elaborate script.\n* Pythonic API for using models for inference\n* REST API servers with ability to serve trained models via HTTP\n* Extensive model documentation and tutorials\n\n### Note\n\nNLP Architect is an active space of research and development; Throughout future\nreleases new models, solutions, topologies and framework additions and changes\nwill be made. We aim to make sure all models run with Python 3.6+. We\nencourage researchers and developers to contribute their work into the library.\n\n## Citing\n\nIf you use NLP Architect in your research, please use the following citation:\n\n    @misc{izsak_peter_2018_1477518,\n      title        = {NLP Architect by Intel AI Lab},\n      month        = nov,\n      year         = 2018,\n      doi          = {10.5281/zenodo.1477518},\n      url          = {https://doi.org/10.5281/zenodo.1477518}\n    }\n\n## Disclaimer\n\nThe NLP Architect is released as reference code for research purposes. It is\nnot an official Intel product, and the level of quality and support may not be\nas expected from an official product. NLP Architect is intended to be used\nlocally and has not been designed, developed or evaluated for production\nusage or web-deployment. Additional algorithms and environments are planned\nto be added to the framework. Feedback and contributions from the open source\nand NLP research communities are more than welcome.\n\n## Contact\nContact the NLP Architect development team through Github issues or\nemail: nlp_architect@intel.com\n\n[documentation]:http://nlp_architect.nervanasys.com\n[Intel-Optimized TensorFlow with MKL-DNN]:https://software.intel.com/en-us/articles/intel-optimized-tensorflow-wheel-now-available\n[TensorFlow]:https://www.tensorflow.org/\n[PyTorch]:https://pytorch.org/\n[Dynet]:https://dynet.readthedocs.io/en/latest/\n'