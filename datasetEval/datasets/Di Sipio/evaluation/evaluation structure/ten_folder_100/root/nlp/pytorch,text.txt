b'.. image:: https://travis-ci.org/pytorch/text.svg?branch=master\n    :target: https://travis-ci.org/pytorch/text\n\n.. image:: https://codecov.io/gh/pytorch/text/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/pytorch/text\n\n.. image:: https://img.shields.io/badge/dynamic/json.svg?label=docs&url=https%3A%2F%2Fpypi.org%2Fpypi%2Ftorchtext%2Fjson&query=%24.info.version&colorB=brightgreen&prefix=v\n    :target: https://pytorch.org/text/\n\ntorchtext\n+++++++++\n\nThis repository consists of:\n\n* `torchtext.data <#data>`_: Generic data loaders, abstractions, and iterators for text (including vocabulary and word vectors)\n* `torchtext.datasets <#datasets>`_: Pre-built loaders for common NLP datasets\n\nInstallation\n============\n\n\nMake sure you have Python 2.7 or 3.5+ and PyTorch 0.4.0 or newer. You can then install torchtext using pip::\n\n    pip install torchtext\n    \nFor PyTorch versions before 0.4.0, please use `pip install torchtext==0.2.3`.\n\nOptional requirements\n---------------------\n\nIf you want to use English tokenizer from `SpaCy <http://spacy.io/>`_, you need to install SpaCy and download its English model::\n\n    pip install spacy\n    python -m spacy download en\n\nAlternatively, you might want to use the `Moses <http://www.statmt.org/moses/>`_ tokenizer port in `SacreMoses <https://github.com/alvations/sacremoses>`_ (split from `NLTK <http://nltk.org/>`_). You have to install SacreMoses::\n\n    pip install sacremoses\n\nDocumentation\n=============\n\nFind the documentation `here <https://pytorch.org/text/>`_.\n\nData\n====\n\nThe data module provides the following:\n\n* Ability to describe declaratively how to load a custom NLP dataset that\'s in a "normal" format:\n\n  .. code-block:: python\n\n      >>> pos = data.TabularDataset(\n      ...    path=\'data/pos/pos_wsj_train.tsv\', format=\'tsv\',\n      ...    fields=[(\'text\', data.Field()),\n      ...            (\'labels\', data.Field())])\n      ...\n      >>> sentiment = data.TabularDataset(\n      ...    path=\'data/sentiment/train.json\', format=\'json\',\n      ...    fields={\'sentence_tokenized\': (\'text\', data.Field(sequential=True)),\n      ...            \'sentiment_gold\': (\'labels\', data.Field(sequential=False))})\n\n* Ability to define a preprocessing pipeline:\n\n  .. code-block:: python\n\n      >>> src = data.Field(tokenize=my_custom_tokenizer)\n      >>> trg = data.Field(tokenize=my_custom_tokenizer)\n      >>> mt_train = datasets.TranslationDataset(\n      ...     path=\'data/mt/wmt16-ende.train\', exts=(\'.en\', \'.de\'),\n      ...     fields=(src, trg))\n\n* Batching, padding, and numericalizing (including building a vocabulary object):\n\n  .. code-block:: python\n\n      >>> # continuing from above\n      >>> mt_dev = datasets.TranslationDataset(\n      ...     path=\'data/mt/newstest2014\', exts=(\'.en\', \'.de\'),\n      ...     fields=(src, trg))\n      >>> src.build_vocab(mt_train, max_size=80000)\n      >>> trg.build_vocab(mt_train, max_size=40000)\n      >>> # mt_dev shares the fields, so it shares their vocab objects\n      >>>\n      >>> train_iter = data.BucketIterator(\n      ...     dataset=mt_train, batch_size=32,\n      ...     sort_key=lambda x: data.interleave_keys(len(x.src), len(x.trg)))\n      >>> # usage\n      >>> next(iter(train_iter))\n      <data.Batch(batch_size=32, src=[LongTensor (32, 25)], trg=[LongTensor (32, 28)])>\n\n* Wrapper for dataset splits (train, validation, test):\n\n  .. code-block:: python\n\n      >>> TEXT = data.Field()\n      >>> LABELS = data.Field()\n      >>>\n      >>> train, val, test = data.TabularDataset.splits(\n      ...     path=\'/data/pos_wsj/pos_wsj\', train=\'_train.tsv\',\n      ...     validation=\'_dev.tsv\', test=\'_test.tsv\', format=\'tsv\',\n      ...     fields=[(\'text\', TEXT), (\'labels\', LABELS)])\n      >>>\n      >>> train_iter, val_iter, test_iter = data.BucketIterator.splits(\n      ...     (train, val, test), batch_sizes=(16, 256, 256),\n      >>>     sort_key=lambda x: len(x.text), device=0)\n      >>>\n      >>> TEXT.build_vocab(train)\n      >>> LABELS.build_vocab(train)\n\nDatasets\n========\n\nThe datasets module currently contains:\n\n* Sentiment analysis: SST and IMDb\n* Question classification: TREC\n* Entailment: SNLI, MultiNLI\n* Language modeling: abstract class + WikiText-2, WikiText103, PennTreebank\n* Machine translation: abstract class + Multi30k, IWSLT, WMT14\n* Sequence tagging (e.g. POS/NER): abstract class + UDPOS, CoNLL2000Chunking\n* Question answering: 20 QA bAbI tasks\n* Text classification: AG_NEWS, SogouNews, DBpedia, YelpReviewPolarity, YelpReviewFull, YahooAnswers, AmazonReviewPolarity, AmazonReviewFull\n\nOthers are planned or a work in progress:\n\n* Question answering: SQuAD\n\nSee the ``test`` directory for examples of dataset usage.\n\nLegacy Code\n===========\n\nWe have currently retired several datasets and moved them under ```torchtext.legacy```:\n\n* Sentiment analysis: IMDb\n* Language modeling: abstract class + WikiText-2, WikiText103, PennTreebank\n\nThese datasets are re-written with a new pattern that is introduced in `Release v0.5.0 <https://github.com/pytorch/text/releases>`_.\n\nDisclaimer on Datasets\n======================\n\nThis is a utility library that downloads and prepares public datasets. We do not host or distribute these datasets, vouch for their quality or fairness, or claim that you have license to use the dataset. It is your responsibility to determine whether you have permission to use the dataset under the dataset\'s license.\n\nIf you\'re a dataset owner and wish to update any part of it (description, citation, etc.), or do not want your dataset to be included in this library, please get in touch through a GitHub issue. Thanks for your contribution to the ML community!\n'