b'# gse\r\n\r\nGo efficient text segmentation; support english, chinese, japanese and other.\r\n\r\n<!--<img align="right" src="https://raw.githubusercontent.com/go-ego/ego/master/logo.jpg">-->\r\n<!--<a href="https://circleci.com/gh/go-ego/ego/tree/dev"><img src="https://img.shields.io/circleci/project/go-ego/ego/dev.svg" alt="Build Status"></a>-->\r\n[![CircleCI Status](https://circleci.com/gh/go-ego/gse.svg?style=shield)](https://circleci.com/gh/go-ego/gse)\r\n[![codecov](https://codecov.io/gh/go-ego/gse/branch/master/graph/badge.svg)](https://codecov.io/gh/go-ego/gse)\r\n[![Build Status](https://travis-ci.org/go-ego/gse.svg)](https://travis-ci.org/go-ego/gse)\r\n[![Go Report Card](https://goreportcard.com/badge/github.com/go-ego/gse)](https://goreportcard.com/report/github.com/go-ego/gse)\r\n[![GoDoc](https://godoc.org/github.com/go-ego/gse?status.svg)](https://godoc.org/github.com/go-ego/gse)\r\n[![GitHub release](https://img.shields.io/github/release/go-ego/gse.svg)](https://github.com/go-ego/gse/releases/latest)\r\n[![Join the chat at https://gitter.im/go-ego/ego](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/go-ego/ego?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n<!-- [![Release](https://github-release-version.herokuapp.com/github/go-ego/gse/release.svg?style=flat)](https://github.com/go-ego/gse/releases/latest) -->\r\n<!--<a href="https://github.com/go-ego/ego/releases"><img src="https://img.shields.io/badge/%20version%20-%206.0.0%20-blue.svg?style=flat-square" alt="Releases"></a>-->\r\n\r\n[\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87](https://github.com/go-ego/gse/blob/master/README_zh.md)\r\n\r\n<a href="https://github.com/go-ego/gse/blob/master/dictionary.go">Dictionary </a> with double array trie (Double-Array Trie) to achieve,\r\n<a href="https://github.com/go-ego/gse/blob/master/segmenter.go">Sender </a> algorithm is the shortest path based on word frequency plus dynamic programming, and DAG and HMM algorithm word segmentation.\r\n\r\nSupport common, search engine, full mode, precise mode and HMM mode multiple word segmentation modes, support user dictionary, POS tagging, run<a href="https://github.com/go-ego/gse/blob/master/server/server.go"> JSON RPC service</a>.\r\n\r\nSupport HMM cut text use Viterbi algorithm.\r\n\r\nText Segmentation speed<a href="https://github.com/go-ego/gse/blob/master/benchmark/benchmark.go"> single thread</a> 9.2MB/s\xef\xbc\x8c<a href="https://github.com/go-ego/gse/blob/master/benchmark/goroutines/goroutines.go">goroutines concurrent</a> 26.8MB/s. HMM text segmentation single thread 3.2MB/s. (2core 4threads Macbook Pro).\r\n\r\n## Binding:\r\n\r\n[gse-bind](https://github.com/vcaesar/gse-bind), binding JavaScript and other, support more language.\r\n\r\n## Install / update\r\n\r\n```\r\ngo get -u github.com/go-ego/gse\r\n```\r\n\r\n## [Build-tools](https://github.com/go-ego/re)\r\n```\r\ngo get -u github.com/go-ego/re\r\n```\r\n\r\n### re gse\r\nTo create a new gse application\r\n\r\n```\r\n$ re gse my-gse\r\n```\r\n\r\n### re run\r\n\r\nTo run the application we just created, you can navigate to the application folder and execute:\r\n```\r\n$ cd my-gse && re run\r\n```\r\n\r\n## Use\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t"fmt"\r\n\r\n\t"github.com/go-ego/gse"\r\n)\r\n\r\nvar (\r\n\ttext = "\xe4\xbd\xa0\xe5\xa5\xbd\xe4\xb8\x96\xe7\x95\x8c, Hello world."\r\n\r\n\tseg gse.Segmenter\r\n)\r\n\r\nfunc cut() {\r\n\thmm := seg.Cut(text, true)\r\n\tfmt.Println("cut use hmm: ", hmm)\r\n\r\n\thmm = seg.CutSearch(text, true)\r\n\tfmt.Println("cut search use hmm: ", hmm)\r\n\r\n\thmm = seg.CutAll(text)\r\n\tfmt.Println("cut all: ", hmm)\r\n}\r\n\r\nfunc segCut() {\r\n\t// Text Segmentation\r\n\ttb := []byte(text)\r\n\tfmt.Println(seg.String(tb, true))\r\n\r\n\tsegments := seg.Segment(tb)\r\n\r\n\t// Handle word segmentation results\r\n\t// Support for normal mode and search mode two participle,\r\n\t// see the comments in the code ToString function.\r\n\t// The search mode is mainly used to provide search engines\r\n\t// with as many keywords as possible\r\n\tfmt.Println(gse.ToString(segments, true))\r\n}\r\n\r\nfunc main() {\r\n\t// Loading the default dictionary\r\n\tseg.LoadDict()\r\n\t// Load the dictionary\r\n\t// seg.LoadDict("your gopath"+"/src/github.com/go-ego/gse/data/dict/dictionary.txt")\r\n\r\n\tcut()\r\n\r\n\tsegCut()\r\n}\r\n\r\n```\r\n\r\n[Look at an custom dictionary example](/examples/dict/main.go)\r\n\r\n```Go\r\npackage main\r\n\r\nimport (\r\n\t"fmt"\r\n\r\n\t"github.com/go-ego/gse"\r\n)\r\n\r\nfunc main() {\r\n\tvar seg gse.Segmenter\r\n\tseg.LoadDict("zh,testdata/test_dict.txt,testdata/test_dict1.txt")\r\n\r\n\ttext1 := []byte("\xe4\xbd\xa0\xe5\xa5\xbd\xe4\xb8\x96\xe7\x95\x8c, Hello world")\r\n\tfmt.Println(seg.String(text1, true))\r\n\r\n\tsegments := seg.Segment(text1)\r\n\tfmt.Println(gse.ToString(segments))\r\n}\r\n```\r\n\r\n[Look at an Chinese example](https://github.com/go-ego/gse/blob/master/examples/example.go)\r\n\r\n[Look at an Japanese example](https://github.com/go-ego/gse/blob/master/examples/jp/main.go)\r\n\r\n## Authors\r\n* [The author is vz](https://github.com/vcaesar)\r\n* [Maintainers](https://github.com/orgs/go-ego/people)\r\n* [Contributors](https://github.com/go-ego/gse/graphs/contributors)\r\n\r\n## License\r\n\r\nGse is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), thanks for [sego](https://github.com/huichen/sego) and [jieba](https://github.com/fxsjy/jieba).\r\n'