b'# Advanced NLP with spaCy: A free online course\n\nThis repo contains both an [**online course**](https://course.spacy.io), as well\nas a modern web framework for **building online courses** with interactive code,\nslides and multiple-choice questions. In the course, you\'ll learn how to use\n[spaCy](https://spacy.io) to build advanced natural language understanding\nsystems, using both rule-based and machine learning approaches.\n\nI originally developed the content for DataCamp, but I wanted to make a free\nversion so you don\'t have to sign up for their service. As a weekend project, I\nended up putting together my own little app to present the exercises and content\nin a fun and interactive way. The front-end is powered by\n[Gatsby](http://gatsbyjs.org/) and [Reveal.js](https://revealjs.com) and the\nback-end code execution uses [Binder](https://mybinder.org) \xf0\x9f\x92\x96\n\n_This course is mostly intended for **self-study**. Yes, you can cheat \xe2\x80\x93 the\nsolutions are all in this repo, there\'s no penalty for clicking "Show hints" or\n"Show solution", and you can mark an exercise as done when you think it\'s done._\n\n[![Azure Pipelines](https://img.shields.io/azure-devops/build/explosion-ai/public/10/master.svg?logo=azure-devops&style=flat-square)](https://dev.azure.com/explosion-ai/public/_build?definitionId=10)\n![Netlify Status](https://api.netlify.com/api/v1/badges/2eae6a1a-d7a3-437e-a700-61e32d7d991b/deploy-status)\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/ines/spacy-course/master)\n\n## \xe2\x9c\xa8 Features\n\n- Supports **slides**, **interactive code exercises** and **multiple-choice\n  questions** pretty much out-of-the-box.\n- Executes code live and validates user submissions with tests functions using\n  Jupyter kernels via Binder.\n- Allows authoring content in 100% Markdown with custom elements.\n- Uses the `localStorage` to keep track of which exercises were already (marked\n  as) completed.\n- Runs super fast thanks to Gatsby and uses all the hip and modern web stuff\n  like React Hooks, GraphQL and service workers under the hood.\n- Is open-source and published under the MIT license (code and framework) and CC\n  BY-NC (spaCy course materials).\n\n### Related resources\n\n- \xf0\x9f\x93\x9a **Prefer notebooks?** Check out [the Jupyter notebook version](https://github.com/cristianasp/spacy) of this course, put together by [@cristianasp](https://github.com/cristianasp).\n\n### Starter repos for your own course\n\n- \xf0\x9f\x90\x8d Python:\n  [`ines/course-starter-python`](https://github.com/ines/course-starter-python)\n- \xf0\x9f\x87\xb7 R: [`ines/course-starter-r`](https://github.com/ines/course-starter-r)\n\n## \xf0\x9f\x92\x81 FAQ\n\n**So should I not take your DataCamp course anymore?** Probably not, no.\n\n**Can I use this to build my own course?** Probably, yes! If you\'ve been looking\nfor a DIY way to publish your materials, I hope that my little framework can be\nuseful. Because so many people expressed interest in this, I put together some\n[starter repos](#starter-repos-for-your-own-course) that you can fork and adapt.\n\n**Why the different licenses?** The source of the app, UI components and Gatsby\nframework for building interactive courses is licensed as MIT, like pretty much\nall of my open-source software. The course materials themselves (slides and\nchapters), are licensed under CC BY-NC. This means that you can use them freely\n\xe2\x80\x93 you just can\'t make money off them.\n\n## \xf0\x9f\x8e\x9b Usage & API\n\nI mostly built this project for my own course, but it should be very easy to\nfork and adapt. I made sure to strictly separate the content and the app\nfunctionality and source. So if you want to fork the repo and create your own\ncourse, you should only have to edit the chapters, exercises and `meta.json`,\nupdate the visual assets in `/static` and optionally adjust the theme colours.\nIn theory, it should even work for languages other than Python \xe2\x80\x93 but I haven\'t\ntested this yet. You can then build your repo with\n[Binder](https://mybinder.org) and deploy it via something like\n[Netlify](https://netlify.com).\n\n### How it works\n\nWhen building the site, Gatsby will look for `.py` files and make their contents\navailable to query via GraphQL. This lets us use the raw code within the app.\nUnder the hood, the app uses [Binder](https://mybinder.org) to serve up an image\nwith the package dependencies, including the spaCy models. By calling into\n[JupyterLab](https://jupyterlab.readthedocs.io/en/stable/), we can then execute\ncode using the active kernel. This lets you edit the code in the browser and see\nthe live results. Also see my [`juniper`](https://github.com/ines/juniper) repo\nfor more details on the implementation.\n\nTo validate the code when the user hits "Submit", I\'m currently using a slightly\nhacky trick. Since the Python code is sent back to the kernel as a string, we\ncan manipulate it and add tests \xe2\x80\x93 for example, exercise `exc_01_02_01.py` will\nbe validated using `test_01_02_01.py` (if available). The user code and test are\ncombined using a string template. At the moment, the `testTemplate` in the\n`meta.json` looks like this:\n\n```\nfrom wasabi import Printer\n__msg__ = Printer()\n__solution__ = """${solution}"""\n${solution}\n\n${test}\ntry:\n    test()\nexcept AssertionError as e:\n    __msg__.fail(e)\n```\n\nIf present, `${solution}` will be replaced with the string value of the\nsubmitted user code. In this case, we\'re inserting it twice: once as a string so\nwe can check whether the submission includes something, and once as the code, so\nwe can actually run it and check the objects it creates. `${test}` is replaced\nby the contents of the test file. I\'m also making\n[`wasabi`](https://github.com/ines/wasabi)\'s printer available as `__msg__`, so\nwe can easily print pretty messages in the tests. Finally, the `try`/`accept`\nblock checks if the test function raises an `AssertionError` and if so, displays\nthe error message. This also hides the full error traceback (which can easily\nleak the correct answers).\n\nA test file could then look like this:\n\n```python\ndef test():\n    assert "spacy.load" in __solution__, "Are you calling spacy.load?"\n    assert nlp.meta["lang"] == "en", "Are you loading the correct model?"\n    assert nlp.meta["name"] == "core_web_sm", "Are you loading the correct model?"\n    assert "nlp(text)" in __solution__, "Are you processing the text correctly?"\n    assert "print(doc.text)" in __solution__, "Are you printing the Doc\'s text?"\n\n    __msg__.good(\n        "Well done! Now that you\'ve practiced loading models, let\'s look at "\n        "some of their predictions."\n    )\n```\n\nWith this approach, it\'s not _always_ possible to validate the input perfectly \xe2\x80\x93\nthere are too many options and we want to avoid false positives.\n\n#### Running automated tests\n\nThe automated tests make sure that the provided solution code is compatible with\nthe test file that\'s used to validate submissions. The test suite is powered by\nthe [`pytest`](https://docs.pytest.org/en/latest/) framework and runnable test\nfiles are generated automatically in a directory `__tests__` before the test\nsession starts. See the [`conftest.py`](conftest.py) for implementation details.\n\n```bash\n# Install requirements\npip install -r binder/requirements.txt\n# Run the tests (will generate the files automatically)\npython -m pytest __tests__\n```\n\n### Directory Structure\n\n```yaml\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 binder\n|   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 requirements.txt  # Python dependency requirements for Binder\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 chapters              # chapters, one Markdown file per chapter\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 exercises             # code files, tests and assets for exercises\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 public                # compiled site\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 slides                # slides, one Markdown file per presentation\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 src                   # Gatsby/React source, independent from content\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 static                # static assets like images, available in slides/chapters\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 meta.json             # course metadata\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 theme.sass            # UI theme colors and settings\n```\n\n### Setting up Binder\n\nThe [`requirements.txt`](binder/requirements.txt) in the repository defines the\npackages that are installed when building it with Binder. For this course, I\'m\nusing the source repo as the Binder repo, as it allows to keep everything in\nonce place. It also lets the exercises reference and load other files (e.g.\nJSON), which will be copied over into the Pyt hon environment. I build the\nbinder from a branch `binder`, though, which I only update if Binder-relevant\nfiles change. Otherwise, every update to `master` would trigger an image\nrebuild.\n\nYou can specify the binder settings like repo, branch and kernel type in the\n`"juniper"` section of the `meta.json`. I\'d recommend running the very first\nbuild via the interface on the [Binder website](https://mybinder.org), as this\ngives you a detailed build log and feedback on whether everything worked as\nexpected. Enter your repository URL, click "launch" and wait for it to install\nthe dependencies and build the image.\n\n![Binder](https://user-images.githubusercontent.com/13643239/39412757-a518d416-4c21-11e8-9dad-8b4cc14737bc.png)\n\n### Running the app\n\nTo start the local development server, install [Gatsby](https://gatsbyjs.org)\nand then all other dependencies.\n\n```bash\nnpm install -g gatsby-cli  # Install Gatsby globally\nnpm install                # Install dependencies\nnpm run dev                # Run the development server\n```\n\nFor hosting, I recommend [Netlify](https://netlify.com). It works with GitHub\nand Gatsby out-of-the-box.\n\n### File formats\n\n#### Chapters\n\nChapters are placed in [`/chapters`](/chapters) and are Markdown files\nconsisting of `<exercise>` components. They\'ll be turned into pages, e.g.\n`/chapter1`. In their frontmatter block at the top of the file, they need to\nspecify `type: chapter`, as well as the following meta:\n\n```yaml\n---\ntitle: The chapter title\ndescription: The chapter description\nprev: /chapter1 # exact path to previous chapter or null to not show a link\nnext: /chapter3 # exact path to next chapter or null to not show a link\nid: 2 # unique identifier for chapter\ntype: chapter # important: this creates a standalone page from the chapter\n---\n\n```\n\n#### Slides\n\nSlides are placed in [`/slides`](/slides) and are markdown files consisting of\nslide content, separated by `---`. They need to specify the following\nfrontmatter block at the top of the file:\n\n```yaml\n---\ntype: slides\n---\n\n```\n\nThe **first and last slide** use a special layout and will display the headline\nin the center of the slide. **Speaker notes** (in this case, the script) can be\nadded at the end of a slide, prefixed by `Notes:`. They\'ll then be shown on the\nright next to the slides. Here\'s an example slides file:\n\n```markdown\n---\ntype: slide\n---\n\n# Processing pipelines\n\nNotes: This is a slide deck about processing pipelines.\n\n---\n\n# Next slide\n\n- Some bullet points here\n- And another bullet point\n\n<img src="/image.jpg" alt="An image located in /static" />\n```\n\n### Custom Elements\n\nWhen using custom elements, make sure to place a newline between the\nopening/closing tags and the children. Otherwise, Markdown content may not\nrender correctly.\n\n#### `<exercise>`\n\nContainer of a single exercise.\n\n| Argument     | Type            | Description                                                    |\n| ------------ | --------------- | -------------------------------------------------------------- |\n| `id`         | number / string | Unique exercise ID within chapter.                             |\n| `title`      | string          | Exercise title.                                                |\n| `type`       | string          | Optional type. `"slides"` makes container wider and adds icon. |\n| **children** | -               | The contents of the exercise.                                  |\n\n```markdown\n<exercise id="1" title="Introduction to spaCy">\n\nContent goes here...\n\n</exercise>\n```\n\n#### `<codeblock>`\n\n| Argument     | Type            | Description                                                                                  |\n| ------------ | --------------- | -------------------------------------------------------------------------------------------- |\n| `id`         | number / string | Unique identifier of the code exercise.                                                      |\n| `source`     | string          | Name of the source file (without file extension). Defaults to `exc_${id}` if not set.        |\n| `solution`   | string          | Name of the solution file (without file extension). Defaults to `solution_${id}` if not set. |\n| `test`       | string          | Name of the test file (without file extension). Defaults to `test_${id}` if not set.         |\n| **children** | string          | Optional hints displayed when the user clicks "Show hints".                                  |\n\n```markdown\n<codeblock id="02_03">\n\nThis is a hint!\n\n</codeblock>\n```\n\n#### `<slides>`\n\nContainer to display slides interactively using Reveal.js and a Markdown file.\n\n| Argument | Type   | Description                                   |\n| -------- | ------ | --------------------------------------------- |\n| `source` | string | Name of slides file (without file extension). |\n\n```markdown\n<slides source="chapter1_01_introduction-to-spacy">\n</slides>\n```\n\n#### `<choice>`\n\nContainer for multiple-choice question.\n\n| Argument     | Type            | Description                                                                                  |\n| ------------ | --------------- | -------------------------------------------------------------------------------------------- |\n| `id`         | string / number | Optional unique ID. Can be used if more than one choice question is present in one exercise. |\n| **children** | nodes           | Only `<opt>` components for the options.                                                     |\n\n```markdown\n<choice>\n\n<opt text="Option one">You have selected option one! This is not good.</opt>\n<opt text="Option two" correct="true">Yay! </opt>\n\n</choice>\n```\n\n#### `<opt>`\n\nA multiple-choice option.\n\n| Argument     | Type   | Description                                                                                    |\n| ------------ | ------ | ---------------------------------------------------------------------------------------------- |\n| `text`       | string | The option text to be displayed. Supports inline HTML.                                         |\n| `correct`    | string | `"true"` if the option is the correct answer.                                                  |\n| **children** | string | The text to be displayed if the option is selected (explaining why it\'s correct or incorrect). |\n\n## \xf0\x9f\x9b\xa3 Roadmap and todos\n\n- [ ] Front-end tests. Also, if someone wants to port this over to TypeScript,\n      I\'d accept the PR \xf0\x9f\x98\x9b\n- [ ] PDF slides. Since the app is using Reveal.js, this should be possible.\n- [ ] Testing it for other languages like R. I\'d be really curious to see if it\n      works. We\'d have to adjust the\n      [`node.extension` check here](gatsby-node.js) for other files to be\n      included via GraphQL.\n'