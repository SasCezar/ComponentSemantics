b"# Interactive Guide to Server-side rendering with Webpack, React, React Transmit, CSS modules and more\n\nFollow the tutorial commit-by-commit, to see the server-side rendering drama unfold with a happy ending!\n\n[CLICK TO GET STARTED](https://github.com/dimaip/server-side-rendering/commits/master)\n\n\n## Contents (mostly for Google)\n\n### [Step 1: minimal Webpack, Babel and React setup](https://github.com/dimaip/server-side-rendering/commit/7d1d0677bca0ea94e820dc7e156c89e83ef823bb)\n\nRUN: `npm run start` and then open index.html in the browser.\n\nWebpack helps us to bundle our code with dependencies from npm\n(such as React), and then transforms the code with Babel, to make\nit compatible with ES5.\n\n### [Step 2: trivial server-side rendering with Express](https://github.com/dimaip/server-side-rendering/commit/fad6b64e4ec3ee6b378c6ab0abd36f03fdba7c77)\n\nRUN: `npm run start` and go to `http://localhost:3000`.\n\nNow we are rendering the same Hello component both on client and server:\nwith express server we pre-render the Hello component on the server, and\nserver the client with rendered html, and with webpack we continue to\nbundle client.js into ES5 code that the browser would understand,\njust as we did at previous step.\n\n### [Step 3: add styles](https://github.com/dimaip/server-side-rendering/commit/53d2ffa7bc9319722addced5bb94c5b231726a1b)\n\nNow lets learn to deal with styles. We configure webpack loaders to\nsupport loading CSS files. This is cool, but there comes one problem\nwith server-side rendering: styles won't be loaded until all of JS loads,\nso no styles for devices without JS.\n\nLet's fix this problem with webpack's ExtractTextPlugin plugin: it\nextracts all CSS styles into one CSS file that we can serve to our client,\nso our page will instantly look perfectly styled, even without JS.\n\n### [Step 3a: switch to CSS modules](https://github.com/dimaip/server-side-rendering/commit/e2c02444b1e7c6ec349511aa9b2da1a52aba5474)\n\nEverybody loves CSS modules, and the great news is that they come free with Webpack.\nThe bad news is that we can't use them with server-side rendering, as we don't use\nWebpack when rendering on the server-side.\n\nSo at this step we broke everything, and the only way to continue from here, is to\nstart using Webpack to pre-build code for server-side rendering too, and that's\nwhat we'll do at the next step.\n\n### [Step 3b: save the day by making webpack to render server-side code](https://github.com/dimaip/server-side-rendering/commit/6e36b9690816d414ca36775c6487e0b6dbd8abe3)\n\nTo save our issue with CSS modules, we make Webpack to render both\nour client and our server side code. The best way to do it is to\nuse Webpack's abillity to handle array of configs.\n\nWith first config we transform our client-side code (`client.js`),\njust as we were doing before. But with the second config we transform\n`handleRender` function that we have extracted into `serverEntry.js`,\nso now our server-side rendering code gets processed by Webpack too.\nThere we use css-loader/locals as a CSS loader, to just get class names from\nCSS modules, as that's all we need to render html on the server.\nAlso notice how we use `target:node` and `nodeExternals`.\n\nGreat! Now our build is fixed, so we can use CSS modules both during client\nand server rendering.\n\n\n### [Step 4a: asyncronously fetching data](https://github.com/dimaip/server-side-rendering/commit/d9ce281b88d142cf52861223a201de6d47dfd428)\n\nNow let's fetch some data asyncronously. We'll use isomorphic-fetch,\nas it works both on client and server our of the box.\n\nFetching data works just fine on the server, but the problem is that\non the server we didn't wait for fetch to finish fetching the data\nbefore sending the response, so our pre-rendered html doesn't have any\nasync data when it arrives.\nLet's try to fix it in the next step.\n\n\n### [Step 4b: use react-transmit to declaratively define data deps](https://github.com/dimaip/server-side-rendering/commit/HEAD)\n\nThere are multiple ways to solve async rendering issue. Here we'll\nuse react-transmit to declaratively define our data dependencies per component,\nand return rendered html only when all data is resolved.\n\nIt works even with nested components, constructing the single promises tree,\nwhich is qute cool. It is inspired by Facebook Relay, so if you are familiar\nwith it, you'll feel right at home.\n\n\n## That's all, folks!\n\nGot more tips or challenges with server-side rendering of React? Submit a PR!\n"