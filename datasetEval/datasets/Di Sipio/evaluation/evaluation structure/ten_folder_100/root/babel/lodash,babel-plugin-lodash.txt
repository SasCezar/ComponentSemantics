b'# babel-plugin-lodash\n\nA simple transform to cherry-pick Lodash modules so you don\xe2\x80\x99t have to.\n\nCombine with [lodash-webpack-plugin](https://www.npmjs.com/package/lodash-webpack-plugin)\nfor even smaller cherry-picked builds!\n\n## Install\n\n```shell\n$ npm i --save lodash\n$ npm i --save-dev babel-plugin-lodash @babel/cli @babel/preset-env\n```\n\n## Example\n\nTransforms\n```js\nimport _ from \'lodash\'\nimport { add } from \'lodash/fp\'\n\nconst addOne = add(1)\n_.map([1, 2, 3], addOne)\n```\n\nroughly to\n```js\nimport _add from \'lodash/fp/add\'\nimport _map from \'lodash/map\'\n\nconst addOne = _add(1)\n_map([1, 2, 3], addOne)\n```\n\n## Usage\n\n###### .babelrc\n```json\n{\n  "plugins": ["lodash"],\n  "presets": [["@babel/env", { "targets": { "node": 6 } }]]\n}\n```\n\nSet plugin options using an array of `[pluginName, optionsObject]`.\n```json\n{\n  "plugins": [["lodash", { "id": "lodash-compat", "cwd": "some/path" }]],\n  "presets": [["@babel/env", { "targets": { "node": 6 } }]]\n}\n```\n\nThe `options.id` can be an array of ids.\n```json\n{\n  "plugins": [["lodash", { "id": ["async", "lodash-bound"] }]],\n  "presets": [["@babel/env", { "targets": { "node": 6 } }]]\n}\n```\n\n###### Babel CLI\n```sh\n$ babel --plugins lodash --presets @babel/es2015 script.js\n```\n\n###### Babel API\n```js\nrequire(\'babel-core\').transform(\'code\', {\n  \'plugins\': [\'lodash\'],\n  \'presets\': [[\'@babel/env\', { \'targets\': { \'node\': 6 } }]]\n})\n```\n\n###### webpack.config.js\n```js\n\'module\': {\n  \'loaders\': [{\n    \'loader\': \'babel-loader\',\n    \'test\': /\\.js$/,\n    \'exclude\': /node_modules/,\n    \'query\': {\n      \'plugins\': [\'lodash\'],\n      \'presets\': [[\'@babel/env\', { \'targets\': { \'node\': 6 } }]]\n    }\n  }]\n}\n```\n\n## FAQ\n\n> Can this plugin produce ES2015 imports rather than CommonJS imports?\n\nThis plugin produces ES2015 imports by default. The\n[`@babel/plugin-transform-modules-commonjs`](https://www.npmjs.com/package/@babel/plugin-transform-modules-commonjs)\nplugin, which is included in the [`@babel/preset-es2015`](https://www.npmjs.com/package/@babel/preset-es2015)\npreset, transforms ES2015 `import` statements to CommonJS. Omit it from your\npreset to preserve ES2015 style imports.\n\n## Limitations\n\n* You must use ES2015 imports to load Lodash\n* Babel < 6 & Node.js < 4 aren\xe2\x80\x99t supported\n* Chain sequences aren\xe2\x80\x99t supported. See [this blog post](https://medium.com/making-internets/why-using-chain-is-a-mistake-9bc1f80d51ba) for alternatives.\n* Modularized [method packages](https://www.npmjs.com/browse/keyword/lodash-modularized) aren\xe2\x80\x99t supported\n'