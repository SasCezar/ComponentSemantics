b"## AST explorer\n\n[![Join the chat at https://gitter.im/astexplorer/Lobby](https://badges.gitter.im/astexplorer/Lobby.svg)](https://gitter.im/astexplorer/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://travis-ci.org/fkling/astexplorer.svg?branch=master)](https://travis-ci.org/fkling/astexplorer)\n\nPaste or drop code into the editor and inspect the generated AST on https://astexplorer.net/\n\nThe AST explorer provides following code parsers:\n\n- CSS:\n  - [cssom][]\n  - [csstree][]\n  - [postcss][] + [postcss-safe-parser][] & [postcss-scss][]\n  - [rework][]\n- [GraphQL][]\n- Graphviz:\n  - [redot][]\n- Handlebars:\n  - [glimmer][]\n  - [handlebars][]\n  - [ember-template-recast][]\n- HTML:\n  - [htmlparser2][]\n  - [parse5][]\n  - [@angular/compiler][]\n  - [vue-template-compiler][]\n  - [svelte][]\n  - [posthtml][]\n  - [hyntax][]\n- [ICU][]\n- JavaScript:\n  - [acorn][] + [acorn-jsx][]\n  - [babel-eslint][]\n  - [babylon][]\n  - [espree][]\n  - [esformatter][]\n  - [esprima][]\n  - [flow-parser][]\n  - [meriyah][]\n  - [recast][]\n  - [shift][]\n  - [traceur][]\n  - [typescript][]\n  - [typescript-eslint-parser][]\n  - [uglify-js][]\n- [JSON][]\n- Lua:\n  - [luaparse][]\n- Markdown:\n  - [remark][]\n- [MDX][]:\n  - [mdxhast][]\n- PHP\n  - [php-parser][]\n- [Pug][]\n- Regular Expressions:\n  - [regexp-tree][]\n  - [regjsparser][]\n- Scala\n  - [Scalameta][]\n- Solidity:\n  - [solidity-parser-antlr][]\n- SQL:\n  - [sqlite-parser][]\n- [WebIDL][]\n- YAML:\n  - [yaml][]\n  - [yaml-ast-parser][]\n\n### Experimental / custom syntax\n\nDepending on the parser settings, it not only supports ES5/CSS3 but also\n\n- ES6: [arrow functions](https://github.com/lukehoban/es6features#arrows), [destructuring](https://github.com/lukehoban/es6features#destructuring),\n  [classes](https://github.com/lukehoban/es6features#classes), ...\n- ES7 proposals: [async/await](https://github.com/lukehoban/ecmascript-asyncawait), [object rest / spread](https://github.com/sebmarkbage/ecmascript-rest-spread),  ...\n- [JSX](https://facebook.github.io/jsx/), known through [React](https://facebook.github.io/react/).\n- Typed JavaScript ([Flow](http://flowtype.org/) and [TypeScript](http://typescriptlang.org/))\n- [SASS](http://sass-lang.com/)\n\n### Transforms\n\nSince future syntax is supported, the AST explorer is a useful tool for\ndevelopers who want to create AST transforms. In fact, following transformers\nare included so you can prototype your own plugins:\n\n- JavaScript\n  - [babel][] (v5, v6)\n  - [ESLint][] (v1, v2, v3)\n  - [jscodeshift][]\n  - [tslint][]\n- HTML\n  - [posthtml][]\n- CSS\n  - [postcss][]\n- MDX\n  - [mdx][]\n- Regular Expressions\n  - [regexp-tree][]\n- Handlebars\n  - [glimmer][]\n\n### More Features\n\n- Save and fork code snippets. Copy the URL to share them.\n- Copying an AST or dropping a file containing an AST into the window will\nparse the AST and update the code using [escodegen][].\n- Otherwise, the content of text editor will be replaced with the content of the\nfile (i.e. you can drag and drop JS files).\n- Choose between multiple parsers and configure them.\n- shift+click on a node expands the full subtree.\n- Hovering over a node highlights the corresponding text in the source code\n- Editing the source or moving the cursor around will automatically highlight\n  the corresponding AST node (or its ancestors of it isn't expanded)\n- You can use `$node` in the console to refer to the last opened/toggled AST\nnode.\n\n[acorn-jsx]: https://github.com/RReverser/acorn-jsx\n[acorn]: https://github.com/ternjs/acorn\n[@angular/compiler]: https://angular.io/\n[babel-eslint]: https://github.com/babel/babel-eslint\n[babel]: https://babeljs.io/docs/advanced/plugins/\n[babylon]: https://babeljs.io/\n[cssom]: https://github.com/NV/CSSOM\n[csstree]: https://github.com/csstree/csstree\n[ember-template-recast]: https://github.com/ember-template-lint/ember-template-recast\n[escodegen]: https://github.com/estools/escodegen\n[eslint]: http://eslint.org/\n[espree]: https://github.com/eslint/espree\n[esprima]: https://github.com/jQuery/esprima\n[flow-parser]: https://github.com/facebook/flow/tree/master/src/parser\n[graphql]: https://facebook.github.io/graphql/\n[htmlparser2]: https://github.com/fb55/htmlparser2\n[jscodeshift]: https://github.com/facebook/jscodeshift\n[luaparse]: https://oxyc.github.io/luaparse/\n[meriyah]: https://github.com/meriyah/meriyah/\n[parse5]: https://github.com/inikulin/parse5\n[postcss-safe-parser]: https://github.com/postcss/postcss-safe-parser\n[postcss-scss]: https://github.com/postcss/postcss-scss\n[postcss]: https://github.com/postcss/postcss\n[posthtml]: https://github.com/posthtml/posthtml\n[recast]: https://github.com/benjamn/recast\n[rework]: https://github.com/reworkcss/rework\n[shift]: https://github.com/shapesecurity/shift-parser-js\n[traceur]: https://github.com/google/traceur-compiler\n[typescript]: https://github.com/Microsoft/TypeScript/\n[typescript-eslint-parser]: https://github.com/eslint/typescript-eslint-parser/\n[tslint]: https://palantir.github.io/tslint/\n[uglify-js]: https://github.com/mishoo/UglifyJS2\n[webidl]: https://github.com/darobin/webidl2.js\n[redot]: https://github.com/redotjs/redot\n[remark]: https://github.com/remarkjs/remark\n[regexp-tree]: https://github.com/DmitrySoshnikov/regexp-tree\n[regjsparser]: https://github.com/jviereck/regjsparser\n[php-parser]: https://github.com/glayzzle/php-parser\n[pug]: https://github.com/pugjs/pug\n[glimmer]: https://github.com/glimmerjs/glimmer-vm\n[handlebars]: http://handlebarsjs.com/\n[icu]: https://github.com/formatjs/formatjs/tree/master/packages/intl-messageformat-parser\n[json]: https://github.com/vtrushin/json-to-ast\n[sqlite-parser]: https://github.com/codeschool/sqlite-parser\n[yaml]: https://github.com/eemeli/yaml\n[yaml-ast-parser]: https://github.com/mulesoft-labs/yaml-ast-parser\n[esformatter]: https://github.com/millermedeiros/esformatter-parser#readme\n[MDX]: https://mdxjs.com/\n[mdxhast]: https://mdxjs.com/advanced/ast#mdxhast\n[mdx]: https://mdxjs.com/advanced/sync-api\n[Scalameta]: http://scalameta.org/\n[solidity-parser-antlr]: https://github.com/federicobond/solidity-parser-antlr\n[vue-template-compiler]: https://github.com/vuejs/vue/tree/dev/packages/vue-template-compiler\n[svelte]: https://github.com/sveltejs/svelte \n[hyntax]: https://github.com/nik-garmash/hyntax\n\n### Contributions\n\nI'm happy about any feedback, feature request or PR to make this tool as useful\nas possible!\n\n---\n\n#### How to add a new parser\n\n1. Go to `website/`.\n2. Install the new parser as dependency: `yarn add theParser` (or `npm install -S theParser`)\n3. Copy one of the existing examples in `src/parsers/{language}`.\n4. Adjust the code as necessary:\n  - Update metadata.\n  - Load the right parser (`loadParser`).\n  - Call the right parsing method with the right/necessary options in `parse`.\n  - Implement the `nodeToRange` method (this is for highlighting).\n  - Implement the `getNodeName` method (this is for quick look through the tree).\n  - Implement `opensByDefault` method for auto-expansion of specific properties.\n  - Define `_ignoredProperties` set or implement `forEachProperty` generator method for filtering.\n  - Provide a `renderSettings` method if applicable.\n\n#### How to add a new transformer\n\n0. Go to `website/`.\n1. Install the new transformer as dependency.\n2. Copy one of the existing examples in `src/parsers/{language}/transformers`.\n3. Adjust the code as necessary:\n  - Update metadata and `defaultParserID`.\n  - Load the right transformer (`loadTransformer`).\n  - Call the transformation method in `transform`.\n  - Change sample transformation code in `codeExample.txt`.\n\n#### Build your own version for development\n\n1. Clone the repository.\n3. Go to `website/`.\n4. Install all dependencies with `yarn install` (you can run `npm install` as\n   well).\n\nRun `yarn run build` for the final minimized version.\nRun `yarn run watch` for incremental builds.\n\nRun `yarn start` to start a simple static webserver.\n"