b'# babel-plugin-sitrep\n\n> Log all assignments and the return value of a function with a simple comment\n\n[![npm version](https://badge.fury.io/js/babel-plugin-sitrep.svg)](https://badge.fury.io/js/babel-plugin-sitrep)\n[![Build Status](https://travis-ci.org/tkh44/babel-plugin-sitrep.svg?branch=master)](https://travis-ci.org/tkh44/babel-plugin-sitrep)\n[![codecov](https://codecov.io/gh/tkh44/babel-plugin-sitrep/branch/master/graph/badge.svg)](https://codecov.io/gh/tkh44/babel-plugin-sitrep)\n\n## Example\n\n**In**\n\n```javascript\n// sitrep\nfunction bar () {\n  var a = \'foo\'\n  const b = \'bar\'\n  let c = [a, b].map(x => x)\n  return c.join(\'-\')\n}\n\n// sitrep\nvar cb = x => x.charAt(0)\n\n// sitrep\nvar cb = x => {\n  x = x + 2\n  x.charAt(0)\n  return x\n}\n\n// sitrep\nvar a = function () {\n  return \'foo\'\n}\n\nconst obj = {\n  // sitrep\n  fn() {\n    let a = 5\n    return a + 5\n  }\n}\n\nclass Boom {\n  // sitrep\n  fire() {\n    let a = 2\n    return a + 5\n  }\n}\n\n// sitrep prefix\nfunction bar () {\n  var a = \'foo\'\n  return a\n}\n\n```\n\n`\xe2\x86\x93 \xe2\x86\x93 \xe2\x86\x93 \xe2\x86\x93 \xe2\x86\x93 \xe2\x86\x93`\n\n**Out**\n\n```javascript\n// sitrep\nfunction bar () {\n  console.groupCollapsed(\'bar\');\n\n  var a = \'foo\';\n  console.log(\'a: \', a);\n  const b = \'bar\';\n  console.log(\'b: \', b);\n  let c = [a, b].map(x => x);\n  console.log(\'c: \', c);\n\n  var _returnValue = c.join(\'-\');\n\n  console.log(\'Return Value:\', _returnValue);\n  console.groupEnd(\'bar\');\n  return _returnValue;\n}\n\n// sitrep\nvar cb = function (x) {\n  console.groupCollapsed(\'cb\');\n\n  var _returnValue3 = x.charAt(0);\n\n  console.log(\'Return Value:\', _returnValue3);\n  console.groupEnd(\'cb\');\n  return _returnValue3;\n};\n\n// sitrep\nvar cb = function (x) {\n  console.groupCollapsed(\'cb\');\n\n  x = x + 2;\n  console.log(\'x: \', x);\n  x.charAt(0);\n  var _returnValue4 = x;\n  console.log(\'Return Value:\', _returnValue4);\n  console.groupEnd(\'cb\');\n  return _returnValue4;\n};\n\n// sitrep\nvar a = function () {\n  console.groupCollapsed(\'a\');\n  var _returnValue5 = \'foo\';\n  console.log(\'Return Value:\', _returnValue5);\n  console.groupEnd(\'a\');\n\n  return _returnValue5;\n};\n\nconst obj = {\n  // sitrep\n  fn() {\n    console.groupCollapsed(\'fn\');\n\n    let a = 5;\n    console.log(\'a: \', a);\n\n    var _returnValue6 = a + 5;\n\n    console.log(\'Return Value:\', _returnValue6);\n    console.groupEnd(\'fn\');\n    return _returnValue6;\n  }\n};\n\nclass Boom {\n  // sitrep\n  fire() {\n    console.groupCollapsed(\'fire\');\n\n    let a = 2;\n    console.log(\'a: \', a);\n\n    var _returnValue7 = a + 5;\n\n    console.log(\'Return Value:\', _returnValue7);\n    console.groupEnd(\'fire\');\n    return _returnValue7;\n  }\n}\n\n// sitrep prefix\nfunction bar () {\n  console.groupCollapsed(\'(prefix) bar\');\n\n  var a = \'foo\';\n  console.log(\'a: \', a);\n\n  var _returnValue8 = c.join(\'-\');\n\n  console.log(\'Return Value:\', _returnValue8);\n  console.groupEnd(\'(prefix) bar\');\n  return _returnValue8;\n}\n```\n\n## Installation\n\n```sh\nnpm install --save-dev babel-plugin-sitrep\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  "plugins": ["sitrep"]\n}\n```\n\n### Via CLI\n\n```sh\nbabel --plugins sitrep script.js\n```\n\n### Via Node API\n\n```javascript\nrequire("babel-core").transform("code", {\n  plugins: ["sitrep"]\n});\n```\n\n\n## Options\n\n### `label`\n\n`string`, defaults to `sitrep`.\n\nThis option changes the label that enables the plugin\n\n**Example**\n\nIf we set `label` to `"log-all-the-things"`\n\n**In**\n```javascript\n// log-all-the-things\nfunction fn(a) {\n  a = a.map(x => x)\n  return a\n}\n```\n\n```\xe2\x86\x93 \xe2\x86\x93 \xe2\x86\x93 \xe2\x86\x93 \xe2\x86\x93 \xe2\x86\x93```\n\n**Out**\n```javascript\n// log-all-the-things\nfunction fn(a) {\n  console.groupCollapsed("fn");\n\n  a = a.map(x => x);\n  console.log("a: ", a);\n  var _returnValue = a;\n  console.log("Return Value:", _returnValue);\n  console.groupEnd("fn");\n  return _returnValue;\n}\n```\n\n### `collapsed`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n - Collapse the group of console logs associated with a function\n'