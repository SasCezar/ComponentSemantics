b'\n<h1 align="center">\n  HTM (Hyperscript Tagged Markup)\n  <a href="https://www.npmjs.org/package/htm"><img src="https://img.shields.io/npm/v/htm.svg?style=flat" alt="npm"></a>\n</h1>\n<p align="center">\n  <img src="https://i.imgur.com/0ph8dbS.png" width="572" alt="hyperscript tagged markup demo">\n</p>\n\n`htm` is **JSX-like syntax in plain JavaScript** - no transpiler necessary.\n\nDevelop with React/Preact directly in the browser, then compile `htm` away for production.\n\nIt uses standard JavaScript [Tagged Templates] and works in [all modern browsers].\n\n## `htm` by the numbers:\n\n\xf0\x9f\x90\xa3 **< 600 bytes** when used directly in the browser\n\n\xe2\x9a\x9b\xef\xb8\x8f **< 500 bytes** when used with Preact _(thanks gzip \xf0\x9f\x8c\x88)_\n\n\xf0\x9f\xa5\x9a **< 450 byte** `htm/mini` version\n\n\xf0\x9f\x8f\x85 **0 bytes** if compiled using [babel-plugin-htm]\n\n\n## Syntax: like JSX but also lit\n\nThe syntax you write when using HTM is as close as possible to JSX:\n\n- Spread props: `<div ...${props}>`\n- Self-closing tags: `<div />`\n- Components: `<${Foo}>` _(where `Foo` is a component reference)_\n- Boolean attributes: `<div draggable />`\n\n\n## Improvements over JSX\n\n`htm` actually takes the JSX-style syntax a couple steps further!\n\nHere\'s some ergonomic features you get for free that aren\'t present in JSX:\n\n- **No transpiler necessary**\n- HTML\'s optional quotes: `<div class=foo>`\n- Component end-tags: `<${Footer}>footer content<//>`\n- Syntax highlighting and language support via the [lit-html VSCode extension] and [vim-jsx-pretty plugin].\n- Multiple root element (fragments): `<div /><div />`\n- Support for HTML-style comments: `<div><!-- comment --></div>`\n\n## Installation\n\n`htm` is published to npm, and accessible via the unpkg.com CDN:\n\n**via npm:**\n\n```js\nnpm i htm\n```\n\n**hotlinking from unpkg:** _(no build tool needed!)_\n\n```js\nimport htm from \'https://unpkg.com/htm?module\'\nconst html = htm.bind(React.createElement);\n```\n\n```js\n// just want htm + preact in a single file? there\'s a highly-optimized version of that:\nimport { html, render } from \'https://unpkg.com/htm/preact/standalone.module.js\'\n```\n\n## Usage\n\nIf you\'re using Preact or React, we\'ve included off-the-shelf bindings to make your life easier.\nThey also have the added benefit of sharing a template cache across all modules.\n\n```js\nimport { render } from \'preact\'; \nimport { html } from \'htm/preact\';\nrender(html`<a href="/">Hello!</a>`, document.body);\n```\n\nSimilarly, for React:\n\n```js\nimport ReactDOM from \'react-dom\'; \nimport { html } from \'htm/react\';\nReactDOM.render(html`<a href="/">Hello!</a>`, document.body);\n```\n\n### Advanced Usage\n\nSince `htm` is a generic library, we need to tell it what to "compile" our templates to.\nYou can bind `htm` to any function of the form `h(type, props, ...children)` _([hyperscript])_.\nThis function can return anything - `htm` never looks at the return value.\n\nHere\'s an example `h()` function that returns tree nodes:\n\n```js\nfunction h(type, props, ...children) {\n  return { type, props, children };\n}\n```\n\nTo use our custom `h()` function, we need to create our own `html` tag function by binding `htm` to our `h()` function:\n\n```js\nimport htm from \'htm\';\n\nconst html = htm.bind(h);\n```\n\nNow we have an `html()` template tag that can be used to produce objects in the format we created above.\n\nHere\'s the whole thing for clarity:\n\n```js\nimport htm from \'htm\';\n\nfunction h(type, props, ...children) {\n  return { type, props, children };\n}\n\nconst html = htm.bind(h);\n\nconsole.log( html`<h1 id=hello>Hello world!</h1>` );\n// {\n//   type: \'h1\',\n//   props: { id: \'hello\' },\n//   children: [\'Hello world!\']\n// }\n```\n\nIf the template has multiple element at the root level\nthe output is an array of `h` results:\n\n```js\nconsole.log(html`\n  <h1 id=hello>Hello</h1>\n  <div class=world>World!</div>\n`);\n// [\n//   {\n//     type: \'h1\',\n//     props: { id: \'hello\' },\n//     children: [\'Hello\']\n//   },\n//   {\n//     type: \'div\',\n//     props: { class: \'world\' },\n//     children: [\'world!\']\n//   }\n// ]\n```\n\n## Example\n\nCurious to see what it all looks like? Here\'s a working app!\n\nIt\'s a single HTML file, and there\'s no build or tooling. You can edit it with nano.\n\n```html\n<!DOCTYPE html>\n<html lang="en">\n  <title>htm Demo</title>\n  <script type="module">\n    import { html, Component, render } from \'https://unpkg.com/htm/preact/standalone.module.js\';\n\n    class App extends Component {\n      addTodo() {\n        const { todos = [] } = this.state;\n        this.setState({ todos: todos.concat(`Item ${todos.length}`) });\n      }\n      render({ page }, { todos = [] }) {\n        return html`\n          <div class="app">\n            <${Header} name="ToDo\'s (${page})" />\n            <ul>\n              ${todos.map(todo => html`\n                <li>${todo}</li>\n              `)}\n            </ul>\n            <button onClick=${() => this.addTodo()}>Add Todo</button>\n            <${Footer}>footer content here<//>\n          </div>\n        `;\n      }\n    }\n\n    const Header = ({ name }) => html`<h1>${name} List</h1>`\n\n    const Footer = props => html`<footer ...${props} />`\n\n    render(html`<${App} page="All" />`, document.body);\n  </script>\n</html>\n```\n\n[\xe2\x9a\xa1\xef\xb8\x8f **See live version** \xe2\x96\xb6](https://htm-demo-preact.glitch.me/)\n\n[\xe2\x9a\xa1\xef\xb8\x8f **Try this on CodeSandbox** \xe2\x96\xb6](https://codesandbox.io/s/x7pmq32j6q)\n\nHow nifty is that?\n\nNotice there\'s only one import - here we\'re using the prebuilt Preact integration since it\'s easier to import and a bit smaller.\n\nThe same example works fine without the prebuilt version, just using two imports:\n\n```js\nimport { h, Component, render } from \'preact\';\nimport htm from \'htm\';\n\nconst html = htm.bind(h);\n\nrender(html`<${App} page="All" />`, document.body);\n```\n\n## Other Uses\n\nSince `htm` is designed to meet the same need as JSX, you can use it anywhere you\'d use JSX.\n\n**Generate HTML using [vhtml]:**\n\n```js\nimport htm from \'htm\';\nimport vhtml from \'vhtml\';\n\nconst html = htm.bind(vhtml);\n\nconsole.log( html`<h1 id=hello>Hello world!</h1>` );\n// \'<h1 id="hello">Hello world!</h1>\'\n```\n\n**Webpack configuration via [jsxobj]:** ([details here](https://webpack.js.org/configuration/configuration-languages/#babel-and-jsx)) _(never do this)_\n\n```js\nimport htm from \'htm\';\nimport jsxobj from \'jsxobj\';\n\nconst html = htm.bind(jsxobj);\n\nconsole.log(html`\n  <webpack watch mode=production>\n    <entry path="src/index.js" />\n  </webpack>\n`);\n// {\n//   watch: true,\n//   mode: \'production\',\n//   entry: {\n//     path: \'src/index.js\'\n//   }\n// }\n```\n\n## Demos & Examples\n\n- [Canadian Holidays](https://github.com/pcraig3/hols): A full app using HTM and Server-Side Rendering\n- [HTM SSR Example](https://github.com/timarney/htm-ssr-demo): Shows how to do SSR with HTM\n- [HTM + Preact SSR Demo](https://gist.github.com/developit/699c8d8f180a1e4eed58167f9c6711be)\n- [HTM + vhtml SSR Demo](https://gist.github.com/developit/ff925c3995b4a129b6b977bf7cd12ebd)\n\n## Project Status\n\nThe original goal for `htm` was to create a wrapper around Preact that felt natural for use untranspiled in the browser. I wanted to use Virtual DOM, but I wanted to eschew build tooling and use ES Modules directly.\n\nThis meant giving up JSX, and the closest alternative was [Tagged Templates]. So, I wrote this library to patch up the differences between the two as much as possible. As it turns out, the technique is framework-agnostic, so it should work great with most Virtual DOM libraries.\n\nAs of 2.1.0, `htm` is stable, well-tested and ready for production use.\n\n[Tagged Templates]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates\n[lit-html]: https://github.com/Polymer/lit-html\n[babel-plugin-htm]: https://github.com/developit/htm/tree/master/packages/babel-plugin-htm\n[lit-html VSCode extension]: https://marketplace.visualstudio.com/items?itemName=bierner.lit-html\n[vim-jsx-pretty plugin]: https://github.com/MaxMEllon/vim-jsx-pretty\n[vhtml]: https://github.com/developit/vhtml\n[jsxobj]: https://github.com/developit/jsxobj\n[hyperscript]: https://github.com/hyperhype/hyperscript\n[all modern browsers]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Browser_compatibility\n'