b'# serverless-plugin-typescript\n[![serverless](http://public.serverless.com/badges/v3.svg)](http://www.serverless.com) [![npm version](https://badge.fury.io/js/serverless-plugin-typescript.svg)](https://badge.fury.io/js/serverless-plugin-typescript) [![Build Status](https://travis-ci.org/prisma/serverless-plugin-typescript.svg?branch=master)](https://travis-ci.org/prisma/serverless-plugin-typescript)\n\nServerless plugin for zero-config Typescript support\n\n## Features\n\n* Zero-config: Works out of the box without the need to install any other compiler or plugins\n* Supports ES2015 syntax + features (`export`, `import`, `async`, `await`, `Promise`, ...)\n* Supports `sls package`, `sls deploy` and `sls deploy function`\n* Supports `sls invoke local` + `--watch` mode\n* Integrates nicely with [`serverless-offline`](https://github.com/dherault/serverless-offline)\n\n## Install\n\n```sh\nyarn add --dev serverless-plugin-typescript typescript\n# or\nnpm install -D serverless-plugin-typescript typescript\n```\n\nAdd the following plugin to your `serverless.yml`:\n\n```yaml\nplugins:\n  - serverless-plugin-typescript\n```\n\n## Configure\n\nSee [example folder](example) for a minimal example.\n\n### `tsconfig.json`\n\nThe default `tsconfig.json` file used by the plugin looks like this:\n\n```json\n{\n  "compilerOptions": {\n    "preserveConstEnums": true,\n    "strictNullChecks": true,\n    "sourceMap": true,\n    "allowJs": true,\n    "target": "es5",\n    "outDir": ".build",\n    "moduleResolution": "node",\n    "lib": ["es2015"],\n    "rootDir": "./"\n  }\n}\n```\n\n> Note 1: The `outDir` and `rootDir` options cannot be overwritten.\n\n> Note 2: Don\'t confuse the [`tsconfig.json`](tsconfig.json) in this repository with the one mentioned above.\n\n### Including extra files\n\nAll files from `package/include` will be included in the final build file. See [Exclude/Include](https://serverless.com/framework/docs/providers/aws/guide/packaging#exclude--include)\n\n\n## Usage\n\n### Google Cloud Functions\n\nWhen using with Google Cloud Functions via the [serverless-google-cloudfunctions](https://github.com/serverless/serverless-google-cloudfunctions)\nplugin, you simply have to provide a `main` field in your `package.json`:\n\n```js\n{\n  // ...\n  "main": "handler.js",\n  // ..\n}\n```\n\nAnd this plugin will automatically compile your typescript correctly. Note\nthat the field must refer to the compiled file name, namely, ending with a `.js`\nextension.\n\nIf a `main` field was not found, then this plugin will use `index.js`. Before\ncompilation begins, it will check to see that the file indicated exists with a\n`.ts` extension before actually trying to compile it.\n\n### Automatic compilation\n\nThe normal Serverless deploy procedure will automatically compile with Typescript:\n\n- Create the Serverless project with `serverless create -t aws-nodejs`\n- Install Serverless Typescript as above\n- Deploy with `serverless deploy`\n\n### Usage with serverless-offline\n\nThe plugin integrates very well with [serverless-offline](https://github.com/dherault/serverless-offline) to\nsimulate AWS Lambda and AWS API Gateway locally.\n\nAdd the plugins to your `serverless.yml` file and make sure that `serverless-plugin-typescript`\nprecedes `serverless-offline` as the order is important:\n```yaml\n  plugins:\n    ...\n    - serverless-plugin-typescript\n    ...\n    - serverless-offline\n    ...\n```\n\nRun `serverless offline` or `serverless offline start` to start the Lambda/API simulation.\n\nIn comparison to `serverless offline`, the `start` command will fire an `init` and a `end` lifecycle hook which is needed for `serverless-offline` and e.g. `serverless-dynamodb-local` to switch off resources (see below)\n\n#### serverless-dynamodb-local\n\nConfigure your service the same as mentioned above, but additionally add the `serverless-dynamodb-local`\nplugin as follows:\n```yaml\n  plugins:\n    - serverless-plugin-typescript\n    - serverless-dynamodb-local\n    - serverless-offline\n```\n\nRun `serverless offline start`.\n\n#### Other useful options\n\nYou can reduce the clutter generated by `serverless-offline` with `--dontPrintOutput` and\ndisable timeouts with `--noTimeout`.\n\n### Run a function locally\n\nTo run your compiled functions locally you can:\n\n```bash\n$ serverless invoke local --function <function-name>\n```\n\nOptions are:\n\n- `--function` or `-f` (required) is the name of the function to run\n- `--watch` - recompile and run a function locally on source changes\n- `--path` or `-p` (optional) path to JSON or YAML file holding input data\n- `--data` or `-d` (optional) input data\n\n### Enabling source-maps\n\nYou can easily enable support for source-maps (making stacktraces easier to read) by installing and using the following plugin:\n\n```sh\nyarn add --dev source-map-support\n```\n\n```ts\n// inside of your function\nimport \'source-map-support/register\'\n```\n\nIf you are using webpack (most likely). Add `devtool: \'source-map\'` to `webpack.config.js`:\n```js\nmodule.exports = {\n  .... snip ....\n  devtool: \'source-map\',\n  .... snip ....\n\n}\n```\n\n## Help & Community\n\nJoin our [Spectrum community](http://spectrum.chat/prisma) if you run into issues or have questions. We love talking to you!\n\n<p align="center"><a href="https://oss.prisma.io"><img src="https://imgur.com/IMU2ERq.png" alt="Prisma" height="170px"></a></p>\n\n'