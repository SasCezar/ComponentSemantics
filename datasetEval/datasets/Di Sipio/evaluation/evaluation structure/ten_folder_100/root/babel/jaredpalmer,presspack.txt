b'# Presspack\n\n> Make WordPress theme development great again.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON\'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Features](#features)\n- [Requirements](#requirements)\n- [Getting Started](#getting-started)\n- [Developing Locally](#developing-locally)\n- [Building for Production](#building-for-production)\n- [Changing ports](#changing-ports)\n- [Project Structure](#project-structure)\n- [Local Database Backup](#local-database-backup)\n- [Local Database Restore](#local-database-restore)\n- [Author](#author)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Modern JavaScript through Webpack\n- Live reload via BrowserSync\n- SCSS support\n- Easy dev environments with Docker Compose\n- Stateless, immutable plugin management via Composer\n- Helpful HTML5 Router for firing JS based on WordPress page slug.\n- Nothing else.\n\n## Requirements\n\n- Node.js\n- Yarn\n- PHP and Composer\n- Docker for Mac / Windows\n- Docker Compose\n\n## Getting Started\n\n```bash\ngit clone git@github.com:jaredpalmer/presspack.git\nyarn install\ncomposer install # if you want plugins ( not required )\ndocker-compose up\n```\n\n## Developing Locally\n\nTo work on the theme locally, open another window/tab in terminal and run:\n\n```bash\nyarn start\n```\n\nThis will open a browser, watch all files (php, scss, js, etc) and reload the\nbrowser when you press save.\n\n## Building for Production\n\nTo create an optimized production build, run:\n\n```bash\nyarn build\n```\n\nThis will minify assets, bundle and uglify javascript, and compile scss to css.\nIt will also add cachebusting names to then ends of the compiled files, so you\ndo not need to bump any enqueued asset versions in `functions.php`.\n\n## Changing ports\n\nThere are two ports involved, the port of the dockerized WordPress instance,\nand the port the Browser Sync runs on. To change the port of the dockerized\nWordPress instance go into [`docker-compose.yml`](docker-compose.yml#L25) and\nmodify `ports`.\n\n```yml\n# docker-compose.yml\n ...\n  ports:\n    - "9009:80" # only need to change `9009:80` --> localhost:9009\n ...\n```\n\nIf you want to change the port you develop on (the default is 4000), then open\n[`scripts/webpack.config.js`](scripts/webpack.config.js#L119) and modify\n`BrowserSyncPlugin`\'s `port` option. If you changed the WordPress port above,\nbe sure to also change `proxy` accordingly. Don\'t forget the trailing slash.\n\n```js\n// scripts/webpack.config.js\n...\nnew BrowserSyncPlugin({\n  notify: false,\n  host: \'localhost\',\n  port: 4000, // this is the port you develop on. Can be anything.\n  logLevel: \'silent\',\n  files: [\'./*.php\'],\n  proxy: \'http://localhost:9009/\', // This port must match docker-compose.yml\n}),\n...\n```\n\n## Project Structure\n\n```bash\n.\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 composer.json                # Compose dependencies (plugins)\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 composer.lock                # Composer lock file\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 docker-compose.yml           # Docker Compose configuration\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 footer.php\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 functions.php\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 header.php\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.php\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 package.json                 # Node.js dependencies\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 page.php\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80scripts                       # Build / Dev Scripts\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 build.js                 # Build task\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 start.js                 # Start task\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 webpack.config.js        # Webpack configuration\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80src\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.js                 # JavaScript entry point\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 routes                   # Routes\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 common.js            # JS that will run on EVERY page\n    \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 <xxx>.js             # JS that will run on pages with <xxx> slug\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 style.scss               # SCSS style entry point\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 styles                   # SCSS\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 _global-vars.scss\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 _base.scss\n    \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 ...\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 util\n        \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Router.js            # HTML5 Router, DO NOT TOUCH\n        \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 camelCase.js         # Helper function for Router, DO NOT TOUCH\n```\n\n## Local Database Backup\n\nHere\'s how to dump your local database with Docker into a `.sql` file\n\n```aidl\ndocker exec -it host_db_1 /usr/bin/mysqldump -u username -ppassword database_name > backup.sql\n```\n\n## Local Database Restore\n\nRestore a previous database backup\n\n```aidl\ndocker exec -i host_db_1 /usr/bin/mysql -u username -ppassword database_name < backup.sql\n```\n\n## Author\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n'