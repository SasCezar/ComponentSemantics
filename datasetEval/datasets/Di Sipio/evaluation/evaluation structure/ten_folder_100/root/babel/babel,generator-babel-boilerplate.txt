b'# generator-babel-boilerplate\n[![Travis build status](http://img.shields.io/travis/babel/generator-babel-boilerplate.svg?style=flat)](https://travis-ci.org/babel/generator-babel-boilerplate)\n[![Dependency Status](https://david-dm.org/babel/generator-babel-boilerplate.svg)](https://david-dm.org/babel/generator-babel-boilerplate)\n[![devDependency Status](https://david-dm.org/babel/generator-babel-boilerplate/dev-status.svg)](https://david-dm.org/babel/generator-babel-boilerplate#info=devDependencies)\n\nA [Yeoman](http://yeoman.io/) generator to author libraries in ES2015 (and beyond!) for Node and the browser.\n\n### Features\n\n\xe2\x9c\x93 Author in [ES2015](https://babeljs.io/docs/learn-es2015/) (including the unit tests)  \n\xe2\x9c\x93 Export as ES5 & [UMD](https://github.com/umdjs/umd)  \n\xe2\x9c\x93 [Mocha](http://mochajs.org/)-[Chai](http://chaijs.com/)-[Sinon](http://sinonjs.org/) testing stack  \n\xe2\x9c\x93 Unit tests that work in Node and in the browser\n\n### Installation\n\nInstall `yo` and this generator globally.\n\n`npm install -g yo generator-babel-boilerplate`\n\n### Using Yeoman\n\nNavigate to the directory you\'d like to use for your project, then run `yo babel-boilerplate`.\n\nAnswer a few questions, and your project will be scaffolded.\n\n### Basic Guide\n\nWrite your code in `src`. The entry file is what you named the project in kebab case ([although the filename\ncan be changed](https://github.com/babel/generator-babel-boilerplate#i-want-to-change-the-primary-source-file)).\n\nRun `npm run build` to compile the source into a distributable format.\n\nPut your unit tests in `test/unit`. The `npm test` command runs the tests using Node. If your library / tests\nrequire the DOM API, see the `test/setup/node.js` file.\n\n### npm Scripts\n\n- `npm test` - Lint the library and tests, then run the unit tests\n- `npm run lint` - Lint the source and unit tests\n- `npm run watch` - Continuously run the unit tests as you make changes to the source\n   and test files themselves\n- `npm run test-browser` - Build the library for use with the browser spec runner.\n  Changes to the source will cause the runner to automatically refresh.\n- `npm run build` - Lint then build the library\n- `npm run coverage` - Generate a coverage report\n\n### Browser Tests\n\nThe browser spec runner can be opened in a browser to run your tests. For it to work, you must first run `npm run test-browser`. This will set up a watch task that will automatically refresh the tests when your scripts, or the tests, change. The spec runner file is located at `test/runner.html`: open it in your browser to run tests.\n\n### Code Climate\n\nThis library is set up to integrate with Code Climate. If you\'ve never used Code Climate, then you might be wondering\nwhy it\'s useful. There are two reasons:\n\n1. It consumes code coverage reports, and provides a coverage badge for the README\n2. It provides interesting stats on your library, if you\'re into that kinda thing\n\nEither of these items on the list can simply be ignored if you\'re uninterested in them. Or you can pull Code Climate\nout entirely from the boilerplate and not worry about it. To do that, update the relevant Gulp tasks and the Travis\nbuild.\n\nIf you\'d like to set up Code Climate for your project, follow [the steps here](https://github.com/babel/generator-babel-boilerplate/wiki/Code-Climate).\n\n### Linting\n\nThis boilerplate uses [ESLint](http://eslint.org/) to lint your source. To\nchange the rules, edit the `.eslintrc` files in the root directory, respectively.\n\nGiven that your unit tests typically follow different rules from your library\ncode, it makes sense to lint them against a separate ESLint configuration. For\nthis reason, a separate, unit-test specific `.eslintrc` can be found in the\n`test` directory.\n\n### FAQ\n\n<details>\n<summary>\n  <b>What Babel features are supported?</b>\n</summary>\n\nNearly all Babel features *should* be supported by this boilerplate.\n\nIf you\'re using certain experimental features, like class properties, async-await,\ntypes, or decorators, then you\'ll need to install [babel-eslint](https://github.com/babel/babel-eslint)\nto use as the parser for ESLint.\n\nIf you\'re still getting an error, follow these steps:\n\n1. Double check to make sure that you\'re not typoing the new syntax ;)\n2. Determine what task is failing (for instance, is it ESLint?)\n3. Check that project\'s issue tracker to see if it is a known issue\n4. If it isn\'t, then open an issue here\n\nBecause of the fact that dependencies of this boilerplate, such as ESLint, are maintained by a team separate from Babel, there\nmay be a delay between when a new feature is added to Babel and when those other libraries add support for it.\n</details>\n\n<details>\n<summary>\n  <b>When should I consider using this boilerplate?</b>\n</summary>\n\nThis library is ideal for libraries that export a single file.\n</details>\n\n<details>\n<summary>\n  <b>When might I not want to use this boilerplate?</b>\n</summary>\n\nYou can always use this boilerplate as inspiration, but it works best for smaller libraries.\nIf you\'re building a full-scale webapp, you will likely need to make more changes to the build system.\nThis is because the boilerplate only deals with JavaScript; common build tasks\nlike CSS preprocessing, image minification, or HTML template building are\nintentionally omitted from this boilerplate.\n\nThere are so many different preferences and needs when it comes to building a\nwebapp, it wouldn\'t make sense to pick any one configuration for this boilerplate.\n\nIn the broader scheme of things, there\'s been discussion in the JavaScript community\nover whether or not boilerplates are good, or if they are bad. There\'s no denying\nthat you might could yourself lost is you pick this up without much experience\nwith the tools used in this project. But it could also save you a lot of time if you\'re\nsimply trying to get a build system set up and running.\n\nEven if you don\'t intend to use this boilerplate, I believe that boilerplates are\nuseful as an example and as a source of inspiration. I encourage you to look through\nthe current state of the project, and through its history, to see different ways to use\nBabel with various tools!\n</details>\n\n<details>\n<summary>\n  <b>What\'s the browser compatibility?</b>\n</summary>\n\nAs a rule of thumb, Babel is most reliable in IE9 and above.\n</details>\n\n<details>\n<summary>\n  <b>Are there examples?</b>\n</summary>\n\nQuite a few. Check them out on [the wiki](https://github.com/babel/generator-babel-boilerplate/wiki/Examples).\n</details>\n\n<details>\n<summary>\n  <b>Is there a version for Node-only projects?</b>\n</summary>\n\nThere is not a maintained version for Node-only projects. As of Node v6, many of\nthe most commonly used ES2015 features are [now supported natively in Node](http://node.green/).\nI strongly recommend that you weigh the pros and cons of adding a transpiling step to your\nserver-side code!\n</details>\n\n<details>\n<summary>\n  <b>What\'s the cost of transpiling?</b>\n</summary>\n\nA thorough analysis of this question can be found\n[here](https://github.com/samccone/The-cost-of-transpiling-es2015-in-2016).\n</details>\n\n<details>\n<summary>\n  <b>How can I use this with React?</b>\n</summary>\n\nDo you wish to use JSX? If the answer is no, then there is nothing that you need\nto do. If the answer is yes, then you need to install the `babel-preset-react`,\nand add it to your .babelrc file.\n\nAn example .babelrc file with this preset configured can be seen\n[here](https://github.com/jmeas/moolah/blob/ee451a9395b3169378f1df506d3a6142201e5306/.babelrc#L5).\n\nAlso, if you plan to use `jsx` files, you\'ll need to update the webpack configuration\nto apply the Babel loader to `.jsx` files. Out of the box, it only looks for `.js` files.\n\nThis involves changing\n[this line](https://github.com/babel/generator-babel-boilerplate/blob/5e4d990fd85eae221766b174c859fa3621132b7a/app/templates/gulpfile.js#L145)\nto be `{test: /\\.js|.jsx$/, exclude: /node_modules/, loader: \'babel-loader\'},`\n</details>\n\n<details>\n<summary>\n  <b>How can I export my library without the "default" property?</b>\n</summary>\n\nAs stated here, https://github.com/59naga/babel-plugin-add-module-exports:\n> Babel@6 doesn\'t export default module.exports any more\nSo just `npm install babel-plugin-add-module-exports --save-dev` and then add it to your .babelrc file:\n```\n{\n  "presets": ["latest"],\n  "plugins": [\n    "add-module-exports",\n    "transform-es2015-modules-umd"\n  ]\n}\n```\n</details>\n\n### Troubleshooting\n\n#### Accessing the `window` or DOM in tests isn\'t working\n\nThe tests run in Node, which has neither a `window` nor the DOM. To access the\nDOM, you\'ll need to do a bit of configuration. The quickest solution\nwould be to add JSDom. The test setup file\n[has a comment](https://github.com/babel/generator-babel-boilerplate/blob/a50dc0012b882721fdc45de87791d15c1afc3d55/app/templates/test/setup/node.js#L8-L19)\non the easiest way to get JSDom up-and-running (it takes all of 10 seconds).\n\nAlternatively, you could set up [PhantomJS](https://github.com/ariya/phantomjs) to\nrun the tests in a headless webkit environment, or set up [Karma](https://github.com/karma-runner/karma)\nto run the tests in real browsers.\n\n### Customizing\n\nThis boilerplate is, to a degree, customizable. To make changes,\nfind what you\'re looking to do below and follow the instructions.\n\n#### I want to change the primary source file\n\nThe primary source file for the library is `src/index.js`. Only the files that this\nfile imports will be included in the final build. To change the name of this entry file:\n\n1. Rename the file\n2. Update the value of `entryFileName` in `package.json` under `babelBoilerplateOptions`\n\n#### I want to change the destination file name or directory\n\n1. Update `main` in `package.json`\n\n#### I want to change what variable my module exports\n\n`MyLibrary` is the name of the variable exported from this boilerplate. You can change this by following\nthese steps:\n\n1. Ensure that the variable you\'re exporting exists in your scripts\n2. Update the value of `exportVarName` in `package.json` under `babelBoilerplateOptions`\n3. Check that the unit tests have been updated to reference the new value\n\n#### I don\'t want to export a variable\n\nWhen prompted for the name of the library\'s main variable, leave the response empty.\n\n#### My library depends on an external module\n\nInstall the module and use it in your scripts like usual. Then, go into the Gulpfile and\nadd the [`externals`](https://webpack.github.io/docs/configuration.html#externals) to the\nWebpack build options.\n\nIf you want to access the module itself in your unit test files, you will need to set up the\ntest environment to support the module. To do this:\n\n1. Load the module in the [test setup file](https://github.com/babel/generator-babel-boilerplate/blob/master/test/setup/setup.js).\n2. Add any imported variables to globals object in the\n[test globals JSON](https://github.com/babel/generator-babel-boilerplate/blob/master/test/setup/.globals.js).\n'