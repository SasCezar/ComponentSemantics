b".. image:: https://travis-ci.org/python-security/pyt.svg?branch=master\n    :target: https://travis-ci.org/python-security/pyt\n\n.. image:: https://readthedocs.org/projects/pyt/badge/?version=latest\n    :target: http://pyt.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://codeclimate.com/github/python-security/pyt/badges/coverage.svg\n    :target: https://codeclimate.com/github/python-security/pyt/coverage\n\n.. image:: https://badge.fury.io/py/python-taint.svg\n    :target: https://badge.fury.io/py/python-taint\n\n.. image:: https://img.shields.io/badge/PRs-welcome-ff69b4.svg\n    :target: https://github.com/python-security/pyt/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22+\n\n.. image:: https://img.shields.io/badge/python-v3.6-blue.svg\n    :target: https://pypi.org/project/python-taint/\n\n.. image:: https://img.shields.io/badge/Donate-Charity-orange.svg\n    :target: https://www.againstmalaria.com/donation.aspx\n\nThis project is no longer maintained\n====================================\n\n`Pyre`_ from Facebook is an amazing project that has a bright future and many smart people working on it.\nI would suggest, if you don't know that much about program analysis, that you understand how PyT works before diving into Pyre. Along with the `README's in most directories`_, there are the original `Master's Thesis`_ and `some slides`_.\nWith that said, **I am happy to review pull requests and give you write permissions if you make more than a few.**\n\nThere were a lot of great contributors to this project, I plan on working on other projects like `detect-secrets`_ and others (e.g. Pyre eventually) in the future if you'd like to work together more :)\n\nIf you are a security engineer with e.g. a Python codebase without type annotations, that Pyre won't handle, I would suggest you replace your sinks with a secure wrapper (something like `defusedxml`_), and alert off any uses of the standard sink. You can use `Bandit`_ to do this since dataflow analysis is not required, but you will have to trim it a lot, due to the high false-positive rate.\n\n.. _Pyre: https://github.com/facebook/pyre-check\n.. _README's in most directories: https://github.com/python-security/pyt/tree/master/pyt#how-it-works\n.. _Master's Thesis: https://projekter.aau.dk/projekter/files/239563289/final.pdf\n.. _some slides: https://docs.google.com/presentation/d/1JfAykAxR0DcJwwGfHmhrz1RhhKqYsnt5x_GY8CbTp7s\n.. _detect-secrets: https://github.com/Yelp/detect-secrets/blob/master/CHANGELOG.md#whats-new\n.. _defusedxml: https://pypi.org/project/defusedxml/\n.. _Bandit: https://github.com/PyCQA/bandit\n\n\nPython Taint\n============\n\nStatic analysis of Python web applications based on theoretical foundations (Control flow graphs, fixed point, dataflow analysis)\n\n--------\nFeatures\n--------\n\n* Detect command injection, SSRF, SQL injection, XSS, directory traveral etc.\n\n* A lot of customisation possible\n\nFor a look at recent changes, please see the `changelog`_.\n\n.. _changelog: https://github.com/python-security/pyt/blob/master/CHANGELOG.md\n\nExample usage and output:\n\n.. image:: https://raw.githubusercontent.com/KevinHock/rtdpyt/master/readme_static_files/pyt_example.png\n\nInstall\n=======\n\nBefore continuing, make sure you have python3.6 or 3.7 installed.\n\n.. code-block:: python\n\n\tpip install python-taint\n\t\xe2\x9c\xa8\xf0\x9f\x8d\xb0\xe2\x9c\xa8\n\nPyT can also be installed from source. To do so, clone the repo, and then run:\n\n.. code-block:: python\n\n  python3 setup.py install\n\nHow it Works\n============\n\nSoon you will find a `README.rst`_ in every directory in the ``pyt/`` folder, `start here`_.\n\n.. _README.rst: https://github.com/python-security/pyt/tree/master/pyt\n.. _start here: https://github.com/python-security/pyt/tree/master/pyt\n\n\nHow to Use\n============\n\n1. Choose a web framework\n\n`The -a option determines which functions will have their arguments tainted`_, by default it is Flask.\n\n2. (optional) Customize source and sink information\n\nUse the ``-t`` option to specify sources and sinks, by default `this file is used`_.\n\n3. (optional) Customize which library functions propagate taint\n\nFor functions from builtins or libraries, e.g. ``url_for`` or ``os.path.join``, use the ``-m`` option to specify whether or not they return tainted values given tainted inputs, by `default this file is used`_.\n\n.. _The -a option determines which functions will have their arguments tainted: https://github.com/python-security/pyt/tree/master/pyt/web_frameworks#web-frameworks\n.. _this file is used: https://github.com/python-security/pyt/blob/master/pyt/vulnerability_definitions/all_trigger_words.pyt\n.. _default this file is used: https://github.com/python-security/pyt/blob/master/pyt/vulnerability_definitions/blackbox_mapping.json\n\n\nUsage\n=====\n\n.. code-block::\n\n  usage: python -m pyt [-h] [-a ADAPTOR] [-pr PROJECT_ROOT]\n                       [-b BASELINE_JSON_FILE] [-j] [-t TRIGGER_WORD_FILE]\n                       [-m BLACKBOX_MAPPING_FILE] [-i] [-o OUTPUT_FILE]\n                       [--ignore-nosec] [-r] [-x EXCLUDED_PATHS]\n                       [--dont-prepend-root] [--no-local-imports]\n                       targets [targets ...]\n\n  required arguments:\n    targets               source file(s) or directory(s) to be scanned\n\n  important optional arguments:\n    -a ADAPTOR, --adaptor ADAPTOR\n                          Choose a web framework adaptor: Flask(Default),\n                          Django, Every or Pylons\n\n    -t TRIGGER_WORD_FILE, --trigger-word-file TRIGGER_WORD_FILE\n                          Input file with a list of sources and sinks\n\n    -m BLACKBOX_MAPPING_FILE, --blackbox-mapping-file BLACKBOX_MAPPING_FILE\n                              Input blackbox mapping file\n\n  optional arguments:\n    -pr PROJECT_ROOT, --project-root PROJECT_ROOT\n                          Add project root, only important when the entry file\n                          is not at the root of the project.\n\n    -b BASELINE_JSON_FILE, --baseline BASELINE_JSON_FILE\n                          Path of a baseline report to compare against (only\n                          JSON-formatted files are accepted)\n\n    -j, --json            Prints JSON instead of report.\n\n    -i, --interactive     Will ask you about each blackbox function call in\n                          vulnerability chains.\n\n    -o OUTPUT_FILE, --output OUTPUT_FILE\n                          Write report to filename\n\n    --ignore-nosec        Do not skip lines with # nosec comments\n\n    -r, --recursive       Find and process files in subdirectories\n\n    -x EXCLUDED_PATHS, --exclude EXCLUDED_PATHS\n                          Separate files with commas\n\n    --dont-prepend-root   In project root e.g. /app, imports are not prepended\n                          with app.*\n\n    --no-local-imports    If set, absolute imports must be relative to the\n                          project root. If not set, modules in the same\n                          directory can be imported just by their names.\n\nUsage from Source\n=================\n\nUsing it like a user ``python3 -m pyt examples/vulnerable_code/XSS_call.py``\n\nRunning the tests ``python3 -m tests``\n\nRunning an individual test file ``python3 -m unittest tests.import_test``\n\nRunning an individual test ``python3 -m unittest tests.import_test.ImportTest.test_import``\n\nContributions\n=============\n\nJoin our slack group: https://pyt-dev.slack.com/ - ask for invite: mr.thalmann@gmail.com\n\n`Guidelines`_\n\n.. _Guidelines: https://github.com/python-security/pyt/blob/master/CONTRIBUTIONS.md\n\n\nVirtual env setup guide\n=======================\n\nCreate a directory to hold the virtual env and project\n\n``mkdir ~/a_folder``\n\n``cd ~/a_folder``\n\nClone the project into the directory\n\n``git clone https://github.com/python-security/pyt.git``\n\nCreate the virtual environment\n\n``python3 -m venv ~/a_folder/``\n\nCheck that you have the right versions\n\n``python3 --version`` sample output ``Python 3.6.0``\n\n``pip --version`` sample output ``pip 9.0.1 from /Users/kevinhock/a_folder/lib/python3.6/site-packages (python 3.6)``\n\nChange to project directory\n\n``cd pyt``\n\nIn the future, just type ``source ~/a_folder/bin/activate`` to start developing.\n"