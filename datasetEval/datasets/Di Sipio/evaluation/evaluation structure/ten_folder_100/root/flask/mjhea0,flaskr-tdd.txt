b'# Flaskr - Intro to Flask, Test-Driven Development, and JavaScript\n\n[![Build Status](https://travis-ci.org/mjhea0/flaskr-tdd.svg?branch=master)](https://travis-ci.org/mjhea0/flaskr-tdd)\n\n[Share on Twitter](https://twitter.com/intent/tweet?text=Check%20out%20Flaskr%E2%80%94An%20intro%20to%20Flask%2C%20Test-Driven%20Development%2C%20and%20JavaScript%21%20https%3A%2F%2Fgithub.com%2Fmjhea0%2Fflaskr-tdd%20%23webdev%0A)\n\nAs many of you know, Flaskr -- a mini-blog-like-app -- is the app that you build for the official Flask [tutorial](https://flask.palletsprojects.com/tutorial). I\'ve gone through the tutorial more times than I care to admit. Anyway, I wanted to take the tutorial a step further by adding Test-Driven Development (TDD), a bit of JavaScript, and deployment. This post is that tutorial. Enjoy.\n\nAlso, if you are completely new to Flask and/or web development in general, it\'s important to grasp these basic fundamental concepts:\n\n1. The difference between GET and POST requests and how functions within the app handle each.\n1. What "requests" and "responses" are.\n1. How HTML pages are rendered and/or returned to the end user.\n\n> **NOTE**: This project is powered by **[TestDriven.io](https://testdriven.io/)**. Please support this open source project by purchasing one of our Flask courses. Learn how to build, test, and deploy microservices powered by Docker, Flask, and React!\n\n## What you\'re building\n\n![flaskr app](/flaskr-app.png)\n\n## Changelog\n\nThis tutorial was last updated on November 5th, 2019:\n\n- **11/05/2019**:\n  - Updated to Python 3.8.0, Flask 1.1.1, and Bootstrap 4.3.1.\n  - Replaced jQuery with vanilla JavaScript.\n  - Added Black and Flake8.\n  - Used Postgres in production.\n  - Restricted post delete requests.\n- **10/07/2018**: Updated to Python 3.7.0\n- **05/10/2018**: Updated to Python 3.6.5, Flask 1.0.2, Bootstrap 4.1.1\n- **10/16/2017**:\n  - Updated to Python 3.6.2\n  -  Updated to Bootstrap 4\n- **10/10/2017**: Added a search feature\n- **07/03/2017**: Updated to Python 3.6.1\n- **01/24/2016**: Updated to Python 3! (v3.5.1)\n- **08/24/2014**: PEP8 updates.\n- **02/25/2014**: Upgraded to SQLAlchemy.\n- **02/20/2014**: Completed AJAX.\n- **12/06/2013**: Added Bootstrap 3 styles\n- **11/29/2013**: Updated unit tests.\n- **11/19/2013**: Fixed typo. Updated unit tests.\n- **11/11/2013**: Added information on requests.\n\n## Contents\n\n1. [Test Driven Development?](#test-driven-development)\n1. [Download Python](#download-python)\n1. [Project Setup](#project-setup)\n1. [First Test](#first-test)\n1. [Flaskr Setup](#flaskr-setup)\n1. [Second Test](#second-test)\n1. [Database Setup](#database-setup)\n1. [Templates and Views](#templates-and-views)\n1. [Add Some Color](#add-some-color)\n1. [Test](#test)\n1. [JavaScript](#javascript)\n1. [Deployment](#deployment)\n1. [Test (again!)](#test-again)\n1. [Bootstrap](#bootstrap)\n1. [SQLAlchemy](#sqlalchemy)\n1. [Search Page](#search-page)\n1. [Login Required](#login-required)\n1. [Postgres Heroku](#postgres-heroku)\n1. [Linting and Code Formatting](#linting-and-code-formatting)\n1. [Conclusion](#conclusion)\n\n## Requirements\n\nThis tutorial utilizes the following requirements:\n\n1. Python v3.8.0\n1. Flask v1.1.1\n1. Flask-SQLAlchemy v2.4.1\n1. Gunicorn v19.9.0\n1. Psycopg2 v2.8.4\n1. Flake8 v3.7.9\n1. Black v19.10b0\n\n## Test Driven Development?\n\n![tdd](https://raw.githubusercontent.com/mjhea0/flaskr-tdd/master/tdd.png)\n\nTest-Driven Development (TDD) is an iterative development cycle that emphasizes writing automated tests before writing the actual feature or function. Put another way, TDD combines building and testing. This process not only helps ensure correctness of the code -- but also helps to indirectly evolve the design and architecture of the project at hand.\n\nTDD usually follows the "Red-Green-Refactor" cycle, as shown in the image above:\n\n1. Write a test\n1. Run the test (it should fail)\n1. Write just enough code for the test to pass\n2. Refactor code and retest, again and again (if necessary)\n\n> For more, check out [What is Test-Driven Development?](https://testdriven.io/test-driven-development/).\n\n## Download Python\n\nBefore beginning make sure you have the latest version of [Python 3.8](https://www.python.org/downloads/release/python-380/) installed, which you can download from [http://www.python.org/download/](http://www.python.org/download/).\n\n> **NOTE**: This tutorial uses Python v3.8.0.\n\nAlong with Python, the following tools are also installed:\n- [pip](https://pip.pypa.io/en/stable/) - a [package management](http://en.wikipedia.org/wiki/Package_management_system) system for Python, similar to gem or npm for Ruby and Node, respectively.\n- [venv](https://docs.python.org/3/library/venv.html) - used to create isolated environments for development. This is standard practice. Always, always, ALWAYS utilize virtual environments. If you don\'t, you will eventually run into problems with dependency conflicts.\n\n## Project Setup\n\n1. Create a new directory to store the project:\n\n    ```sh\n    $ mkdir flaskr-tdd\n    $ cd flaskr-tdd\n    ```\n\n1. Create and activate your virtual env:\n\n    ```sh\n    $ python3.8 -m venv env\n    $ source env/bin/activate\n    ```\n\n    > **NOTE**: You know that you are in a virtual environment as `env` is now showing before the `$` in your terminal -- `(env)$`. To exit the virtual environment, use the command `deactivate`. You can reactivate by navigating back to the project directory and running `source env/bin/activate`.\n\n1. Install Flask with pip:\n\n    ```sh\n    (env)$ pip install flask==1.1.1\n    ```\n\n## First Test\n\nLet\'s start with a simple "hello, world" app.\n\n1. Create a test file:\n\n    ```sh\n    (env)$ touch app.test.py\n    ```\n\n    Open this file in your favorite text editor -- like [Visual Studio Code](https://code.visualstudio.com/), [Sublime Text](https://www.sublimetext.com/), or [PyCharm](https://www.jetbrains.com/pycharm/) -- and then add the following code:\n\n    ```python\n    import unittest\n\n    from app import app\n\n\n    class BasicTestCase(unittest.TestCase):\n\n        def test_index(self):\n            tester = app.test_client(self)\n            response = tester.get(\'/\', content_type=\'html/text\')\n            self.assertEqual(response.status_code, 200)\n            self.assertEqual(response.data, b\'Hello, World!\')\n\n\n    if __name__ == \'__main__\':\n        unittest.main()\n    ```\n\n  Essentially, we\'re testing whether the response that we get back is "200" and that "Hello, World!" is displayed.\n\n1. Run the test:\n\n    ```sh\n    (env)$ python app.test.py\n    ```\n\n    If all goes well, this will fail:\n\n    ```sh\n    ModuleNotFoundError: No module named \'app\'\n    ```\n\n1. Now add the code for this to pass.\n\n    ```sh\n    (env)$ touch app.py\n    ```\n\n    Code:\n\n    ```python\n    from flask import Flask\n\n\n    app = Flask(__name__)\n\n\n    @app.route(\'/\')\n    def hello():\n        return \'Hello, World!\'\n\n\n    if __name__ == \'__main__\':\n        app.run()\n    ```\n\n1. Run the app:\n\n    ```sh\n    (env)$ python app.py\n    ```\n\n    Then Navigate to [http://localhost:5000/](http://localhost:5000/) in your browser of choice. You should see "Hello, World!" on your screen.\n\n    Return to the terminal. Kill the server with Ctrl+C.\n\n1. Run the test again:\n\n    ```sh\n    (env)$ python app.test.py\n\n    .\n    ----------------------------------------------------------------------\n    Ran 1 test in 0.010s\n\n    OK\n    ```\n\n    Nice.\n\n## Flaskr Setup\n\n1. Add structure\n\n    Add two folders, "static" and "templates", in the project root. Your file structure should now look like this:\n\n    ```sh\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 app.py\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 app.test.py\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 static\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 templates\n    ```\n\n1. SQL Schema\n\n    Create a new file called *schema.sql* and add the following code:\n\n    ```sql\n    drop table if exists entries;\n    create table entries (\n      id integer primary key autoincrement,\n      title text not null,\n      text text not null\n    );\n    ```\n\n  This will set up a single table with three fields -- "id", "title", and "text". SQLite will be used for our RDMS since it\'s part of the standard Python library and requires no configuration.\n\n## Second Test\n\nLet\'s create the basic file for running our application. Before that though, we need to write a test.\n\n1. Simply alter *app.test.py* like so:\n\n    ```python\n    import unittest\n\n    from app import app\n\n\n    class BasicTestCase(unittest.TestCase):\n\n        def test_index(self):\n            tester = app.test_client(self)\n            response = tester.get(\'/\', content_type=\'html/text\')\n            self.assertEqual(response.status_code, 404)\n\n\n    if __name__ == \'__main__\':\n        unittest.main()\n    ```\n\n    So, we are expecting a 404 error. Run the test. This will fail. Why? We are expecting a 404, but we actually get a 200 back since the route exists.\n\n1. Update *app.py*:\n\n    ```python\n    # imports\n    import sqlite3\n    from flask import Flask, request, session, g, redirect, url_for, \\\n                      abort, render_template, flash, jsonify\n\n\n    # configuration\n    DATABASE = \'flaskr.db\'\n    DEBUG = True\n    SECRET_KEY = \'my_precious\'\n    USERNAME = \'admin\'\n    PASSWORD = \'admin\'\n\n\n    # create and initialize app\n    app = Flask(__name__)\n    app.config.from_object(__name__)\n\n\n    if __name__ == \'__main__\':\n        app.run()\n    ```\n\n    Here, we add in all the required imports, create a configuration section for global variables, initialize the app, and then finally run the app.\n\n1. Run it:\n\n    ```sh\n    (env)$ python app.py\n    ```\n\n    Launch the server. You should see the 404 error because no routes or views are setup. Return to the terminal. Kill the server. Now run the test. It should pass.\n\n## Database Setup\n\nEssentially, we want to open a database connection, create the database based on the schema if it doesn\'t already exist, then close the connection each time a test is ran.\n\n1. How do we test for the existence of a file? Update *app.test.py*:\n\n    ```python\n    import os\n    import unittest\n\n    from app import app\n\n\n    class BasicTestCase(unittest.TestCase):\n\n        def test_index(self):\n            tester = app.test_client(self)\n            response = tester.get(\'/\', content_type=\'html/text\')\n            self.assertEqual(response.status_code, 404)\n\n        def test_database(self):\n            tester = os.path.exists("flaskr.db")\n            self.assertTrue(tester)\n\n\n    if __name__ == \'__main__\':\n        unittest.main()\n    ```\n\n    Run it to make sure it fails, indicating that the database does not exist.\n\n1. Now add the following code to *app.py*:\n\n    ```python\n    # connect to database\n    def connect_db():\n        """Connects to the database."""\n        rv = sqlite3.connect(app.config[\'DATABASE\'])\n        rv.row_factory = sqlite3.Row\n        return rv\n\n\n    # create the database\n    def init_db():\n        with app.app_context():\n            db = get_db()\n            with app.open_resource(\'schema.sql\', mode=\'r\') as f:\n                db.cursor().executescript(f.read())\n            db.commit()\n\n\n    # open database connection\n    def get_db():\n        if not hasattr(g, \'sqlite_db\'):\n            g.sqlite_db = connect_db()\n        return g.sqlite_db\n\n\n    # close database connection\n    @app.teardown_appcontext\n    def close_db(error):\n        if hasattr(g, \'sqlite_db\'):\n            g.sqlite_db.close()\n    ```\n\n    And add the `init_db()` function at the bottom of `app.py` to make sure we start the server each time with a fresh database:\n\n    ```python\n    if __name__ == \'__main__\':\n        init_db()\n        app.run()\n    ```\n\n    Now it\'s possible to create a database by starting up a Python shell and importing and calling the `init_db()` function:\n\n    ```python\n    >>> from app import init_db\n    >>> init_db()\n    ```\n\n    Close the shell, then run the test again. Does it pass? Now we know that the database has been created.\n\n## Templates and Views\n\nNext, we need to set up the templates and the associated views, which define the routes. Think about this from a user standpoint:\n\n1. Users should be able to log in and out.\n1. Once logged in, users should be able to post.\n1. Finally, users should be able to view the posts.\n\nWrite some tests for this first.\n\n### Tests\n\nTake a look at the final code. I added docstrings for explanation.\n\n```python\nimport os\nimport unittest\nimport tempfile\n\nimport app\n\n\nclass BasicTestCase(unittest.TestCase):\n\n    def test_index(self):\n        """Initial test: Ensure flask was set up correctly."""\n        tester = app.app.test_client(self)\n        response = tester.get(\'/\', content_type=\'html/text\')\n        self.assertEqual(response.status_code, 200)\n\n    def test_database(self):\n        """Initial test: Ensure that the database exists."""\n        tester = os.path.exists("flaskr.db")\n        self.assertEqual(tester, True)\n\n\nclass FlaskrTestCase(unittest.TestCase):\n\n    def setUp(self):\n        """Set up a blank temp database before each test."""\n        self.db_fd, app.app.config[\'DATABASE\'] = tempfile.mkstemp()\n        app.app.config[\'TESTING\'] = True\n        self.app = app.app.test_client()\n        app.init_db()\n\n    def tearDown(self):\n        """Destroy blank temp database after each test."""\n        os.close(self.db_fd)\n        os.unlink(app.app.config[\'DATABASE\'])\n\n    def login(self, username, password):\n        """Login helper function."""\n        return self.app.post(\'/login\', data=dict(\n            username=username,\n            password=password\n        ), follow_redirects=True)\n\n    def logout(self):\n        """Logout helper function."""\n        return self.app.get(\'/logout\', follow_redirects=True)\n\n    # assert functions\n\n    def test_empty_db(self):\n        """Ensure database is blank."""\n        rv = self.app.get(\'/\')\n        assert b\'No entries here so far\' in rv.data\n\n    def test_login_logout(self):\n        """Test login and logout using helper functions."""\n        rv = self.login(\n            app.app.config[\'USERNAME\'],\n            app.app.config[\'PASSWORD\']\n        )\n        assert b\'You were logged in\' in rv.data\n        rv = self.logout()\n        assert b\'You were logged out\' in rv.data\n        rv = self.login(\n            app.app.config[\'USERNAME\'] + \'x\',\n            app.app.config[\'PASSWORD\']\n        )\n        assert b\'Invalid username\' in rv.data\n        rv = self.login(\n            app.app.config[\'USERNAME\'],\n            app.app.config[\'PASSWORD\'] + \'x\'\n        )\n        assert b\'Invalid password\' in rv.data\n\n    def test_messages(self):\n        """Ensure that a user can post messages."""\n        self.login(\n            app.app.config[\'USERNAME\'],\n            app.app.config[\'PASSWORD\']\n        )\n        rv = self.app.post(\'/add\', data=dict(\n            title=\'<Hello>\',\n            text=\'<strong>HTML</strong> allowed here\'\n        ), follow_redirects=True)\n        assert b\'No entries here so far\' not in rv.data\n        assert b\'&lt;Hello&gt;\' in rv.data\n        assert b\'<strong>HTML</strong> allowed here\' in rv.data\n\n\nif __name__ == \'__main__\':\n    unittest.main()\n```\n\nRun the tests now:\n\n```sh\n(env)$ python app.test.py\n```\n\nAll will fail except for `test_database()`:\n\n```sh\n.FFFF\n======================================================================\nFAIL: test_index (__main__.BasicTestCase)\nInitial test: Ensure flask was set up correctly.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File "app.test.py", line 14, in test_index\n    self.assertEqual(response.status_code, 200)\nAssertionError: 404 != 200\n\n======================================================================\nFAIL: test_empty_db (__main__.FlaskrTestCase)\nEnsure database is blank.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File "app.test.py", line 52, in test_empty_db\n    assert b\'No entries here so far\' in rv.data\nAssertionError\n\n======================================================================\nFAIL: test_login_logout (__main__.FlaskrTestCase)\nTest login and logout using helper functions.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File "app.test.py", line 60, in test_login_logout\n    assert b\'You were logged in\' in rv.data\nAssertionError\n\n======================================================================\nFAIL: test_messages (__main__.FlaskrTestCase)\nEnsure that a user can post messages.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File "app.test.py", line 85, in test_messages\n    assert b\'&lt;Hello&gt;\' in rv.data\nAssertionError\n\n----------------------------------------------------------------------\nRan 5 tests in 0.030s\n\nFAILED (failures=4)\n```\n\nLet\'s get these all green, one at a time...\n\n### Show Entries\n\n1. First, add a view for displaying the entries to *app.py*:\n\n    ```python\n    @app.route(\'/\')\n    def show_entries():\n        """Searches the database for entries, then displays them."""\n        db = get_db()\n        cur = db.execute(\'select * from entries order by id desc\')\n        entries = cur.fetchall()\n        return render_template(\'index.html\', entries=entries)\n    ```\n\n1. Then add the *index.html* template to the "templates" folder:\n\n    ```html\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>Flaskr</title>\n      <link rel="stylesheet" type="text/css" href="{{ url_for(\'static\', filename=\'style.css\') }}">\n    </head>\n    <body>\n      <div class="page">\n        <h1>Flaskr-TDD</h1>\n\n        <div class="metanav">\n          {% if not session.logged_in %}\n            <a href="{{ url_for(\'login\') }}">log in</a>\n          {% else %}\n            <a href="{{ url_for(\'logout\') }}">log out</a>\n          {% endif %}\n        </div>\n\n        {% for message in get_flashed_messages() %}\n          <div class="flash">{{ message }}</div>\n        {% endfor %}\n\n        {% block body %}{% endblock %}\n\n        {% if session.logged_in %}\n          <form action="{{ url_for(\'add_entry\') }}" method="post" class="add-entry">\n            <dl>\n              <dt>Title:</dt>\n              <dd><input type="text" size="30" name="title"></dd>\n              <dt>Text:</dt>\n              <dd><textarea name="text" rows="5" cols="40"></textarea></dd>\n              <dd><input type="submit" value="Share"></dd>\n            </dl>\n          </form>\n        {% endif %}\n\n        <ul class="entries">\n          {% for entry in entries %}\n            <li><h2>{{ entry.title }}</h2>{{ entry.text|safe }}</li>\n          {% else %}\n            <li><em>No entries yet. Add some!</em></li>\n          {% endfor %}\n        </ul>\n      </div>\n    </body>\n    </html>\n    ```\n\n1. Run the tests now. You should see:\n\n    ```sh\n    Ran 5 tests in 0.048s\n\n    FAILED (failures=2, errors=2)\n    ```\n\n### User Login and Logout\n\n1. Update *app.py*:\n\n    ```python\n    @app.route(\'/login\', methods=[\'GET\', \'POST\'])\n    def login():\n        """User login/authentication/session management."""\n        error = None\n        if request.method == \'POST\':\n            if request.form[\'username\'] != app.config[\'USERNAME\']:\n                error = \'Invalid username\'\n            elif request.form[\'password\'] != app.config[\'PASSWORD\']:\n                error = \'Invalid password\'\n            else:\n                session[\'logged_in\'] = True\n                flash(\'You were logged in\')\n                return redirect(url_for(\'index\'))\n        return render_template(\'login.html\', error=error)\n\n\n    @app.route(\'/logout\')\n    def logout():\n        """User logout/authentication/session management."""\n        session.pop(\'logged_in\', None)\n        flash(\'You were logged out\')\n        return redirect(url_for(\'index\'))\n      ```\n\n    In the above `login()` function, the decorator indicates that the route can accept either a GET or POST request. Put simply, a request is initiated by the end user when they access the `/login` url. The difference between these requests is simple -- GET is used for accessing a webpage, while POST is used when information is sent to the server. Thus, when a user accesses the `/login` url, they are using a GET request, but when they attempt to log in, a POST request is used.\n\n1. Add the template - *login.html*:\n\n    ```html\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>Flaskr-TDD | Login</title>\n      <link rel="stylesheet" type="text/css" href="{{ url_for(\'static\', filename=\'style.css\') }}">\n    </head>\n    <body>\n      <div class="page">\n        <h1>Flaskr</h1>\n\n        <div class="metanav">\n          {% if not session.logged_in %}\n            <a href="{{ url_for(\'login\') }}">log in</a>\n          {% else %}\n            <a href="{{ url_for(\'logout\') }}">log out</a>\n          {% endif %}\n        </div>\n\n        {% for message in get_flashed_messages() %}\n          <div class="flash">{{ message }}</div>\n        {% endfor %}\n\n        {% block body %}{% endblock %}\n\n        <h2>Login</h2>\n\n        {% if error %}\n          <p class="error"><strong>Error:</strong> {{ error }}</p>\n        {% endif %}\n\n        <form action="{{ url_for(\'login\') }}" method="post">\n          <dl>\n            <dt>Username:</dt>\n            <dd><input type="text" name="username"></dd>\n            <dt>Password:</dt>\n            <dd><input type="password" name="password"></dd>\n            <dd><input type="submit" value="Login"></dd>\n          </dl>\n        </form>\n      </div>\n    </body>\n    </html>\n    ```\n\n1. Run the tests again.\n\n    You should still see some errors! Look at one of the errors -- `werkzeug.routing.BuildError: Could not build url for endpoint \'index\'. Did you mean \'login\' instead?`\n\n    Essentially, we are trying to redirect to the `index()` function, which does not exist. Rename the `show_entries()` function to `index()` within *app.py* then re-test:\n\n    ```sh\n    Ran 5 tests in 0.048s\n\n    FAILED (failures=1, errors=2)\n    ```\n\n1. Next, add in a view for adding entries:\n\n    ```python\n    @app.route(\'/add\', methods=[\'POST\'])\n    def add_entry():\n        """Add new post to database."""\n        if not session.get(\'logged_in\'):\n            abort(401)\n        db = get_db()\n        db.execute(\n            \'insert into entries (title, text) values (?, ?)\',\n            [request.form[\'title\'], request.form[\'text\']]\n        )\n        db.commit()\n        flash(\'New entry was successfully posted\')\n        return redirect(url_for(\'index\'))\n    ```\n\n1. Retest.\n\n    Now you should see:\n\n    ```sh\n    ..F..\n    ======================================================================\n    FAIL: test_empty_db (__main__.FlaskrTestCase)\n    Ensure database is blank.\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File "app.test.py", line 52, in test_empty_db\n        assert b\'No entries here so far\' in rv.data\n    AssertionError\n\n    ----------------------------------------------------------------------\n    Ran 5 tests in 0.054s\n\n    FAILED (failures=1)\n    ```\n\n    This error is asserting that when the route `/` is hit, the message "No entries here so far" is returned. Check the *index.html* template. The message actually reads "No entries yet. Add some!". So update the test and then retest:\n\n    ```sh\n    Ran 5 tests in 0.055s\n\n    OK\n    ```\n\n    Perfect.\n\n## Add Some Color\n\nSave the following styles to a new file called *style.css* in the "static" folder:\n\n```css\nbody {\n  font-family: sans-serif;\n  background: #eee;\n}\n\na, h1, h2 {\n  color: #377BA8;\n}\n\nh1, h2 {\n  font-family: \'Georgia\', serif;\n  margin: 0;\n}\n\nh1 {\n  border-bottom: 2px solid #eee;\n}\n\nh2 {\n  font-size: 1.2em;\n}\n\n.page {\n  margin: 2em auto;\n  width: 35em;\n  border: 5px solid #ccc;\n  padding: 0.8em;\n  background: white;\n}\n\n.entries {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.entries li {\n  margin: 0.8em 1.2em;\n}\n\n.entries li h2 {\n  margin-left: -1em;\n}\n\n.add-entry {\n  font-size: 0.9em;\n  border-bottom: 1px solid #ccc;\n}\n\n.add-entry dl {\n  font-weight: bold;\n}\n\n.metanav {\n  text-align: right;\n  font-size: 0.8em;\n  padding: 0.3em;\n  margin-bottom: 1em;\n  background: #fafafa;\n}\n\n.flash {\n  background: #CEE5F5;\n  padding: 0.5em;\n  border: 1px solid #AACBE2;\n}\n\n.error {\n  background: #F0D6D6;\n  padding: 0.5em;\n}\n```\n\n## Test\n\nRun your app, log in (username/password = "admin"), add a post, log out.\n\n## JavaScript\n\nNow let\'s add some JavaScript to make the site slightly more interactive.\n\n1. Open *index.html* and update the first `<li`> like so:\n\n    ```html\n    <li class="entry">\n      <h2 id="{{ entry.id }}">{{ entry.title }}</h2>\n      {{ entry.text|safe }}\n    </li>\n    ```\n\n    Now we can use JavaScript to target each `<li`>. First, we need to add the following script to the document just before the closing body tag:\n\n    ```html\n    <script type="text/javascript" src="{{url_for(\'static\', filename=\'main.js\') }}"></script>\n    ```\n\n1. Create a *main.js* file in your "static" directory and add the following code:\n\n    ```javascript\n    (function() {\n      console.log(\'ready!\'); // sanity check\n    })();\n\n    const postElements = document.getElementsByClassName(\'entry\');\n\n    for (var i = 0; i < postElements.length; i++) {\n      postElements[i].addEventListener(\'click\', function() {\n        const postId = this.getElementsByTagName(\'h2\')[0].getAttribute(\'id\');\n        const node = this;\n        fetch(`/delete/${postId}`)\n          .then(function(resp) {\n            return resp.json();\n          })\n          .then(function(result) {\n            if (result.status === 1) {\n              node.parentNode.removeChild(node);\n              console.log(result);\n            }\n            location.reload();\n          })\n          .catch(function(err) {\n            console.log(err);\n          });\n      });\n    }\n    ```\n\n1. Add a new function in *app.py* to remove the post from the database:\n\n    ```python\n    @app.route(\'/delete/<post_id>\', methods=[\'GET\'])\n    def delete_entry(post_id):\n        """Delete post from database"""\n        result = {\'status\': 0, \'message\': \'Error\'}\n        try:\n            db = get_db()\n            db.execute(\'delete from entries where id=\' + post_id)\n            db.commit()\n            result = {\'status\': 1, \'message\': "Post Deleted"}\n        except Exception as e:\n            result = {\'status\': 0, \'message\': repr(e)}\n        return jsonify(result)\n    ```\n\n1. Finally, add a new test:\n\n    ```python\n    def test_delete_message(self):\n        """Ensure the messages are being deleted."""\n        rv = self.app.get(\'/delete/1\')\n        data = json.loads((rv.data).decode(\'utf-8\'))\n        self.assertEqual(data[\'status\'], 1)\n    ```\n\n    Make sure to add the following import as well -- `import json`.\n\n    Manually test this out by running the server and adding two new entries. Click on one of them. It should be removed from the DOM as well as the database. Double check this.\n\n    Then run your automated test suite. It should pass:\n\n    ```sh\n    ......\n    ----------------------------------------------------------------------\n    Ran 6 tests in 0.062s\n\n    OK\n    ```\n\n## Deployment\n\nWith the app in a working state, let\'s shift gears and deploy the app to [Heroku](https://www.heroku.com).\n\n1. To do this, first sign up and then install the [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli).\n\n1. Next, install a production-grade WSGI web server called [Gunicorn](http://gunicorn.org/):\n\n    ```sh\n    (env)$ pip install gunicorn==19.9.0\n    ```\n\n1. Create a [Procfile](https://devcenter.heroku.com/articles/procfile) in the project root:\n\n    ```sh\n    (env)$ touch Procfile\n    ```\n\n    And add the following code:\n\n    ```sh\n    web: gunicorn app:app\n    ```\n\n1. Create a *requirements.txt* file to specify the external dependencies that need to be installed for the app to work:\n\n    ```sh\n    (env)$ pip freeze > requirements.txt\n    ```\n\n1. Create a *.gitignore* file in the project root:\n\n    ```sh\n    (env)$ touch .gitignore\n    ```\n\n    And include the following files and folders (so they are not included in version control):\n\n    ```sh\n    env\n    *.pyc\n    *.DS_Store\n    __pycache__\n    ```\n\n1. To specify the correct Python runtime, add a new file to the project root called *runtime.txt*:\n\n    ```\n    python-3.8.0\n    ```\n\n1. Add a local Git repo:\n\n    ```sh\n    (env)$ git init\n    (env)$ git add -A\n    (env)$ git commit -m "initial"\n    ```\n\n1. Deploy to Heroku:\n\n    ```sh\n    (env)$ heroku create\n    (env)$ git push heroku master\n    ```\n\n## Test (again!)\n\nLet\'s test this in the cloud. Run `heroku open` to open the app in the browser.\n\n## Bootstrap\n\nLet\'s update the styles with [Bootstrap 4](http://getbootstrap.com/).\n\n1. First, remove the *style.css* stylesheet from both *index.html* and *login.html*. Then add this stylesheet to both files:\n\n    ```html\n    <link rel="stylesheet" type="text/css" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">\n    ```\n\n    Now we have full access to all of the Bootstrap helper classes.\n\n1. Replace the code in *login.html* with:\n\n    ```html\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>Flaskr-TDD | Login</title>\n      <link rel="stylesheet" type="text/css" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">\n    </head>\n    <body>\n      <div class="container">\n        <br><br>\n        <h1>Flaskr</h1>\n        <br><br>\n\n        {% for message in get_flashed_messages() %}\n          <div class="flash alert alert-success col-sm-4" role="success">{{ message }}</div>\n        {% endfor %}\n\n        <h3>Login</h3>\n\n        {% if error %}<p class="alert alert-danger col-sm-4" role="danger"><strong>Error:</strong> {{ error }}</p>{% endif %}\n\n        <form action="{{ url_for(\'login\') }}" method="post" class="form-group">\n          <dl>\n            <dt>Username:</dt>\n            <dd><input type="text" name="username" class="form-control col-sm-4"></dd>\n            <dt>Password:</dt>\n            <dd><input type="password" name="password" class="form-control col-sm-4"></dd>\n            <br><br>\n            <dd><input type="submit" class="btn btn-primary" value="Login"></dd>\n            <span>Use "admin" for username and password</span>\n          </dl>\n        </form>\n      </div>\n      <script type="text/javascript" src="{{url_for(\'static\', filename=\'main.js\') }}"></script>\n    </body>\n    </html>\n    ```\n\n1. And replace the code in *index.html* with:\n\n    ```html\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>Flaskr</title>\n      <link rel="stylesheet" type="text/css" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">\n    </head>\n    <body>\n      <div class="container">\n        <br><br>\n        <h1>Flaskr</h1>\n        <br><br>\n\n        {% if not session.logged_in %}\n          <a class="btn btn-success" role="button" href="{{ url_for(\'login\') }}">log in</a>\n        {% else %}\n          <a class="btn btn-warning" role="button" href="{{ url_for(\'logout\') }}">log out</a>\n        {% endif %}\n\n        <br><br>\n\n        {% for message in get_flashed_messages() %}\n          <div class="flash alert alert-success col-sm-4" role="success">{{ message }}</div>\n        {% endfor %}\n\n        {% if session.logged_in %}\n          <form action="{{ url_for(\'add_entry\') }}" method="post" class="add-entry form-group">\n            <dl>\n              <dt>Title:</dt>\n              <dd><input type="text" size="30" name="title" class="form-control col-sm-4"></dd>\n              <dt>Text:</dt>\n              <dd><textarea name="text" rows="5" cols="40" class="form-control col-sm-4"></textarea></dd>\n              <br><br>\n              <dd><input type="submit" class="btn btn-primary" value="Share"></dd>\n            </dl>\n          </form>\n        {% endif %}\n\n        <br>\n\n        <ul class="entries">\n          {% for entry in entries %}\n            <li class="entry"><h2 id="{{ entry.id }}">{{ entry.title }}</h2>{{ entry.text|safe }}</li>\n          {% else %}\n            <li><em>No entries yet. Add some!</em></li>\n          {% endfor %}\n        </ul>\n      </div>\n      <script type="text/javascript" src="{{url_for(\'static\', filename=\'main.js\') }}"></script>\n    </body>\n    </html>\n    ```\n\n1. Run the app locally:\n\n    ```sh\n    (env)$ python app.py\n    ```\n\n    Check out your changes in the browser!\n\n## SQLAlchemy\n\nLet\'s upgrade to [Flask-SQLAlchemy](https://flask-sqlalchemy.palletsprojects.com/), in order to better manage our database.\n\n### Setup SQLAlchemy\n\n1. Start by installing Flask-SQLAlchemy:\n\n    ```sh\n    (env)$ pip install Flask-SQLAlchemy==2.4.1\n    ```\n\n1. Create a *create_db.py* file, then add the following code:\n\n    ```python\n    # create_db.py\n\n\n    from app import db\n    from models import Flaskr\n\n\n    # create the database and the db table\n    db.create_all()\n\n    # commit the changes\n    db.session.commit()\n    ```\n\n    This file will be used to create our new database. Go ahead and delete the old *.db* (*flaskr.db*) along with the *schema.sql* file.\n\n1. Next add a *models.py* file, which will be used to generate the new schema:\n\n    ```python\n    from app import db\n\n\n    class Flaskr(db.Model):\n\n        __tablename__ = \'flaskr\'\n\n        post_id = db.Column(db.Integer, primary_key=True)\n        title = db.Column(db.String, nullable=False)\n        text = db.Column(db.String, nullable=False)\n\n        def __init__(self, title, text):\n            self.title = title\n            self.text = text\n\n        def __repr__(self):\n            return f\'<title {self.body}>\'\n    ```\n\n### Update *app.py*\n\n```python\n# imports\nimport os\n\nfrom flask import Flask, request, session, g, redirect, url_for, \\\n                  abort, render_template, flash, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\n\n# get the folder where this file runs\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\n# configuration\nDATABASE = \'flaskr.db\'\nDEBUG = True\nSECRET_KEY = \'my_precious\'\nUSERNAME = \'admin\'\nPASSWORD = \'admin\'\n\n# define the full path for the database\nDATABASE_PATH = os.path.join(basedir, DATABASE)\n\n# database config\nSQLALCHEMY_DATABASE_URI = \'sqlite:///\' + DATABASE_PATH\nSQLALCHEMY_TRACK_MODIFICATIONS = False\n\n# create app\napp = Flask(__name__)\napp.config.from_object(__name__)\ndb = SQLAlchemy(app)\n\nimport models\n\n\n@app.route(\'/\')\ndef index():\n    """Searches the database for entries, then displays them."""\n    entries = db.session.query(models.Flaskr)\n    return render_template(\'index.html\', entries=entries)\n\n\n@app.route(\'/add\', methods=[\'POST\'])\ndef add_entry():\n    """Adds new post to the database."""\n    if not session.get(\'logged_in\'):\n        abort(401)\n    new_entry = models.Flaskr(request.form[\'title\'], request.form[\'text\'])\n    db.session.add(new_entry)\n    db.session.commit()\n    flash(\'New entry was successfully posted\')\n    return redirect(url_for(\'index\'))\n\n\n@app.route(\'/login\', methods=[\'GET\', \'POST\'])\ndef login():\n    """User login/authentication/session management."""\n    error = None\n    if request.method == \'POST\':\n        if request.form[\'username\'] != app.config[\'USERNAME\']:\n            error = \'Invalid username\'\n        elif request.form[\'password\'] != app.config[\'PASSWORD\']:\n            error = \'Invalid password\'\n        else:\n            session[\'logged_in\'] = True\n            flash(\'You were logged in\')\n            return redirect(url_for(\'index\'))\n    return render_template(\'login.html\', error=error)\n\n\n@app.route(\'/logout\')\ndef logout():\n    """User logout/authentication/session management."""\n    session.pop(\'logged_in\', None)\n    flash(\'You were logged out\')\n    return redirect(url_for(\'index\'))\n\n\n@app.route(\'/delete/<int:post_id>\', methods=[\'GET\'])\ndef delete_entry(post_id):\n    """Deletes post from database."""\n    result = {\'status\': 0, \'message\': \'Error\'}\n    try:\n        new_id = post_id\n        db.session.query(models.Flaskr).filter_by(post_id=new_id).delete()\n        db.session.commit()\n        result = {\'status\': 1, \'message\': "Post Deleted"}\n        flash(\'The entry was deleted.\')\n    except Exception as e:\n        result = {\'status\': 0, \'message\': repr(e)}\n    return jsonify(result)\n\n\nif __name__ == \'__main__\':\n    app.run()\n```\n\nNotice the changes in the config at the top as well the means in which we\'re now accessing and manipulating the database in each view function -- via SQLAlchemy instead of vanilla SQL.\n\n### Create the DB\n\nRun the following command to create the initial database:\n\n```sh\n(env)$ python create_db.py\n```\n\n### Update *index.html*\n\nUpdate this line:\n\n```python\n<li class="entry"><h2 id="{{ entry.post_id }}">{{ entry.title }}</h2>{{ entry.text|safe }}</li>\n```\n\nPay attention to the `post_id`. Check the database to ensure that there is a matching field.\n\n### Tests\n\nFinally, update the tests:\n\n```python\nimport unittest\nimport os\nimport json\n\nfrom app import app, db\n\nTEST_DB = \'test.db\'\n\n\nclass BasicTestCase(unittest.TestCase):\n\n    def test_index(self):\n        """initial test. ensure flask was set up correctly"""\n        tester = app.test_client(self)\n        response = tester.get(\'/\', content_type=\'html/text\')\n        self.assertEqual(response.status_code, 200)\n\n    def test_database(self):\n        """initial test. ensure that the database exists"""\n        tester = os.path.exists("flaskr.db")\n        self.assertTrue(tester)\n\n\nclass FlaskrTestCase(unittest.TestCase):\n\n    def setUp(self):\n        """Set up a blank temp database before each test"""\n        basedir = os.path.abspath(os.path.dirname(__file__))\n        app.config[\'TESTING\'] = True\n        app.config[\'SQLALCHEMY_DATABASE_URI\'] = \'sqlite:///\' + \\\n            os.path.join(basedir, TEST_DB)\n        self.app = app.test_client()\n        db.create_all()\n\n    def tearDown(self):\n        """Destroy blank temp database after each test"""\n        db.drop_all()\n\n    def login(self, username, password):\n        """Login helper function"""\n        return self.app.post(\'/login\', data=dict(\n            username=username,\n            password=password\n        ), follow_redirects=True)\n\n    def logout(self):\n        """Logout helper function"""\n        return self.app.get(\'/logout\', follow_redirects=True)\n\n    # assert functions\n\n    def test_empty_db(self):\n        """Ensure database is blank"""\n        rv = self.app.get(\'/\')\n        self.assertIn(b\'No entries yet. Add some!\', rv.data)\n\n    def test_login_logout(self):\n        """Test login and logout using helper functions"""\n        rv = self.login(app.config[\'USERNAME\'], app.config[\'PASSWORD\'])\n        self.assertIn(b\'You were logged in\', rv.data)\n        rv = self.logout()\n        self.assertIn(b\'You were logged out\', rv.data)\n        rv = self.login(app.config[\'USERNAME\'] + \'x\', app.config[\'PASSWORD\'])\n        self.assertIn(b\'Invalid username\', rv.data)\n        rv = self.login(app.config[\'USERNAME\'], app.config[\'PASSWORD\'] + \'x\')\n        self.assertIn(b\'Invalid password\', rv.data)\n\n    def test_messages(self):\n        """Ensure that user can post messages"""\n        self.login(app.config[\'USERNAME\'], app.config[\'PASSWORD\'])\n        rv = self.app.post(\'/add\', data=dict(\n            title=\'<Hello>\',\n            text=\'<strong>HTML</strong> allowed here\'\n        ), follow_redirects=True)\n        self.assertNotIn(b\'No entries here so far\', rv.data)\n        self.assertIn(b\'&lt;Hello&gt;\', rv.data)\n        self.assertIn(b\'<strong>HTML</strong> allowed here\', rv.data)\n\n    def test_delete_message(self):\n        """Ensure the messages are being deleted"""\n        rv = self.app.get(\'/delete/1\')\n        data = json.loads(rv.data)\n        self.assertEqual(data[\'status\'], 1)\n\n\nif __name__ == \'__main__\':\n    unittest.main()\n```\n\nWe\'ve mostly just updated the `setUp()` and `tearDown()` methods.\n\nRun the tests, and then manually test it by running the server and logging in and out, adding new entries, and deleting old entries.\n\nIf all is well, update your requirements (`pip  freeze > requirements.txt`) commit your code, then PUSH the new version to Heroku!\n\n## Search Page\n\nLet\'s add a search page to our blog. It will be a nice feature that will come in handy after we have a number of blog posts.\n\n### Update *app.py*\n\n```python\n@app.route(\'/search/\', methods=[\'GET\'])\ndef search():\n    query = request.args.get("query")\n    entries = db.session.query(models.Flaskr)\n    if query:\n        return render_template(\'search.html\', entries=entries, query=query)\n    return render_template(\'search.html\')\n```\n\n> **NOTE**: Be sure to write a test for this on your own!\n\n### Add *search.html*\n\nIn the "templates" folder create a new file called *search.html*:\n\n```sh\n(env)$ touch search.html\n```\n\nNow add the following code to *search.html*:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Flaskr</title>\n  <link rel="stylesheet" type="text/css" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">\n</head>\n<body>\n  <div class="container">\n    <br><br>\n    <h1>Flaskr</h1>\n    <br><br>\n\n    <a class="btn btn-primary" role="button" href="{{ url_for(\'index\') }}"> Home </a>\n\n    {% if not session.logged_in %}\n      <a class="btn btn-success" role="button" href="{{ url_for(\'login\') }}">log in</a>\n    {% else %}\n      <a class="btn btn-warning" role="button" href="{{ url_for(\'logout\') }}">log out</a>\n    {% endif %}\n\n    <br><br>\n\n    {% for message in get_flashed_messages() %}\n      <div class="flash alert alert-success col-sm-4" role="success">{{ message }}</div>\n    {% endfor %}\n\n    <form action="{{ url_for(\'search\') }}" method="get" class="from-group">\n      <dl>\n        <dt>Search:</dt>\n        <dd><input type="text" name="query" class="form-control col-sm-4" ></dd>\n        <br>\n        <dd><input type="submit" class="btn btn-info" value="Search" ></dd>\n      </dl>\n    </form>\n\n    <ul class="entries">\n      {% for entry in entries %}\n        {% if query.lower() in entry.title.lower() or query.lower() in entry.text.lower() %}\n        <li class="entry"><h2 id="{{ entry.post_id }}">{{ entry.title }}</h2>{{ entry.text|safe }}</li>\n        {% endif %}\n      {% endfor %}\n    </ul>\n  </div>\n  <script type="text/javascript" src="{{url_for(\'static\', filename=\'main.js\') }}"></script>\n</body>\n</html>\n```\n\n### Update *index.html*\n\nAdd a search button for better navigation just below `<h1>Flaskr</h1>`:\n\n```html\n<a class="btn btn-info" role="button" href="{{ url_for(\'search\') }}">Search</a>\n```\n\nTest it out locally. If all is well, commit your code and update the version on Heroku.\n\n## Login Required\n\nCurrently, posts can be deleted by anyone. Let\'s change that so one has to be logged in in order to delete a post.\n\nAdd the following decorator to *app.py*:\n\n```python\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not session.get(\'logged_in\'):\n            flash(\'Please log in.\')\n            return jsonify({\'status\': 0, \'message\': \'Please log in.\'}), 401\n        return f(*args, **kwargs)\n    return decorated_function\n```\n\nDon\'t forget the import:\n\n```python\nfrom functools import wraps\n```\n\n> **NOTE**: Be sure to write tests for this on your own!\n\nNext, add the decorator to the `delete_entry` view:\n\n```python\n@app.route(\'/delete/<int:post_id>\', methods=[\'GET\'])\n@login_required\ndef delete_entry(post_id):\n    """Deletes post from database."""\n    result = {\'status\': 0, \'message\': \'Error\'}\n    try:\n        new_id = post_id\n        db.session.query(models.Flaskr).filter_by(post_id=new_id).delete()\n        db.session.commit()\n        result = {\'status\': 1, \'message\': "Post Deleted"}\n        flash(\'The entry was deleted.\')\n    except Exception as e:\n        result = {\'status\': 0, \'message\': repr(e)}\n    return jsonify(result)\n```\n\nUpdate the test:\n\n```python\ndef test_delete_message(self):\n    """Ensure the messages are being deleted"""\n    rv = self.app.get(\'/delete/1\')\n    data = json.loads(rv.data)\n    self.assertEqual(data[\'status\'], 0)\n    self.login(app.config[\'USERNAME\'], app.config[\'PASSWORD\'])\n    rv = self.app.get(\'/delete/1\')\n    data = json.loads(rv.data)\n    self.assertEqual(data[\'status\'], 1)\n```\n\nTest it out locally again. If all is well, commit your code and update the version on Heroku.\n\n## Postgres Heroku\n\nSQLite is a great database to use in order to get an app up and running quickly. That said, it\'s not intended to be used as a production grade database. So, let\'s move to using Postgres on Heroku.\n\nStart by provisioning a new [hobby-dev](https://devcenter.heroku.com/articles/heroku-postgres-plans#hobby-tier) plan Postgres database:\n\n```sh\n(env)$ heroku addons:create heroku-postgresql:hobby-dev\n```\n\nOnce created, the database URL can be access via the `DATABASE_URL` environment variable:\n\n```sh\n(env)$ heroku config\n```\n\nYou should see something similar to:\n\n```sh\n=== dry-garden-92414 Config Vars\nDATABASE_URL: postgres://wqvcyzyveczscw:df14796eabbf0a1d9eb8a96a206bcd906101162c8ef7f2e7be5e2f7514c22b48@ec2-54-227-250-19.compute-1.amazonaws.com:5432/d64vugb1eio9h1\n```\n\nNext, update *app.py* like so:\n\n```python\n# imports\nimport os\nfrom functools import wraps\n\nfrom flask import Flask, request, session, g, redirect, url_for, \\\n                  abort, render_template, flash, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\n\n# get the folder where this file runs\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\n# configuration\nSECRET_KEY = \'my_precious\'\nUSERNAME = \'admin\'\nPASSWORD = \'admin\'\n\n# database config\nSQLALCHEMY_DATABASE_URI = os.getenv(\n    \'DATABASE_URL\',\n    f\'sqlite:///{os.path.join(basedir, "flaskr.db")}\'\n)\nSQLALCHEMY_TRACK_MODIFICATIONS = False\n\n# create app\napp = Flask(__name__)\napp.config.from_object(__name__)\ndb = SQLAlchemy(app)\n\nimport models\n\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not session.get(\'logged_in\'):\n            flash(\'Please log in.\')\n            return jsonify({\'status\': 0, \'message\': \'Please log in.\'}), 401\n        return f(*args, **kwargs)\n    return decorated_function\n\n\n@app.route(\'/\')\ndef index():\n    """Searches the database for entries, then displays them."""\n    entries = db.session.query(models.Flaskr)\n    return render_template(\'index.html\', entries=entries)\n\n\n@app.route(\'/add\', methods=[\'POST\'])\ndef add_entry():\n    """Adds new post to the database."""\n    if not session.get(\'logged_in\'):\n        abort(401)\n    new_entry = models.Flaskr(request.form[\'title\'], request.form[\'text\'])\n    db.session.add(new_entry)\n    db.session.commit()\n    flash(\'New entry was successfully posted\')\n    return redirect(url_for(\'index\'))\n\n\n@app.route(\'/login\', methods=[\'GET\', \'POST\'])\ndef login():\n    """User login/authentication/session management."""\n    error = None\n    if request.method == \'POST\':\n        if request.form[\'username\'] != app.config[\'USERNAME\']:\n            error = \'Invalid username\'\n        elif request.form[\'password\'] != app.config[\'PASSWORD\']:\n            error = \'Invalid password\'\n        else:\n            session[\'logged_in\'] = True\n            flash(\'You were logged in\')\n            return redirect(url_for(\'index\'))\n    return render_template(\'login.html\', error=error)\n\n\n@app.route(\'/logout\')\ndef logout():\n    """User logout/authentication/session management."""\n    session.pop(\'logged_in\', None)\n    flash(\'You were logged out\')\n    return redirect(url_for(\'index\'))\n\n\n@app.route(\'/delete/<int:post_id>\', methods=[\'GET\'])\n@login_required\ndef delete_entry(post_id):\n    """Deletes post from database."""\n    result = {\'status\': 0, \'message\': \'Error\'}\n    try:\n        new_id = post_id\n        db.session.query(models.Flaskr).filter_by(post_id=new_id).delete()\n        db.session.commit()\n        result = {\'status\': 1, \'message\': "Post Deleted"}\n        flash(\'The entry was deleted.\')\n    except Exception as e:\n        result = {\'status\': 0, \'message\': repr(e)}\n    return jsonify(result)\n\n\n@app.route(\'/search/\', methods=[\'GET\'])\ndef search():\n    query = request.args.get("query")\n    entries = db.session.query(models.Flaskr)\n    if query:\n        return render_template(\'search.html\', entries=entries, query=query)\n    return render_template(\'search.html\')\n\n\nif __name__ == \'__main__\':\n    app.run()\n```\n\nFirst, we removed `DEBUG = True`. We\'ll let the `DEBUG` config variable be defined by the [FLASK_ENV](https://flask.palletsprojects.com/config/#environment-and-debug-features) environment variable (which defaults to `production`). We also updated the `SQLALCHEMY_DATABASE_URI` so that it uses the value of the `DATABASE_URL` environment variable if it\'s available. Otherwise, it will use the SQLite URL.\n\nRun the tests to ensure they still pass:\n\n```sh\n(env)$ python app.test.py\n\n......\n----------------------------------------------------------------------\nRan 6 tests in 0.122s\n\nOK\n```\n\nTo test locally, run:\n\n```sh\n(env)$ FLASK_ENV=development python app.py\n```\n\nTry logging in and out, adding a few new entries, and deleting old entries.\n\nBefore updating Heroku, add [Psycopg2](http://initd.org/psycopg/) -- a Postgres database adapter for Python -- to the requirements file:\n\n```\nFlask==1.1.1\nFlask-SQLAlchemy==2.4.1\ngunicorn==19.9.0\npsycopg2-binary==2.8.4\n```\n\nCommit and push your code up to Heroku.\n\nSnce we\'re using a new database on Heroku, you\'ll need to run the following command *once* to create the tables:\n\n```sh\n(env)$ heroku run python create_db.py\n```\n\nTest things out.\n\n## Linting and Code Formatting\n\nFinally, we can lint and auto format our code with [Flake8](http://flake8.pycqa.org/) and [Black](https://black.readthedocs.io/), respectively:\n\n```sh\n(env)$ pip install flake8==3.7.9\n(env)$ pip install black==19.10b0\n```\n\nRun Flake8 and correct any issues:\n\n```sh\n(env)$ flake8 --exclude env --ignore E402,E501 .\n\n./app.py:5:1: F401 \'flask.g\' imported but unused\n./create_db.py:5:1: F401 \'models.Flaskr\' imported but unused\n```\n\nUpdate the code formatting per Black:\n\n```sh\n$ black --exclude=env .\n\nreformatted /Users/michael.herman/repos/github/flaskr-tdd/models.py\nreformatted /Users/michael.herman/repos/github/flaskr-tdd/app.py\nreformatted /Users/michael.herman/repos/github/flaskr-tdd/app.test.py\nAll done! \xe2\x9c\xa8 \xf0\x9f\x8d\xb0 \xe2\x9c\xa8\n3 files reformatted, 1 file left unchanged.\n```\n\nTest everything out once last time!\n\n## Conclusion\n\n1. Want my code? Grab it [here](https://github.com/mjhea0/flaskr-tdd).\n1. View my app on [Heroku](https://flaskr-tdd.herokuapp.com/). Cheers!\n1. Want more Flask fun? Check out [TestDriven.io](https://testdriven.io/). Learn how to build, test, and deploy microservices powered by Docker, Flask, and React!\n1. Want something else added to this tutorial? Add an issue to the repo. Cheers!\n\n> Did you enjoy this tutorial? Please [Share on Twitter](https://twitter.com/intent/tweet?text=Check%20out%20Flaskr%E2%80%94An%20intro%20to%20Flask%2C%20Test-Driven%20Development%2C%20and%20JavaScript%21%20https%3A%2F%2Fgithub.com%2Fmjhea0%2Fflaskr-tdd%20%23webdev%0A).\n'