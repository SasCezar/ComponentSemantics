b"# Flask-GraphQL\n\n[![Build Status](https://travis-ci.org/graphql-python/flask-graphql.svg?branch=master)](https://travis-ci.org/graphql-python/flask-graphql) [![Coverage Status](https://coveralls.io/repos/graphql-python/flask-graphql/badge.svg?branch=master&service=github)](https://coveralls.io/github/graphql-python/flask-graphql?branch=master) [![PyPI version](https://badge.fury.io/py/flask-graphql.svg)](https://badge.fury.io/py/flask-graphql)\n\nAdds GraphQL support to your Flask application.\n\n## Usage\n\nJust use the `GraphQLView` view from `flask_graphql`\n\n```python\nfrom flask_graphql import GraphQLView\n\napp.add_url_rule('/graphql', view_func=GraphQLView.as_view('graphql', schema=schema, graphiql=True))\n\n# Optional, for adding batch query support (used in Apollo-Client)\napp.add_url_rule('/graphql/batch', view_func=GraphQLView.as_view('graphql', schema=schema, batch=True))\n```\n\nThis will add `/graphql` and `/graphiql` endpoints to your app.\n\n### Supported options\n * `schema`: The `GraphQLSchema` object that you want the view to execute when it gets a valid request.\n * `context`: A value to pass as the `context` to the `graphql()` function.\n * `root_value`: The `root_value` you want to provide to `executor.execute`.\n * `pretty`: Whether or not you want the response to be pretty printed JSON.\n * `executor`: The `Executor` that you want to use to execute queries.\n * `graphiql`: If `True`, may present [GraphiQL](https://github.com/graphql/graphiql) when loaded directly from a browser (a useful tool for debugging and exploration).\n * `graphiql_template`: Inject a Jinja template string to customize GraphiQL.\n * `batch`: Set the GraphQL view as batch (for using in [Apollo-Client](http://dev.apollodata.com/core/network.html#query-batching) or [ReactRelayNetworkLayer](https://github.com/nodkz/react-relay-network-layer))\n * `middleware`: A list of graphql [middlewares](http://docs.graphene-python.org/en/latest/execution/middleware/).\n\nYou can also subclass `GraphQLView` and overwrite `get_root_value(self, request)` to have a dynamic root value\nper request.\n\n```python\nclass UserRootValue(GraphQLView):\n    def get_root_value(self, request):\n        return request.user\n\n```\n"