b'Flask Empty\n===========\n\n**version 0.5.6**\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/italomaia/flask-empty?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nFlask-Empty is a simple **flask boilerplate** for fast prototyping. Just\nuse cookiecutter and create a new project in no time.\n\n```shell\n# if cookiecutter is not installed\nsudo pip install cookiecutter # or pip install --user cookiecutter\n\n# using cookiecutter // linux/Mac\ncookiecutter https://github.com/italomaia/flask-empty\n\n# answer the prompt and you\'re done!\n```\n\nGetting Started\n===============\n\nYou\'re advised to use venv from here on. In your project folder,\ncreate and enable it like this:\n\n```shell\npython3 -m venv venv\n. venv/bin/activate  # [.csh|.fish]\n\n# install required packages\npip install -r requirements.txt\n\n# loads env variables and runs the project in development mode\nsource .venv && flask run\n```\n\nGetting Started With Docker\n===========================\n\nGiven you have up-to-date docker installed in your machine,\nall you need to do is:\n\n```shell\n# build container image\ndocker build . -t my-project-name\n# run container in development mode\ndocker run --rm -p 5000:5000 my-project-name\n```\n\nEnvironment Variables\n=====================\n\nBe aware you might need to tweak the environment variables for production\nmode. The are available at **.env** and **Dockerfile**. If using Docker,\nyou can even provide them inline.\n\nImportant files to be aware of\n==============================\n\n**<project>/extensions.py** all extension instances that need initialization should be available\nhere in order to have _Empty_ see and initialize them for you.\n\n**<project>/config.py** is a pre-set configuration classes for you to meddle with. They\'re are all self explanatory\nand commented.\n\n**<project>/main.py** the _Empty_ class inherits from _empty.Empty_ which inherits from _flask.Flask_. Override it if you need to setup extensions, an index view, context processors, etc. It already has some sensitive defaults for most use cases. See https://github.com/italomaia/empty for all options.\n\n**<project>/<project>.ini** is the configuration file used with\n[uwsgi](https://github.com/unbit/uwsgi). Use it like this:\n\n```\nuwsgi --ini your_project.ini\n```\n\n**commands.py** adds few very useful commandline commands (...) to help your development productivity. Check available commands by running **flask**.\n\n## Heroku\n\nEmpty comes with a pre-configured _procfile_ and _heroku()_ wrapper for _app_factory_. No setup required.\n\nOther topics\n============\n\n## Templates\n\nThere are some error templates bundled with flask-empty by default. All empty right now. Just fill them up for your project.\n\n## Macros\n\nYou can use the jinja2 macros available in **templates/macros** to easily integrate your jinja2 templates with\nflask extensions like wtforms and commons tasks like showing flash messages. Available macros, **formhelpers** and **flashing** are very useful.\n\n## Blueprints\n\nYou can create blueprints easily with **flask new-app <name>**. The will live, by default\nat **apps** folder. Remember to configure your blueprints in **config.py** so that they\ncan be properly loaded.\n\n# Supported Extensions\n\n## Flask-SQLAlchemy\n\nWhile creating your project, Flask-Empty will ask you if you wish to enable SQL support. Confirm if you do so\nand Flask-SQLAlchemy will be available and configured through **database.py**.\n\n_ps: currently, db-create will only create your models if they are imported somewhere in your application.\nBy **somewhere**, try the *same module where your Blueprint instance is defined*.\n\n## Flask-Mongoengine\n\nAs mongodb is really cool, supporting it is a must. Just say yes at the prompt when asked\nand Flask-Mongoengine will be setup for you.\n\n## Flask-WTF\n\nFlask-WTF is the "the facto" extension for handling forms with Flask. It is simply great, and Flask-Empty\nsupports it! Just say "yes" during project creation and Flask-WTF support will be on.\n\n## Flask-Admin\n\nJust create an admin.py file in your blueprint, define your admin models inside and change\n**LOAD_MODULES_EXTENSIONS** to also pre-load admin, like this:\n\n## Flask-Marshmallow\n\nGives you, almost for free, model serialization, deserialization and validation. Also\nquite handy for fast development of rest applications.\n\n## Flask-Security\n\nGet user session and permissioning out-of-the-box with this great project.\n\nExamples\n========\n\nThe blog example in this project is probably outdated by now, so, just create a new project\nand mess around to your heart\'s content for quick learning.\n\nFAQ\n===\n**Is flask-empty _boilerplate_ compatible with flask 0.x? Cuz\' that\'s what my app uses.**\n\nRight now, flask-empty is a very simple project where many good practices and code examples were glued together.\n\nUntil recently I was focused in keeping backward compatibility with flask 0.8. Well, **that goal is no more**.\nFlask-empty will be compatible with the latest version of Flask and, by chance, with previous versions.\nThings will be easier (for me!) this way.\n\n**So, which is the oldest version where flask-empty works?**\n\nIn my last test, version 1.0.\n\n**I think flask-empty should have _this_ and _that_ configured by default. Will you add support?**\n\nMy current goals are:\n\n* Make flask-empty real easy to start a project with\n* Keep things simple and robust\n\nIf your suggestion is simple, **VERY** useful and has little overhead, I\'ll probably consider adding it to the project.\nIf you make the code and send a pull request, then I\'ll consider it real hard. Now, if your suggestion is rejected or advised in a different approach, don\'t get sad (you\'re awesome ;).\n\n**I just made a cool example with flask-empty and want to add it to examples.**\n\nPull request it for evaluation ;)\nJust keep in mind that good examples are short (not really...) and focused in it\'s showcase.\n'