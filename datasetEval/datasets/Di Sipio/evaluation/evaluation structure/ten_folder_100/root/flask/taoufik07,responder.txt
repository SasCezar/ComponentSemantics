b'# Responder: a familiar HTTP Service Framework for Python\n\n[![Build Status](https://travis-ci.org/taoufik07/responder.svg?branch=master)](https://travis-ci.org/taoufik07/responder)\n[![Documentation Status](https://readthedocs.org/projects/mybinder/badge/?version=latest)](https://responder.readthedocs.io/en/latest/)\n[![image](https://img.shields.io/pypi/v/responder.svg)](https://pypi.org/project/responder/)\n[![image](https://img.shields.io/pypi/l/responder.svg)](https://pypi.org/project/responder/)\n[![image](https://img.shields.io/pypi/pyversions/responder.svg)](https://pypi.org/project/responder/)\n[![image](https://img.shields.io/github/contributors/taoufik07/responder.svg)](https://github.com/taoufik07/responder/graphs/contributors)\n\n[![](https://farm2.staticflickr.com/1959/43750081370_a4e20752de_o_d.png)](https://responder.readthedocs.io)\n\n\nPowered by [Starlette](https://www.starlette.io/). That `async` declaration is optional. [View documentation](https://responder.readthedocs.io).\n\nThis gets you a ASGI app, with a production static files server pre-installed, jinja2 templating (without additional imports), and a production webserver based on uvloop, serving up requests with gzip compression automatically.\n\n\n## Testimonials\n\n> "Pleasantly very taken with python-responder. [@kennethreitz](https://twitter.com/kennethreitz) at his absolute best." \xe2\x80\x94Rudraksh M.K.\n\n> "ASGI is going to enable all sorts of new high-performance web services. It\'s awesome to see Responder starting to take advantage of that." \xe2\x80\x94 Tom Christie author of [Django REST Framework](https://www.django-rest-framework.org/)\n\n> "I love that you are exploring new patterns. Go go go!" \xe2\x80\x94 Danny Greenfield, author of [Two Scoops of Django]()\n\n\n## More Examples\n\nSee [the documentation\'s feature tour](https://responder.readthedocs.io/en/latest/tour.html) for more details on features available in Responder.\n\n\n# Installing Responder\n\nInstall the stable release:\n\n\n    $ pipenv install responder\n    \xe2\x9c\xa8\xf0\x9f\x8d\xb0\xe2\x9c\xa8\n\n\nOr, install from the development branch:\n\n    $ pipenv install -e git+https://github.com/taoufik07/responder.git#egg=responder\n\nOnly **Python 3.6+** is supported.\n\n\n# The Basic Idea\n\nThe primary concept here is to bring the niceties that are brought forth from both Flask and Falcon and unify them into a single framework, along with some new ideas I have. I also wanted to take some of the API primitives that are instilled in the Requests library and put them into a web framework. So, you\'ll find a lot of parallels here with Requests.\n\n- Setting `resp.content` sends back bytes.\n- Setting `resp.text` sends back unicode, while setting `resp.html` sends back HTML.\n- Setting `resp.media` sends back JSON/YAML (`.text`/`.html`/`.content` override this).\n- Case-insensitive `req.headers` dict (from Requests directly).\n- `resp.status_code`, `req.method`, `req.url`, and other familiar friends.\n\n\n## Ideas\n\n- Flask-style route expression, with new capabilities -- all while using Python 3.6+\'s new f-string syntax.\n- I love Falcon\'s "every request and response is passed into to each view and mutated" methodology, especially `response.media`, and have used it here. In addition to supporting JSON, I have decided to support YAML as well, as Kubernetes is slowly taking over the world, and it uses YAML for all the things. Content-negotiation and all that.\n- **A built in testing client that uses the actual Requests you know and love**.\n- The ability to mount other WSGI apps easily.\n- Automatic gzipped-responses.\n- In addition to Falcon\'s `on_get`, `on_post`, etc methods, Responder features an `on_request` method, which gets called on every type of request, much like Requests.\n- A production static file server is built-in.\n- Uvicorn built-in as a production web server. I would have chosen Gunicorn, but it doesn\'t run on Windows. Plus, Uvicorn serves well to protect against slowloris attacks, making nginx unnecessary in production.\n- GraphQL support, via Graphene. The goal here is to have any GraphQL query exposable at any route, magically.\n- Provide an official way to run webpack.\n'