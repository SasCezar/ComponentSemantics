b'# Flask-profiler\n\n\n**version: 1.8** [![Build Status](https://travis-ci.org/muatik/flask-profiler.svg?branch=master)](https://travis-ci.org/muatik/flask-profiler)\n\n##### Flask-profiler measures endpoints defined in your flask application; and provides you fine-grained report through a web interface.\n\nIt gives answers to these questions:\n* Where are the bottlenecks in my application?\n* Which endpoints are the slowest in my application?\n* Which are the most frequently called endpoints?\n* What causes my slow endpoints? In which context, with what args and kwargs are they slow?\n* How much time did a specific request take?\n\nIn short, if you are curious about what your endpoints are doing and what requests they are receiving, give a try to flask-profiler.\n\nWith flask-profiler\'s web interface, you can monitor all your endpoints\' performance and investigate endpoints and received requests by drilling down through filters.\n\n## Screenshots\n\nDashboard view displays a summary.\n\n![Alt text](resources/dashboard_screen.png?raw=true "Dashboard view")\n\nYou can create filters to investigate certain type requests.\n\n![Alt text](resources/filtering_all_screen.png?raw=true "Filtering by endpoint")\n\n![Alt text](resources/filtering_method_screen.png?raw=true "Filtering by method")\n\nYou can see all the details of a request.\n![Alt text](resources/filtering_detail_screen.png?raw=true "Request detail")\n\n## Quick Start\nIt is easy to understand flask-profiler going through an example. Let\'s dive in.\n\nInstall flask-profiler by pip.\n```sh\npip install flask_profiler\n```\n\n\nEdit your code where you are creating Flask app.\n```python\n# your app.py\nfrom flask import Flask\nimport flask_profiler\n\napp = Flask(__name__)\napp.config["DEBUG"] = True\n\n# You need to declare necessary configuration to initialize\n# flask-profiler as follows:\napp.config["flask_profiler"] = {\n    "enabled": app.config["DEBUG"],\n    "storage": {\n        "engine": "sqlite"\n    },\n    "basicAuth":{\n        "enabled": True,\n        "username": "admin",\n        "password": "admin"\n    },\n    "ignore": [\n\t    "^/static/.*"\n\t]\n}\n\n\n@app.route(\'/product/<id>\', methods=[\'GET\'])\ndef getProduct(id):\n    return "product id is " + str(id)\n\n\n@app.route(\'/product/<id>\', methods=[\'PUT\'])\ndef updateProduct(id):\n    return "product {} is being updated".format(id)\n\n\n@app.route(\'/products\', methods=[\'GET\'])\ndef listProducts():\n    return "suppose I send you product list..."\n\n@app.route(\'/static/something/\', methods=[\'GET\'])\ndef listProducts():\n    return "this should not be tracked..."\n\n# In order to active flask-profiler, you have to pass flask\n# app as an argument to flask-profiler.\n# All the endpoints declared so far will be tracked by flask-profiler.\nflask_profiler.init_app(app)\n\n\n# endpoint declarations after flask_profiler.init_app() will be\n# hidden to flask_profiler.\n@app.route(\'/doSomething\', methods=[\'GET\'])\ndef doSomething():\n    return "flask-profiler will not measure this."\n\n\n# But in case you want an endpoint to be measured by flask-profiler,\n# you can specify this explicitly by using profile() decorator\n@app.route(\'/doSomethingImportant\', methods=[\'GET\'])\n@flask_profiler.profile()\ndef doSomethingImportant():\n    return "flask-profiler will measure this request."\n\nif __name__ == \'__main__\':\n    app.run(host="127.0.0.1", port=5000)\n\n\n```\n\nNow run your `app.py`\n```\npython app.py\n```\n\nAnd make some requests like:\n```sh\ncurl http://127.0.0.1:5000/products\ncurl http://127.0.0.1:5000/product/123\ncurl -X PUT -d arg1=val1 http://127.0.0.1:5000/product/123\n```\n\nIf everything is okay, Flask-profiler will measure these requests. You can see the result heading to http://127.0.0.1:5000/flask-profiler/ or get results as JSON http://127.0.0.1:5000/flask-profiler/api/measurements?sort=elapsed,desc\n\nIf you like to initialize your extensions in other files or use factory apps pattern, you can also create a instance of the `Profiler` class, this will register all your endpoints once you app run by first time. E.g:\n\n```python\nfrom flask import Flask\nfrom flask_profiler import Profiler\n\nprofiler = Profiler()\n\napp = Flask(__name__)\n\napp.config["DEBUG"] = True\n\n# You need to declare necessary configuration to initialize\n# flask-profiler as follows:\napp.config["flask_profiler"] = {\n    "enabled": app.config["DEBUG"],\n    "storage": {\n        "engine": "sqlite"\n    },\n    "basicAuth":{\n        "enabled": True,\n        "username": "admin",\n        "password": "admin"\n    },\n    "ignore": [\n        "^/static/.*"\n    ]\n}\n\nprofiler = Profiler()  # You can have this in another module\nprofiler.init_app(app)\n# Or just Profiler(app)\n\n@app.route(\'/product/<id>\', methods=[\'GET\'])\ndef getProduct(id):\n    return "product id is " + str(id)\n\n```\n\n## Using with different database system\nYou can use flaskprofiler with **SqlLite**, **MongoDB**, **Postgresql**, **Mysql** or **MongoDB** database systems. However, it is easy to support other database systems. If you would like to have others, please go to contribution documentation. (It is really easy.)\n\n### SQLite\nIn order to use SQLite, just specify it as the value of `storage.engine` directive as follows.\n\n```json\napp.config["flask_profiler"] = {\n    "storage": {\n        "engine": "sqlite",\n    }\n}\n```\n\nBelow the other options are listed.\n\n| Filter key   |      Description      |  Default |\n|----------|-------------|------|\n| storage.FILE | SQLite database file name | flask_profiler.sql|\n| storage.TABLE | table name in which profiling data will reside | measurements |\n\n### MongoDB\nIn order to use MongoDB, just specify it as the value of `storage.engine` directive as follows.\n\n```json\napp.config["flask_profiler"] = {\n    "storage": {\n        "engine": "mongodb",\n    }\n}\n```\n\n### SQLAchemy\nIn order to use SQLAchemy, just specify it as the value of `storage.engine` directive as follows.\nAlso first create an empty database with the name "flask_profiler".\n\n```python\napp.config["flask_profiler"] = {\n    "storage": {\n        "engine": "sqlalchemy",\n        "db_url": "postgresql://user:pass@localhost:5432/flask_profiler"  # optional, if no db_url specified then sqlite will be used.\n    }\n}\n```\n\n### Custom database engine\nSpecify engine as string module and class path.\n\n```json\napp.config["flask_profiler"] = {\n    "storage": {\n        "engine": "custom.project.flask_profiler.mysql.MysqlStorage",\n        "MYSQL": "mysql://user:password@localhost/flask_profiler"\n    }\n}\n```\n\nThe other options are listed below.\n\n| Filter key   |      Description      |  Default\n|----------|-------------|------\n| storage.MONGO_URL | mongodb connection string | mongodb://localhost\n| storage.DATABASE | database name | flask_profiler\n| storage.COLLECTION | collection name | measurements\n\n### Sampling\nControl the number of samples taken by flask-profiler\n\nYou would want control over how many times should the flask profiler take samples while running in production mode.\nYou can supply a function and control the sampling according to your business logic.\n\nExample 1: Sample 1 in 100 times with random numbers\n```python\napp.config["flask_profiler"] = {\n    "sampling_function": lambda: True if random.sample(list(range(1, 101)), 1) == [42] else False\n}\n```\n\nExample 2: Sample for specific users\n```python\napp.config["flask_profiler"] = {\n    "sampling_function": lambda: True if user is \'divyendu\' else False\n}\n```\n\nIf sampling function is not present, all requests will be sampled.\n\n### Changing flask-profiler endpoint root\nBy default, we can access flask-profiler at <your-app>/flask-profiler\n\n```python\napp.config["flask_profiler"] = {\n        "endpointRoot": "secret-flask-profiler"\n}\n```\n\n### Ignored endpoints\nFlask-profiler will try to track every endpoint defined so far when init_app() is invoked. If you want to exclude some of the endpoints, you can define matching regex for them as follows:\n\n```python\napp.config["flask_profiler"] = {\n        "ignore": [\n\t        "^/static/.*",\n\t        "/api/users/\\w+/password"\n        ]\n}\n```\n\n\n## Contributing\n\nContributions are welcome!\n\nReview the [Contributing Guidelines](https://github.com/muatik/flask-profiler/wiki/Development) for details on how to:\n\n* Submit issues\n* Add solutions to existing challenges\n* Add new challenges\n\n## Authors\n* [Musafa Atik](https://www.linkedin.com/in/muatik)\n* Fatih Sucu\n* [Safa Yasin Yildirim](https://www.linkedin.com/in/safayasinyildirim)\n\n## License\nMIT\n'