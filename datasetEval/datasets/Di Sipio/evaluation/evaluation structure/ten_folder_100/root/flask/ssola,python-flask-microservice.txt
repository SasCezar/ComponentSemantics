b'# python-flask-microservice\n\nThis is the code used in this series of articles: \n\n- https://medium.com/p/building-microservices-with-python-part-i-5240a8dcc2fb\n- https://medium.com/@ssola/building-microservices-with-python-part-2-9f951199094a#.z48wq941g\n- https://medium.com/@ssola/building-microservices-with-python-part-3-a556a4c4bc00#.yn4p8rstp\n\nThis is a basic approach of building a Microservice on top of Flask, with some useful packages like:\n\n- [Flask](http://flask.pocoo.org/)\n- [Flask-Injector](https://pypi.python.org/pypi/Flask-Injector)\n- [Connexion](https://github.com/zalando/connexion)\n\n# Requirements\n\nWe are going to build a microservice to index rooms information coming from another service (crawler). This service will be responsible for indexing the information into Elasticsearch.\n\nThe indexing will be a process of:\n\n- Validate and sanitize the data\n- Get some metadata from the room information like geolocalization\n- Upload the given images URL to [Amazon S3](https://github.com/boto/boto)\n- Send an event to [RabbitMQ](https://github.com/pika/pika) every time a new room has been indexed serializing the payload with Avro.\n\n\n**Endpoints**:\n\n|Method|URI|Description| Status |\n|------|---|-----------|--------|\n| POST | /room | it will receive the room payload, and it will proceed to index it | **Development** |\n| PATCH | /room/{id} | this PATCH method will allow us to make changes on the indexed item | Not started |\n| DELETE | /room/{id} | this method will remove the room from the index | Not started |\n| GET | /room/{id} | this method will return the room data for a given room id | Not started |\n| GET | /health-check | This endpoint retuns the state of the service | Not started |\n\n# Running the environment\n\nYou need to have Docker installed in your machine, after that, just run this command `docker-compose build && docker-compose up -d`.\n'