b'# No Maintenance Intended\n\n Unfortunately due to time constraints, it\'s not possible for me to actively maintain `why-did-you-update` anymore.\n\n# Why did you update\n\n[![No Maintenance Intended](http://unmaintained.tech/badge.svg)](http://unmaintained.tech/) [![Build Status](https://travis-ci.org/maicki/why-did-you-update.svg?branch=master)](https://travis-ci.org/maicki/why-did-you-update)\n[![npm version](https://badge.fury.io/js/why-did-you-update.svg)](https://badge.fury.io/js/why-did-you-update)\n\n`Why-did-you-update` is a function that monkey patches React and notifies you in the console when **potentially** unnecessary re-renders occur.\n\n![](https://i.imgur.com/NjI4PYt.png)\n\n### Setup\nThis library is available on npm, install it with: `npm install --save why-did-you-update` or `yarn add why-did-you-update`.\n\n### Sandbox\nYou can test the library [>> HERE <<](https://codesandbox.io/s/mywnl5xp58?expanddevtools=1) (notice the console).\n\n### Version 1 Update With Breaking Changes\n\nCheck out the [releases](https://github.com/maicki/why-did-you-update/releases) page.\n\nWe now only support React 16+\n\nTo work with older versions of react, install an older version of this library:\n\n`npm install --save why-did-you-update@0.1.1` or `yarn add why-did-you-update@0.1.1`\n\n### Usage\n```js\nimport React from \'react\';\n\nif (process.env.NODE_ENV !== \'production\') {\n  const {whyDidYouUpdate} = require(\'why-did-you-update\');\n  whyDidYouUpdate(React);\n}\n```\n\n#### Options\nOptionally you can pass in options as a second parameter. The following options are available:\n- `include: [RegExp]`\n- `exclude: [RegExp]`\n- `groupByComponent: boolean`\n- `collapseComponentGroups: boolean`\n- `notifier: (groupByComponent: boolean, collapseComponentGroups: boolean, displayName: string, diffs: [Object]) => void`\n\n##### include / exclude\nYou can include or exclude components by their displayName with the `include` and `exclude` options\n\n```js\nwhyDidYouUpdate(React, { include: [/^pure/], exclude: [/^Connect/] });\n```\n\n##### groupByComponent / collapseComponentGroups\nBy default, the changes for each component are grouped by component and these groups collapsed. This can be changed with the `groupByComponent` and `collapseComponentGroups` options:\n\n```js\nwhyDidYouUpdate(React, { groupByComponent: true, collapseComponentGroups: false });\n```\n\n##### notifier\nA notifier can be provided if the official one does not suit your needs.\n\n```js\nconst notifier = (groupByComponent, collapseComponentGroups, displayName, diffs) => {\n  diffs.forEach(({name, prev, next, type}) => {\n    // Use the diff and notify the user somehow\n  });\n};\nwhyDidYouUpdate(React, { notifier });\n```\n\n### Common Fixing Scenarios\n\n#### Value Did Not Change\n\nIf you receive the message:\n```\nX.[props/state]: Value did not change. Avoidable re-render!`\n```\nAbout the props or the state object of component `X`, it means the component was rendered\nalthough the object is the same:\n```js\nprevProps === props\n```\nor\n```js\nprevState === state\n```\nUsually renders are caused because of the rendering of their father, or state change.\nIn both cases, at least one of the two would change, at least by reference.\n\nIf both the state and the props are the same object, it means the render was\ncaused by `this.forceUpdate()` or `ReactDom.render()`:\n```js\nprevProps === props && prevState === state\n```\n\n#### Not Equal by Reference\n\nIf you receive the message:\n```\n"X" property is not equal by reference.\n```\nThis means it received a new object with the same value. For example:\n```js\nconst a = {"c": "d"}\nconst b = {"c": "d"}\na !== b\n```\nTo avoid this warning, make sure to not recreate objects:\n```js\nconst a = {"c": "d"}\nconst b = a\na === b\n```\n\n#### Changes Are in Functions Only\n\nIf you receive the message:\n```\nChanges are in functions only. Possibly avoidable re-render?\n```\nIt\'s probably because you are creating a function inside render:\n```js\nrender(){\n  return <div fn={function something(){...}}/>\n}\n```\nAnd this triggers a re-render because:\n```js\nfunction something(){...} !== function something(){...}\n```\nYou can avoid it by binding this function in advance and then reusing it on all renders\n```js\nconstructor(props){\n  super(props)\n  this.something = this.something.bind(this)\n}\nsomething(){\n  ...\n}\nrender(){\n  return <div fn={this.something}/>\n}\n```\n\n### Credit\n\nI originally read about how Benchling created a mixin to do this on a per-component basis ([A deep dive into React perf debugging](http://benchling.engineering/deep-dive-react-perf-debugging/)).\nThat is really awesome but also tedious AF, so why not just monkey patch React.\n\n### License\n\nwhy-did-you-update is [MIT licensed](./LICENSE).\n'