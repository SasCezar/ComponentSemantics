b'# React Native HTMLView [![Build status](https://api.travis-ci.org/jsdf/react-native-htmlview.svg?branch=master)](https://travis-ci.org/jsdf/react-native-htmlview)\nA component which takes HTML content and renders it as native views, with\ncustomisable style and handling of links, etc.\n\nIn action (from [ReactNativeHackerNews](https://github.com/jsdf/ReactNativeHackerNews)):\n\n![React Native Hacker News Comments](http://i.imgur.com/FYOgBYc.png)\n\n## Table of contents\n- [Install](#install)\n- [Usage](#usage)\n- [Example](#example)\n- [Changelog](#changelog)\n\n### Install\n```\nnpm install react-native-htmlview --save\n```\n\n### Usage\n\nprops:\n\n- `value`: a string of HTML content to render\n- `onLinkPress`: a function which will be called with a url when a link is pressed.\n  Passing this prop will override how links are handled (defaults to calling `Linking.openURL(url)`)\n- `onLinkLongPress`: a function which will be called with a url when a link is long pressed.\n  The default is `null`.\n- `stylesheet`: a stylesheet object keyed by tag name, which will override the\n  styles applied to those respective tags.\n- `renderNode`: a custom function to render HTML nodes however you see fit. If\n  the function returns `undefined` (not `null`), the default renderer will be\n  used for that node. The function takes the following arguments:\n  - `node` the html node as parsed by [htmlparser2](https://github.com/fb55/htmlparser2)\n  - `index` position of the node in parent node\'s children\n  - `siblings` parent node\'s children (including current node)\n  - `parent` parent node\n  - `defaultRenderer` the default rendering implementation, so you can use the normal rendering logic for some subtree. `defaultRenderer` takes the following arguments:\n    - `node` the node to render with the default rendering logic\n    - `parent` the parent of node of `node`\n- `bullet`: text which is rendered before every `li` inside a `ul`\n- `paragraphBreak`: text which appears after every `p` element\n- `lineBreak`: text which appears after text elements which create a new line (`br`, headings)\n- `addLineBreaks`: when explicitly `false`, effectively sets `paragraphBreak` and `lineBreak` to `null`\n- `NodeComponent`, `nodeComponentProps`, `RootComponent`, `rootComponentProps`, `TextComponent`, `textComponentProps`: see [**Customizing things even further**](https://github.com/jsdf/react-native-htmlview#customizing-things-even-further) below.\n\n### Example\n\n```js\nimport React from \'react\';\nimport {StyleSheet} from \'react-native\';\nimport HTMLView from \'react-native-htmlview\';\n\nclass App extends React.Component {\n  render() {\n    const htmlContent = `<p><a href="http://jsdf.co">&hearts; nice job!</a></p>`;\n\n    return (\n      <HTMLView\n        value={htmlContent}\n        stylesheet={styles}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  a: {\n    fontWeight: \'300\',\n    color: \'#FF3366\', // make links coloured pink\n  },\n});\n```\n\n### Custom Link Handling\n\nWhen a link is clicked, by default `ReactNative.Linking.openURL` is called with the\nlink url. You can customise what happens when a link is clicked with `onLinkPress`:\n\n```js\nclass App extends React.Component {\n  render() {\n    return (\n      <HTMLView\n        value={this.props.html}\n        onLinkPress={(url) => console.log(\'clicked link: \', url)}\n      />\n    );\n  }\n}\n```\n\n\n If you\'re getting the error "undefined is not an object (evaluating \'RCTLinkingManager.openURL\xe2\x80\x99)\xe2\x80\x9d from the LinkingIOS API, try adding \xe2\x80\x98RCTLinking\' to the project\'s \'Linked Frameworks and Libraries\xe2\x80\x99. You might have to find RCTLinking.xcodeproj in the react-native package dir and drag that into your main Xcode project first.\n\n### Custom Element Rendering\n\nYou can implement the `renderNode` prop to add support for unsupported element\ntypes,  or override the rendering for supported types. `renderNode` is a function which is called with the type and attributes of each HTML element found in the input HTML, and from this function you can return a React element to be rendered in its place. If you return `null` nothing will be rendered in place of this element or its children. If you return `undefined` (or don\'t return anything) then HTMLView will drop back to its default rendering for that type of HTML element.\n\nFor example, here is how you might implement the `<iframe>` element:\n\n```js\nfunction renderNode(node, index, siblings, parent, defaultRenderer) {\n  if (node.name == \'iframe\') {\n    const a = node.attribs;\n    const iframeHtml = `<iframe src="${a.src}"></iframe>`;\n    return (\n      <View key={index} style={{width: Number(a.width), height: Number(a.height)}}>\n        <WebView source={{html: iframeHtml}} />\n      </View>\n    );\n  }\n}\n\nconst htmlContent = `\n  <div>\n    <iframe src="http://info.cern.ch/" width="360" height="300" />\n  </div>\n`;\n\nclass App extends React.Component {\n  render() {\n    return (\n      <HTMLView value={htmlContent} renderNode={renderNode} />\n    );\n  }\n}\n```\n\nAlternatively, this example shows how you could disallow the `<iframe>` element:\n\n```js\nfunction renderNode(node, index, siblings, parent, defaultRenderer) {\n  if (node.name == \'iframe\') {\n    return null;\n  }\n}\n\nconst htmlContent = `\n  <div>\n    <iframe src="http://info.cern.ch/" width="360" height="300" />\n  </div>\n`;\n\nclass App extends React.Component {\n  render() {\n    return (\n      <HTMLView value={htmlContent} renderNode={renderNode} />\n    );\n  }\n}\n```\n\nIf you want to reuse the default renderer, you need to call it passing an array of nodes. This example shows how to replace a specific HTML tag with something different, but still process the children.\n```js\nfunction renderNode(node, index, siblings, parent, defaultRenderer) {\n  if (node.name == \'mytag\') {\n      const specialSyle = node.attribs.style\n      return (\n        <Text key={index} style={specialSyle}>\n          {defaultRenderer(node.children, parent)}\n        </Text>\n      )\n    }\n}\n\nconst htmlContent = `\n  <div>\n    <mytag>\n      <div>some content processed normally by the engine</div>\n    </mytag>\n  </div>\n`;\n\nclass App extends React.Component {\n  render() {\n    return (\n      <HTMLView value={htmlContent} renderNode={renderNode} />\n    );\n  }\n}\n```\n\nFor further understanding of the possiblities of the `renderNode` prop, read through [htmlToElement.js](https://github.com/jsdf/react-native-htmlview/blob/master/htmlToElement.js). Particularly look at where `renderNode` is called to see how it can override what sort of React element is created in place of an element in the input HTML.\n\n### Customizing things even further\n\nIn addition to supplying a custom `renderNode` function, you can customize what is rendered by the built in `renderNode` function. Read through [htmlToElement.js](https://github.com/jsdf/react-native-htmlview/blob/master/htmlToElement.js) and note the usage of NodeComponent (for rendering HTML element nodes) and TextComponent (for rendering text strings in the HTML). Both of these components can be injected as the `NodeComponent` and `TextComponent` props to HTMLView, or alternatively they can be given extra props by passing an object as the `nodeComponentProps` and `textComponentProps` props. Finally you can also use the props `RootComponent` and `rootComponentProps` to customize the root wrapper `View` element that is rendered by the HTMLView in [HTMLView.js](https://github.com/jsdf/react-native-htmlview/blob/master/HTMLView.js).\n\n### Changelog\nSee [CHANGELOG.md](CHANGELOG.md).\n'