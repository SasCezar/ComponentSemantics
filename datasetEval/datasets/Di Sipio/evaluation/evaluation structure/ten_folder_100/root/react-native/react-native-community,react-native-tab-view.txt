b'# React Native Tab View\n\n[![Build Status][build-badge]][build]\n[![Version][version-badge]][package]\n[![MIT License][license-badge]][license]\n\nA cross-platform Tab View component for React Native.\n\n- [Run the example app to see it in action](https://expo.io/@satya164/react-native-tab-view-demos).\n- Checkout the [example/](https://github.com/react-native-community/react-native-tab-view/tree/master/example) folder for source code.\n\n## Features\n\n- Smooth animations and gestures\n- Scrollable tabs\n- Supports both top and bottom tab bars\n- Follows Material Design spec\n- Highly customizable\n- Fully typed with [TypeScript](https://typescriptlang.org)\n\n## Demo\n\n<a href="https://raw.githubusercontent.com/satya164/react-native-tab-view/master/demo/demo.mp4"><img src="https://raw.githubusercontent.com/satya164/react-native-tab-view/master/demo/demo.gif" width="360"></a>\n\n## Installation\n\nOpen a Terminal in the project root and run:\n\n```sh\nyarn add react-native-tab-view\n```\n\nNow we need to install [`react-native-gesture-handler`](https://github.com/kmagiera/react-native-gesture-handler) and [`react-native-reanimated`](https://github.com/kmagiera/react-native-reanimated).\n\nIf you are using Expo, to ensure that you get the compatible versions of the libraries, run:\n\n```sh\nexpo install react-native-gesture-handler react-native-reanimated\n```\n\nIf you are not using Expo, run the following:\n\n```sh\nyarn add react-native-reanimated react-native-gesture-handler\n```\n\nIf you are using Expo, you are done. Otherwise, continue to the next steps.\n\nNext, we need to link these libraries. The steps depends on your React Native version:\n\n- **React Native 0.60 and higher**\n\n  On newer versions of React Native, [linking is automatic](https://github.com/react-native-community/cli/blob/master/docs/autolinking.md).\n\n  To complete the linking on iOS, make sure you have [Cocoapods](https://cocoapods.org/) installed. Then run:\n\n  ```sh\n  cd ios\n  pod install\n  cd ..\n  ```\n\n- **React Native 0.59 and lower**\n\n  If you\'re on an older React Native version, you need to manually link the dependencies. To do that, run:\n\n  ```sh\n  react-native link react-native-reanimated\n  react-native link react-native-gesture-handler\n  ```\n\n**IMPORTANT:** There are additional steps required for `react-native-gesture-handler` on Android after linking (for all React Native versions). Check the [this guide](https://kmagiera.github.io/react-native-gesture-handler/docs/getting-started.html) to complete the installation.\n\n**NOTE:** If you use Wix [`react-native-navigation`](https://github.com/wix/react-native-navigation) on Android, you need to wrap all your screens that uses `react-native-tab-view` with `gestureHandlerRootHOC` from `react-native-gesture-handler`. Refer [`react-native-gesture-handler`\'s docs](https://kmagiera.github.io/react-native-gesture-handler/docs/getting-started.html#with-wix-react-native-navigation-https-githubcom-wix-react-native-navigation) for more details.\n\nWe\'re done! Now you can build and run the app on your device/simulator.\n\n## Quick Start\n\n```js\nimport * as React from \'react\';\nimport { View, StyleSheet, Dimensions } from \'react-native\';\nimport { TabView, SceneMap } from \'react-native-tab-view\';\n\nconst FirstRoute = () => (\n  <View style={[styles.scene, { backgroundColor: \'#ff4081\' }]} />\n);\n\nconst SecondRoute = () => (\n  <View style={[styles.scene, { backgroundColor: \'#673ab7\' }]} />\n);\n\nexport default class TabViewExample extends React.Component {\n  state = {\n    index: 0,\n    routes: [\n      { key: \'first\', title: \'First\' },\n      { key: \'second\', title: \'Second\' },\n    ],\n  };\n\n  render() {\n    return (\n      <TabView\n        navigationState={this.state}\n        renderScene={SceneMap({\n          first: FirstRoute,\n          second: SecondRoute,\n        })}\n        onIndexChange={index => this.setState({ index })}\n        initialLayout={{ width: Dimensions.get(\'window\').width }}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  scene: {\n    flex: 1,\n  },\n});\n```\n\n[Try this example on Snack](https://snack.expo.io/@satya164/react-native-tab-view-quick-start)\n\n## More examples on Snack\n\n- [Custom Tab Bar](https://snack.expo.io/@satya164/react-native-tab-view-custom-tabbar)\n- [Lazy Load](https://snack.expo.io/@satya164/react-native-tab-view-lazy-load)\n\n## Integration with React Navigation\n\nReact Navigation integration can be achieved by the [react-navigation-tabs](https://github.com/react-navigation/react-navigation-tabs) package. Note that while it\'s easier to use, it is not as flexible as using the library directly.\n\n## API reference\n\nThe package exports a `TabView` component which is the one you\'d use to render the tab view, and a `TabBar` component which is the default tab bar implementation.\n\n### `TabView`\n\nContainer component responsible for rendering and managing tabs. Follows material design styles by default.\n\nBasic usage look like this:\n\n```js\n<TabView\n  navigationState={this.state}\n  onIndexChange={index => this.setState({ index })}\n  renderScene={SceneMap({\n    first: FirstRoute,\n    second: SecondRoute,\n  })}\n/>\n```\n\n#### Props\n\n##### `navigationState` (`required`)\n\nState for the tab view. The state should contain the following properties:\n\n- `index`: a number representing the index of the active route in the `routes` array\n- `routes`: an array containing a list of route objects used for rendering the tabs\n\nEach route object should contain the following properties:\n\n- `key`: a unique key to identify the route (required)\n- `title`: title for the route to display in the tab bar\n- `icon`: icon for the route to display in the tab bar\n- `accessibilityLabel`: accessibility label for the tab button\n- `testID`: test id for the tab button\n\nExample:\n\n```js\n{\n  index: 1,\n  routes: [\n    { key: \'music\', title: \'Music\' },\n    { key: \'albums\', title: \'Albums\' },\n    { key: \'recents\', title: \'Recents\' },\n    { key: \'purchased\', title: \'Purchased\' },\n  ]\n}\n```\n\n`TabView` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n\n##### `onIndexChange` (`required`)\n\nCallback which is called on tab change, receives the index of the new tab as argument.\nThe navigation state needs to be updated when it\'s called, otherwise the change is dropped.\n\n##### `renderScene` (`required`)\n\nCallback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n\n```js\nrenderScene = ({ route, jumpTo }) => {\n  switch (route.key) {\n    case \'music\':\n      return <MusicRoute jumpTo={jumpTo} />;\n    case \'albums\':\n      return <AlbumsRoute jumpTo={jumpTo} />;\n  }\n};\n```\n\nYou need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance. To make it easier to specify the components, you can use the `SceneMap` helper.\n\n`SceneMap` takes an object with the mapping of `route.key` to React components and returns a function to use with `renderScene` prop.\n\n```js\nimport { SceneMap } from \'react-native-tab-view\';\n\n...\n\nrenderScene = SceneMap({\n  music: MusicRoute,\n  albums: AlbumsRoute,\n});\n```\n\nSpecifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n\nEach scene receives the following props:\n\n- `route`: the current route rendered by the component\n- `jumpTo`: method to jump to other tabs, takes a `route.key` as it\'s argument\n- `position`: animated node which represents the current position\n\nThe `jumpTo` method can be used to navigate to other tabs programmatically:\n\n```js\nthis.props.jumpTo(\'albums\');\n```\n\nAll the scenes rendered with `SceneMap` are optimized using `React.PureComponent` and don\'t re-render when parent\'s props or states change. If you need more control over how your scenes update (e.g. - triggering a re-render even if the `navigationState` didn\'t change), use `renderScene` directly instead of using `SceneMap`.\n\n**IMPORTANT:** **Do not** pass inline functions to `SceneMap`, for example, don\'t do the following:\n\n```js\nSceneMap({\n  first: () => <FirstRoute foo={this.props.foo} />,\n  second: SecondRoute,\n});\n```\n\nAlways define your components elsewhere in the top level of the file. If you pass inline functions, it\'ll re-create the component every render, which will cause the entire route to unmount and remount every change. It\'s very bad for performance and will also cause any local state to be lost.\n\nIf you need to pass additional props, use a custom `renderScene` function:\n\n```js\nrenderScene = ({ route }) => {\n  switch (route.key) {\n    case \'first\':\n      return <FirstRoute foo={this.props.foo} />;\n    case \'second\':\n      return <SecondRoute />;\n    default:\n      return null;\n  }\n};\n```\n\n##### `renderTabBar`\n\nCallback which returns a custom React Element to use as the tab bar:\n\n```js\nimport { TabBar } from \'react-native-tab-view\';\n\n...\n\nrenderTabBar = props => <TabBar {...props} />;\n```\n\nIf this is not specified, the default tab bar is rendered. You pass this props to customize the default tab bar, provide your own tab bar, or disable the tab bar completely.\n\n```js\nrenderTabBar = () => null;\n```\n\n##### `renderPager`\n\nCallback which returns a custom React Element to use as pager:\n\n\n##### `tabBarPosition`\n\nPosition of the tab bar in the tab view. Possible values are `\'top\'` and `\'bottom\'`. Defaults to `\'top\'`.\n\n##### `lazy`\n\nBoolean indicating whether to lazily render the scenes. By default all scenes are rendered to provide a smoother swipe experience. But you might want to defer the rendering of unfocused scenes until the user sees them. To enable lazy rendering, set `lazy` to `true`.\n\nWhen you enable `lazy`, the unfocused screens will usually take some time to render when they come into focus. You can use the `renderLazyPlaceholder` prop to customize what the user sees during this short period.\n\n##### `lazyPreloadDistance`\n\nWhen `lazy` is enabled, you can specify how many adjacent routes should be preloaded with this prop. This value defaults to `0` which means lazy pages are loaded as they come into the viewport.\n\n##### `renderLazyPlaceholder`\n\nCallback which returns a custom React Element to render for routes that haven\'t been rendered yet. Receives an object containing the route as the argument. The `lazy` prop also needs to be enabled.\n\nThis view is usually only shown for a split second. Keep it lightweight.\n\nBy default, this renders `null`.\n\n##### `removeClippedSubviews`\n\nBoolean indicating whether to remove invisible views (such as unfocused screens) from the native view hierarchy to improve memory usage. Defaults to `false`.\n\n**Note**: Don\'t enable this on iOS where this is buggy and views don\'t re-appear.\n\n##### `keyboardDismissMode`\n\nString indicating whether the keyboard gets dismissed in response to a drag gesture. Possible values are:\n\n- `\'auto\'` (default): the keyboard is dismissed when the index changes.\n- `\'on-drag\'`: the keyboard is dismissed when a drag begins.\n- `\'none\'`: drags do not dismiss the keyboard.\n\n##### `swipeEnabled`\n\nBoolean indicating whether to enable swipe gestures. Swipe gestures are enabled by default. Passing `false` will disable swipe gestures, but the user can still switch tabs by pressing the tab bar.\n\n##### `swipeVelocityImpact`\n\nDetermines how relevant is a velocity while calculating next position while swiping. Defaults to `0.2`.\n\n##### `onSwipeStart`\n\nCallback which is called when the swipe gesture starts, i.e. the user touches the screen and moves it.\n\n##### `onSwipeEnd`\n\nCallback which is called when the swipe gesture ends, i.e. the user lifts their finger from the screen after the swipe gesture.\n\n##### `timingConfig`\n\nConfiguration object for the timing animation which occurs when tapping on tabs. Supported properties are:\n\n- `duration` (`number`)\n\n##### `springConfig`\n\nConfiguration object for the spring animation which occurs after swiping. Supported properties are:\n\n- `damping` (`number`)\n- `mass` (`number`)\n- `stiffness` (`number`)\n- `restSpeedThreshold` (`number`)\n- `restDisplacementThreshold` (`number`)\n\n##### `springVelocityScale`\n\nNumber for determining how meaningful is gesture velocity for calculating initial velocity of spring animation. Defaults to `0`.\n\n##### `initialLayout`\n\nObject containing the initial height and width of the screens. Passing this will improve the initial rendering performance. For most apps, this is a good default:\n\n```js\n{ width: Dimensions.get(\'window\').width }\n```\n\n##### `position`\n\nAnimated value to listen to the position updates. The passed position value will be kept in sync with the current position of the tabs. It\'s useful for accessing the animated value outside the tab view.\n\n```js\nposition = new Animated.Value(0);\n\nrender() {\n  return (\n    <TabView\n      position={this.position}\n      ...\n    />\n  );\n}\n```\n\n##### `sceneContainerStyle`\n\nStyle to apply to the view wrapping each screen. You can pass this to override some default styles such as overflow clipping:\n\n##### `style`\n\nStyle to apply to the tab view container.\n\n##### `gestureHandlerProps`\n\nAn object with props to be passed to underlying [`PanGestureHandler`](https://kmagiera.github.io/react-native-gesture-handler/docs/handler-pan.html#properties). For example:\n\n```js\ngestureHandlerProps={{\n  maxPointers: 1,\n  waitFor: [someRef]\n}}\n```\n\n### `TabBar`\n\nMaterial design themed tab bar. To customize the tab bar, you\'d need to use the `renderTabBar` prop of `TabView` to render the `TabBar` and pass additional props.\n\nFor example, to customize the indicator color and the tab bar background color, you can pass `indicatorStyle` and `style` props to the `TabBar` respectively:\n\n```js\nrenderTabBar={props =>\n  <TabBar\n    {...props}\n    indicatorStyle={{ backgroundColor: \'white\' }}\n    style={{ backgroundColor: \'pink\' }}\n  />\n}\n```\n\n#### Props\n\n##### `getLabelText`\n\nFunction which takes an object with the current route and returns the label text for the tab. Uses `route.title` by default.\n\n```js\ngetLabelText={({ route }) => route.title}\n```\n\n##### `getAccessible`\n\nFunction which takes an object with the current route and returns a boolean to indicate whether to mark a tab as `accessible`. Defaults to `true`.\n\n##### `getAccessibilityLabel`\n\nFunction which takes an object with the current route and returns a accessibility label for the tab button. Uses `route.accessibilityLabel` by default if specified, otherwise uses the route title.\n\n```js\ngetAccessibilityLabel={({ route }) => route.accessibilityLabel}\n```\n\n##### `testID`\n\nFunction which takes an object with the current route and returns a test id for the tab button to locate this tab button in tests. Uses `route.testID` by default.\n\n```js\ngetTestID={({ route }) => route.testID}\n```\n\ngetAccessibilityLabel: (props: { route: T }) => string;\nGet accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\nUses `route.accessibilityLabel` by default if specified, otherwise uses the route title.\n\ngetTestID: (props: { route: T }) => string | undefined;\nGet the id to locate this tab button in tests, uses `route.testID` by default.\n\n##### `renderIcon`\n\nFunction which takes an object with the current route, focused status and color and returns a custom React Element to be used as a icon.\n\n```js\nrenderIcon={({ route, focused, color }) => (\n  <Icon\n    name={focused ? \'abums\' : \'albums-outlined\'}\n    color={color}\n  />\n)}\n```\n\n##### `renderLabel`\n\nFunction which takes an object with the current route, focused status and color and returns a custom React Element to be used as a label.\n\n```js\nrenderLabel={({ route, focused, color }) => (\n  <Text style={{ color, margin: 8 }}>\n    {route.title}\n  </Text>\n)}\n```\n\n##### `renderIndicator`\n\nFunction which takes an object with the current route and returns a custom React Element to be used as a tab indicator.\n\n##### `renderBadge`\n\nFunction which takes an object with the current route and returns a custom React Element to be used as a badge.\n\n##### `onTabPress`\n\nFunction to execute on tab press. It receives the scene for the pressed tab, useful for things like scroll to top.\n\nBy default, tab press also switches the tab. To prevent this behavior, you can call `preventDefault`:\n\n```js\nonTabPress={({ route, preventDefault }) => {\n  if (route.key === \'home\') {\n    preventDefault();\n\n    // Do something else\n  }\n}}\n```\n\n##### `onTabLongPress`\n\nFunction to execute on tab long press, use for things like showing a menu with more options\n\n##### `activeColor`\n\nCustom color for icon and label in the active tab.\n\n##### `inactiveColor`\n\nCustom color for icon and label in the inactive tab.\n\n##### `pressColor`\n\nColor for material ripple (Android >= 5.0 only).\n\n##### `pressOpacity`\n\nOpacity for pressed tab (iOS and Android < 5.0 only).\n\n##### `scrollEnabled`\n\nBoolean indicating whether to enable scrollable tabs.\n\nIf you set `scrollEnabled` to `true`, you should also specify a `width` in `tabStyle` to improve the initial render.\n\n##### `bounces`\n\nBoolean indicating whether the tab bar bounces when scrolling.\n\n##### `tabStyle`\n\nStyle to apply to the individual tab items in the tab bar.\n\nBy default, all tab items take up the same pre-calculated width based on the width of the container. If you want them to take their original width, you can specify `width: \'auto\'` in `tabStyle`.\n\n##### `indicatorStyle`\n\nStyle to apply to the active indicator.\n\n##### `indicatorContainerStyle`\n\nStyle to apply to the container view for the indicator.\n\n##### `labelStyle`\n\nStyle to apply to the tab item label.\n\n##### `contentContainerStyle`\n\nStyle to apply to the inner container for tabs.\n\n##### `style`\n\nStyle to apply to the tab bar container.\n\n## Optimization Tips\n\n### Avoid unnecessary re-renders\n\nThe `renderScene` function is called every time the index changes. If your `renderScene` function is expensive, it\'s good idea move each route to a separate component if they don\'t depend on the index, and use `shouldComponentUpdate` or `React.memo` in your route components to prevent unnecessary re-renders.\n\nFor example, instead of:\n\n```js\nrenderScene = ({ route }) => {\n  switch (route.key) {\n    case \'home\':\n      return (\n        <View style={styles.page}>\n          <Avatar />\n          <NewsFeed />\n        </View>\n      );\n    default:\n      return null;\n  }\n};\n```\n\nDo the following:\n\n```js\nrenderScene = ({ route }) => {\n  switch (route.key) {\n    case \'home\':\n      return <HomeComponent />;\n    default:\n      return null;\n  }\n};\n```\n\nWhere `<HomeComponent />` is a `PureComponent` if you\'re using class components:\n\n```js\nexport default class HomeComponent extends React.PureComponent {\n  render() {\n    return (\n      <View style={styles.page}>\n        <Avatar />\n        <NewsFeed />\n      </View>\n    );\n  }\n}\n```\n\nOr, wrapped in `React.memo` if you\'re using function components:\n\n```js\nfunction HomeComponent() {\n  return (\n    <View style={styles.page}>\n      <Avatar />\n      <NewsFeed />\n    </View>\n  );\n}\n\nexport default React.memo(HomeComponent);\n```\n\n### Avoid one frame delay\n\nWe need to measure the width of the container and hence need to wait before rendering some elements on the screen. If you know the initial width upfront, you can pass it in and we won\'t need to wait for measuring it. Most of the time, it\'s just the window width.\n\nFor example, pass the following `initialLayout` to `TabView`:\n\n```js\nconst initialLayout = {\n  height: 0,\n  width: Dimensions.get(\'window\').width,\n};\n```\n\nThe tab view will still react to changes in the dimension and adjust accordingly to accommodate things like orientation change.\n\n### Optimize large number of routes\n\nIf you\'ve a large number of routes, especially images, it can slow the animation down a lot. You can instead render a limited number of routes.\n\nFor example, do the following to render only 2 routes on each side:\n\n```js\nrenderScene = ({ route }) => {\n  if (Math.abs(this.state.index - this.state.routes.indexOf(route)) > 2) {\n    return <View />;\n  }\n\n  return <MySceneComponent route={route} />;\n};\n```\n\n### Avoid rendering TabView inside ScrollView\n\nNesting the `TabView` inside a vertical `ScrollView` will disable the optimizations in the `FlatList` components rendered inside the `TabView`. So avoid doing it if possible.\n\n### Use `lazy` and `renderLazyPlaceholder` props to render routes as needed\n\nThe `lazy` option is disabled by default to provide a smoother tab switching experience, but you can enable it and provide a placeholder component for a better lazy loading experience. Enabling `lazy` can improve initial load performance by rendering routes only when they come into view. Refer the [prop reference](#lazy) for more details.\n\n### Use `removeClippedSubviews` to improve memory usage\n\nOn Android, enabling `removeClippedSubviews` can improve memory usage. This option can also affect rendering performance negatively, so it is disabled by default. So make sure to test it when enabling it. Refer the [prop reference](#removeclippedsubviews) for more details.\n\n## Contributing\n\nWhile developing, you can run the [example app](/example/README.md) to test your changes.\n\nMake sure your code passes TypeScript and ESLint. Run the following to verify:\n\n```sh\nyarn typescript\nyarn lint\n```\n\nTo fix formatting errors, run the following:\n\n```sh\nyarn lint -- --fix\n```\n\nRemember to add tests for your change if possible.\n\n<!-- badges -->\n\n[build-badge]: https://img.shields.io/circleci/project/github/react-native-community/react-native-tab-view/master.svg?style=flat-square\n[build]: https://circleci.com/gh/react-native-community/react-native-tab-view\n[version-badge]: https://img.shields.io/npm/v/react-native-tab-view.svg?style=flat-square\n[package]: https://www.npmjs.com/package/react-native-tab-view\n[license-badge]: https://img.shields.io/npm/l/react-native-tab-view.svg?style=flat-square\n[license]: https://opensource.org/licenses/MIT\n'