b'# `@react-native-community/blur`\n\n[![npm version](https://badge.fury.io/js/%40react-native-community%2Fblur.svg)](https://badge.fury.io/js/%40react-native-community%2Fblur)\n\nA component for UIVisualEffectView\'s blur and vibrancy effect on iOS, and [500px-android-blur](https://github.com/500px/500px-android-blur) on Android.<br>\n\n<img src=\'https://cloud.githubusercontent.com/assets/139536/25066337/3c9d44c0-224d-11e7-8ca6-028478bf4a7d.gif\' />\n\n### Content\n\n- [Installation](#installation)\n- [BlurView](#blurview)\n- [VibrancyView](#vibrancyview)\n- [Example React Native app](#example-react-native-app)\n- [Questions?](#questions)\n\n### Installation\n\n1. Install the library using either Yarn:\n\n```\nyarn add @react-native-community/blur\n```\n\nor npm:\n\n```\nnpm install --save @react-native-community/blur\n```\n\n2. Link your native dependencies:\n\n```\nreact-native link @react-native-community/blur\n```\n\n3. (iOS only) Install to Xcode:\n\n```\ncd ios\npod install\n```\n\n4. (Android only) Add the following to `android/app/build.gradle`\n\n```\nandroid {\n    // make sure to use 23.0.3 or greater\n    buildToolsVersion \'23.0.3\'\n\n    // ...\n    defaultConfig {\n        // Add these lines below the existing config\n        renderscriptTargetApi 23\n        renderscriptSupportModeEnabled true\n    }\n}\n```\n\n5. (Android only, optional) \nIf you\'ve defined _[project-wide properties](https://developer.android.com/studio/build/gradle-tips.html)_ (**recommended**) in your root `build.gradle`, this library will detect the presence of the following properties:\n\n```groovy\nbuildscript {...}\nallprojects {...}\n\n/**\n  + Project-wide Gradle configuration properties\n  */\next {\n    compileSdkVersion   = 27\n    targetSdkVersion    = 27\n    buildToolsVersion   = "27.0.3"\n}\n```\n\n6. Include the library in your code:\n\n```javascript\nimport { BlurView, VibrancyView } from "@react-native-community/blur";\n```\n\n7. Compile and have fun!\n\n### BlurView\n\n**Properties:**\n\n- `blurType` (String)\n  - `xlight` - extra light blur type\n  - `light` - light blur type\n  - `dark` - dark blur type\n  - `extraDark` - extra dark blur type (tvOS only)\n  - `regular` - regular blur type (iOS 10+ and tvOS only)\n  - `prominent` - prominent blur type (iOS 10+ and tvOS only)\n- `blurAmount` (Default: 10, Number)\n  - `0-100` - Adjusts blur intensity\n\n> Note: The maximum `blurAmount` on Android is 32, so higher values will be clamped to 32.\n\n> Complete usage example that works on iOS and Android:\n\n```javascript\nimport React, { Component } from "react";\nimport { View, Image, Text, findNodeHandle, StyleSheet } from "react-native";\nimport { BlurView } from "@react-native-community/blur";\n\nexport default class Menu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { viewRef: null };\n  }\n\n  imageLoaded() {\n    this.setState({ viewRef: findNodeHandle(this.backgroundImage) });\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>Hi, I am some unblurred text</Text>\n        <BlurView\n          style={styles.absolute}\n          viewRef={this.state.viewRef}\n          blurType="light"\n          blurAmount={10}\n        />\n        <Image\n          ref={img => {\n            this.backgroundImage = img;\n          }}\n          source={{ uri }}\n          style={styles.absolute}\n          onLoadEnd={this.imageLoaded.bind(this)}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: "center",\n    alignItems: "center"\n  },\n  absolute: {\n    position: "absolute",\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0\n  }\n});\n```\n\nIn this example, the `Image` component will be blurred, because the `BlurView` in positioned on top. But the `Text` will stay unblurred.\n\nNote that `viewRef` is only required if you need to support Android. See the [Android section](#android) for more details.\n\n### VibrancyView\n\n**Uses the same properties as `BlurView` (`blurType` and `blurAmount`).**\n\n> The vibrancy effect lets the content underneath a blurred view show through more vibrantly\n\n> (Note: `VibrancyView` is only supported on iOS. Also note that the `VibrancyView` must contain nested views.)\n\n```javascript\nimport { VibrancyView } from "@react-native-community/blur";\n\nexport default class Menu extends Component {\n  render() {\n    return (\n      <Image source={{ uri }} style={styles.absolute}>\n        <VibrancyView blurType="light" style={styles.flex}>\n          <Text>Hi, I am some vibrant text.</Text>\n        </VibrancyView>\n      </Image>\n    );\n  }\n}\n```\n\n### Android\n\nAndroid uses the [500px-android-blur](https://github.com/500px/500px-android-blur) library, which works by blurring a referenced view. This means that you must wait until the view you want to blur is rendered. You then use `findNodeHandle` to get a reference to that view, and pass that reference to the `BlurView` as the `viewRef` prop. Take a look at [the BlurView example](#blurview) to see how it works.\n\nThe Android library introduces some limitations:\n\n- `BlurView` cannot be a child of the view that is being blurred (this would cause an infinite loop)\n- `BlurView` cannot contain any child components.\n\nIf you only need to support iOS, then you can safely ignore these limitations.\n\nIn addition to `blurType` and `blurAmount`, Android has some extra props that can be used to override the default behavior (or configure Android-specific behavior):\n\n- `blurRadius` (Number - between 0 and 25) - Manually adjust the blur radius. (Default: matches iOS blurAmount)\n- `downsampleFactor` (Number - between 0 and 25) - Scales down the image before blurring (Default: matches iOS blurAmount)\n- `overlayColor` (Color) - Set a custom overlay color (Default color based on iOS blurType)\n\n### Example React Native App\n\nThis project includes an example React Native app, which was used to make the GIF in this README.\nYou can run the apps by following these steps:\n\n1. Clone the repository\n\n```\ncd ~\ngit clone https://github.com/react-native-community/react-native-blur.git\n```\n\n2. cd to `example`\n\n```\ncd react-native-blur/example\n```\n\n3. Install dependencies\n\n```\nnpm install\n```\n\n4. Run the apps:\n\n#### Run the iOS app\n\n```\nreact-native run-ios\n```\n\n#### Run the tvOS app\n\ntype:\n\n```\nreact-native run-ios\n```\n\n`react-native link` don\xe2\x80\x99t works properly with the tvOS target so we need to add the library manually.\n\nFirst select your project in Xcode.\n\n<img src="./docs/tvOS-step-1.jpg" width="40%">\n\nAfter that, select the tvOS target of your application and select \xc2\xab\xc2\xa0General\xc2\xa0\xc2\xbb tab\n\n<img src="./docs/tvOS-step-2.jpg" width="40%">\n\nScroll to \xc2\xab\xc2\xa0Linked Frameworks and Libraries\xc2\xa0\xc2\xbb and tap on the + button\n\n<img src="./docs/tvOS-step-3.jpg" width="40%">\n\nSelect RNBlur-tvOS\n\n<img src="./docs/tvOS-step-4.jpg" width="40%">\n\nThat\xe2\x80\x99s all, you can use react-native-blur for your tvOS application\n\n#### Run the Android app\n\n```\nreact-native run-android\n```\n\n### Troubleshooting\n\nOn older instances of react-native, BlurView package does not get added into the MainActivity/MainApplication classes where you would see `Warning: Native component for \'BlurView\' does not exist` in RN YellowBox or console.\n\nTo rectify this, you can add the BlurViewPackage manually in MainActivity/MainApplication classes\n\n```java\n...\nimport com.cmcewen.blurview.BlurViewPackage;\n...\n\npublic class MainApplication extends Application implements ReactApplication {\n...\n    @Override\n    protected List<ReactPackage> getPackages() {\n      return Arrays.<ReactPackage>asList(\n          new MainReactPackage(),\n          new BlurViewPackage()\n      );\n    }\n...\n}\n```\n\n### Questions?\n\nFeel free to contact me on [twitter](https://twitter.com/kureevalexey) or [create an issue](https://github.com/Kureev/react-native-blur/issues/new)\n'