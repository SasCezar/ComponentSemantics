b'<h1 align="center">\n  <img src="https://i.imgur.com/S8jnr8O.png" height="300px" alt="redux zero logo" title="redux zero logo">\n  <br>\n</h1>\n<p align="center" style="font-size: 1.2rem;">A lightweight state container based on Redux</p>\n\n> Read [the intro blog post](https://medium.com/@matheusml/introducing-redux-zero-bea42214c7ee)\n\n<hr />\n\n[![codacy](https://api.codacy.com/project/badge/Grade/a4adf13156bd4441ae132d2d9dc72186)](https://www.codacy.com/app/matheusml/redux-zero?utm_source=github.com&utm_medium=referral&utm_content=redux-zero/redux-zero&utm_campaign=Badge_Grade)\n[![build](https://img.shields.io/travis/redux-zero/redux-zero/master.svg)](https://travis-ci.org/redux-zero/redux-zero)\n[![npm](https://img.shields.io/npm/v/redux-zero.svg)](https://www.npmjs.com/package/redux-zero)\n[![downloads](https://img.shields.io/npm/dm/redux-zero.svg)](https://www.npmjs.com/package/redux-zero)\n[![license](https://img.shields.io/github/license/redux-zero/redux-zero.svg)]()\n[![dependencies](https://img.shields.io/david/redux-zero/redux-zero.svg)]()\n\n## Table of Contents\n\n- [Installation](#installation)\n- [How](#how)\n- [Example](#example)\n- [Actions](#actions)\n- [Async](#async)\n- [Middleware](#middleware)\n- [DevTools](#devtools)\n- [TypeScript](#typescript)\n- [Inspiration](#inspiration)\n- [Roadmap](#roadmap)\n- [Docs](#docs)\n\n## Installation\n\nTo install the stable version:\n\n```\nnpm install --save redux-zero\n```\n\nThis assumes that you\xe2\x80\x99re using [npm](https://www.npmjs.com/) with a module bundler like [webpack](https://webpack.js.org/)\n\n## How\n\n**ES2015+:**\n\n```js\nimport createStore from "redux-zero";\nimport { Provider, connect } from "redux-zero/react";\n```\n\n**TypeScript:**\n\n```js\nimport * as createStore from "redux-zero";\nimport { Provider, connect } from "redux-zero/react";\n```\n\n**CommonJS:**\n\n```js\nconst createStore = require("redux-zero");\nconst { Provider, connect } = require("redux-zero/react");\n```\n\n**UMD:**\n\n```html\n<!-- the store -->\n<script src="https://unpkg.com/redux-zero/dist/redux-zero.min.js"></script>\n\n<!-- for react -->\n<script src="https://unpkg.com/redux-zero/react/index.min.js"></script>\n\n<!-- for preact -->\n<script src="https://unpkg.com/redux-zero/preact/index.min.js"></script>\n\n<!-- for vue -->\n<script src="https://unpkg.com/redux-zero/vue/index.min.js"></script>\n\n<!-- for svelte -->\n<script src="https://unpkg.com/redux-zero/svelte/index.min.js"></script>\n```\n\n## Example\n\nLet\'s make an increment/decrement simple application with React:\n\nFirst, create your store. This is where your application state will live:\n\n```js\n/* store.js */\nimport createStore from "redux-zero";\n\nconst initialState = { count: 1 };\nconst store = createStore(initialState);\n\nexport default store;\n```\n\nThen, create your actions. This is where you change the state from your store:\n\n```js\n/* actions.js */\nconst actions = store => ({\n  increment: state => ({ count: state.count + 1 }),\n  decrement: state => ({ count: state.count - 1 })\n});\n\nexport default actions;\n```\n\nBy the way, because the actions are bound to the store, they are just pure functions :)\n\nNow create your component. With **Redux Zero** your component can focus 100% on the UI and just call the actions that will automatically update the state:\n\n```js\n/* Counter.js */\nimport React from "react";\nimport { connect } from "redux-zero/react";\n\nimport actions from "./actions";\n\nconst mapToProps = ({ count }) => ({ count });\n\nexport default connect(\n  mapToProps,\n  actions\n)(({ count, increment, decrement }) => (\n  <div>\n    <h1>{count}</h1>\n    <div>\n      <button onClick={decrement}>decrement</button>\n      <button onClick={increment}>increment</button>\n    </div>\n  </div>\n));\n```\n\nLast but not least, plug the whole thing in your index file:\n\n```js\n/* index.js */\nimport React from "react";\nimport { render } from "react-dom";\nimport { Provider } from "redux-zero/react";\n\nimport store from "./store";\n\nimport Counter from "./Counter";\n\nconst App = () => (\n  <Provider store={store}>\n    <Counter />\n  </Provider>\n);\n\nrender(<App />, document.getElementById("root"));\n```\n\nHere\'s the full version: [https://codesandbox.io/s/n5orzr5mxj](https://codesandbox.io/s/n5orzr5mxj)\n\nBy the way, you can also reset the state of the store anytime by simply doing this:\n\n```js\nimport store from "./store";\n\nstore.reset();\n```\n\n### More examples\n\n- [React](https://github.com/redux-zero/redux-zero/tree/master/examples/react/counter)\n- [React-Router](https://github.com/redux-zero/redux-zero/tree/master/examples/react/react-router)\n- [Material-UI](https://github.com/redux-zero/redux-zero/tree/master/examples/react/material-ui-counter)\n- [Preact](https://github.com/redux-zero/redux-zero/tree/master/examples/preact/counter)\n- [React Native](https://github.com/redux-zero/redux-zero/tree/master/examples/react-native/counter)\n- [SSR](https://github.com/redux-zero/redux-zero/tree/master/examples/react/ssr)\n- [Svelte](https://github.com/redux-zero/redux-zero/tree/master/examples/svelte/counter)\n- [Vue](https://github.com/redux-zero/redux-zero/tree/master/examples/vue/counter)\n\n## Actions\n\nThere are tree gotchas with Redux Zero\'s actions:\n\n- Passing arguments\n- Combining actions\n- Binding actions outside your application scope\n\n### Passing arguments\n\nHere\'s how you can pass arguments to actions:\n\n```js\nconst Component = ({ count, incrementOf }) => (\n  <h1 onClick={() => incrementOf(10)}>{count}</h1>\n);\n\nconst mapToProps = ({ count }) => ({ count });\n\nconst actions = store => ({\n  incrementOf: (state, value) => ({ count: state.count + value })\n});\n\nconst ConnectedComponent = connect(\n  mapToProps,\n  actions\n)(Component);\n\nconst App = () => (\n  <Provider store={store}>\n    <ConnectedComponent />\n  </Provider>\n);\n```\n\n### Access props in actions\n\nThe initial component props are passed to the actions creator.\n\n```js\nconst Component = ({ count, increment }) => (\n  <h1 onClick={() => increment()}>{count}</h1>\n);\n\nconst mapToProps = ({ count }) => ({ count });\n\nconst actions = (store, ownProps) => ({\n  increment: state => ({ count: state.count + ownProps.value })\n});\n\nconst ConnectedComponent = connect(\n  mapToProps,\n  actions\n)(Component);\n\nconst App = () => (\n  <Provider store={store}>\n    <ConnectedComponent value={10} />\n  </Provider>\n);\n```\n\n### Combining actions\n\nThere\'s an utility function to combine actions on Redux Zero:\n\n```js\nimport { connect } from "redux-zero/react";\nimport { combineActions } from "redux-zero/utils";\n\nimport Component from "./Component";\nimport firstActions from "../../actions/firstActions";\nimport secondActions from "../../actions/secondActions";\n\nexport default connect(\n  ({ params, moreParams }) => ({ params, moreParams }),\n  combineActions(firstActions, secondActions)\n)(Component);\n```\n\n### Binding actions outside your application scope\n\nIf you need to bind the actions to an external listener outside the application scope, here\'s a simple way to do it:\n\nOn this example we listen to push notifications that sends data to our React Native app.\n\n```js\nimport firebase from "react-native-firebase";\nimport { bindActions } from "redux-zero/utils";\nimport store from "../store";\nimport actions from "../actions";\n\nconst messaging = firebase.messaging();\nconst boundActions = bindActions(actions, store);\n\nmessaging.onMessage(payload => {\n  boundActions.saveMessage(payload);\n});\n```\n\n## Async\n\nAsync actions in Redux Zero are almost as simple as sync ones. Here\'s an example:\n\n```js\nconst mapActions = ({ setState }) => ({\n  getTodos() {\n    setState({ loading: true });\n\n    return client\n      .get("/todos")\n      .then(payload => ({ payload, loading: false }))\n      .catch(error => ({ error, loading: false }));\n  }\n});\n```\n\nThey\'re still pure functions. You\'ll need to invoke `setState` if you have a loading status. But at the end, it\'s the same, just return whatever the updated state that you want.\n\nAnd here\'s how easy it is to test this:\n\n```js\ndescribe("todo actions", () => {\n  let actions, store, listener, unsubscribe;\n  beforeEach(() => {\n    store = createStore();\n    actions = getActions(store);\n    listener = jest.fn();\n    unsubscribe = store.subscribe(listener);\n  });\n\n  it("should fetch todos", () => {\n    nock("http://someapi.com/")\n      .get("/todos")\n      .reply(200, { id: 1, title: "test stuff" });\n\n    return actions.getTodos().then(() => {\n      const [LOADING_STATE, SUCCESS_STATE] = listener.mock.calls.map(\n        ([call]) => call\n      );\n\n      expect(LOADING_STATE.loading).toBe(true);\n      expect(SUCCESS_STATE.payload).toEqual({ id: 1, title: "test stuff" });\n      expect(SUCCESS_STATE.loading).toBe(false);\n    });\n  });\n});\n```\n\n## Middleware\n\nThe method signature for the middleware was inspired by redux. The main difference is that action is just a function:\n\n```js\n/* store.js */\nimport createStore from "redux-zero";\nimport { applyMiddleware } from "redux-zero/middleware";\n\nconst logger = store => next => action => {\n  console.log("current state", store.getState());\n  return next(action);\n};\n\nconst initialState = { count: 1 };\nconst middlewares = applyMiddleware(logger, anotherMiddleware);\n\nconst store = createStore(initialState, middlewares);\n\nexport default store;\n```\n\n## DevTools\n\nYou can setup DevTools middleware in store.js to connect with Redux DevTools and inspect states in the store.\n\n```js\n/* store.js */\nimport createStore from "redux-zero";\nimport { applyMiddleware } from "redux-zero/middleware";\nimport { connect } from "redux-zero/devtools";\n\nconst initialState = { count: 1 };\nconst middlewares = connect ? applyMiddleware(connect(initialState)) : [];\nconst store = createStore(initialState, middlewares);\n\nexport default store;\n```\n\nAlso, these are unofficial tools, maintained by the community:\n\n- [Redux-Zero Tools](https://github.com/nyteshade/rzero-tools)\n- [redux-zero persist middleware](https://github.com/axetroy/redux-zero-persist)\n- [redux-zero logger middleware](https://github.com/axetroy/redux-zero-logger)\n- [redux loading middleware](https://github.com/andre-araujo/redux-loading-middleware)\n\n## TypeScript\n\nYou can use the `BoundActions` type to write your React component props in a type\nsafe way. Example:\n\n```typescript\nimport { BoundActions } from "redux-zero/types/Actions";\n\ninterface State {\n  loading: boolean;\n}\n\nconst actions = (store, ownProps) => ({\n  setLoading: (state, loading: boolean) => ({ loading })\n});\n\ninterface StoreProps {\n  loading: boolean;\n}\n\ntype Props = StoreProps & BoundActions<State, typeof actions>\n\nclass Component = (props: Props) => (\n  <h1 onClick={() => props.setLoading(!props.loading)}>Stuff</h1>\n);\n\nconst mapToProps = (state: State): StoreProps => ({ loading: state.loading });\n\nconst ConnectedComponent = connect(\n  mapToProps,\n  actions\n)(Component);\n\nconst App = () => (\n  <Provider store={store}>\n    <ConnectedComponent value={10} />\n  </Provider>\n);\n```\n\nBy doing this, TypeScript will know the available actions and their types\navailable on the component\'s props. For example, you will get a compiler error if you\ncall `props.setLoding` (that action doesn\'t exist), or if you call it\nwith incorrect argument types, like `props.setLoading(123)`.\n\n## Inspiration\n\n**Redux Zero** was based on this [gist](https://gist.github.com/developit/55c48d294abab13a146eac236bae3219) by [@developit](https://github.com/developit)\n\n## Roadmap\n\n- Add more examples (including unit tests, SSR, etc)\n\n## Docs\n\n- [Full Docs](https://matheusml1.gitbooks.io/redux-zero-docs/content/)\n- [Contributing](https://github.com/redux-zero/redux-zero/blob/master/CONTRIBUTING.md)\n- [Changelog](https://github.com/redux-zero/redux-zero/blob/master/CHANGELOG.md)\n- [Code of Conduct](https://github.com/redux-zero/redux-zero/blob/master/CODE_OF_CONDUCT.md)\n- [License](https://github.com/redux-zero/redux-zero/blob/master/LICENSE)\n'