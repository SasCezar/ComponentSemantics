b'\xef\xbb\xbf# react-native-share [![CircleCI](https://circleci.com/gh/react-native-community/react-native-share/tree/master.svg?style=svg&circle-token=0c6860240abba4e16bd07df0ea805a72b67b8d41)](https://circleci.com/gh/react-native-community/react-native-share/tree/master) [![npm version](https://badge.fury.io/js/react-native-share.svg)](http://badge.fury.io/js/react-native-share)\nReact Native Share, a simple tool for share message and file to other apps.\n\n# Sponsors\n---\nIf you use this library on your commercial/personal projects, you can help us by funding the work on specific issues that you choose by using IssueHunt.io!\n\nThis gives you the power to prioritize our work and support the project contributors. Moreover it\'ll guarantee the project will be updated and maintained in the long run.\n\n[![issuehunt-image](https://issuehunt.io/static/embed/issuehunt-button-v1.svg)](https://issuehunt.io/repos/43406976)\n\n\n# Getting started\n---\n\n### If you are using `react-native` >= 0.60.0 please use `react-native-share` >= 2.0.0\n\n## Automatic Way\n---\n``` \nyarn add react-native-share\n```\n\nor if you\'re using npm\n``` \nnpm install react-native-share --save\n```\n---\n\n#### Important:\nLinking is not needed anymore. ``react-native@0.60.0+`` supports dependencies auto linking.\nFor iOS you also need additional step to install auto linked Pods (Cocoapods should be installed):\n``` \ncd ios && pod install && cd ../\n```\n___\n\n### If you are using `react-native` <= 0.59.10 please use `react-native-share` <= 1.2.1:\nIf you are having any problems with this library, or need to use >= 2.0.0 please refer to: [jetifier](https://github.com/mikehardy/jetifier#to-reverse-jetify--convert-node_modules-dependencies-to-support-libraries).\n\nAfter installing jetifier, runs a ```npx jetify -r``` and test if this works by running a ```react-native run-android```.\n## Automatic Way\n\n---\n``` \nyarn add react-native-share\nreact-native link react-native-share\n```\n\nor if you\'re using npm\n``` \nnpm install react-native-share --save\nreact-native link react-native-share\n```\n---\n\nWe recommend using the releases from npm, however you can use the master branch if you need any feature that is not available on NPM. By doing this you will be able to use unreleased features, but the module may be less stable. \n**yarn**: \n``` \nyarn add react-native-share@git+https://git@github.com/react-native-community/react-native-share.git\n```\n\n\n\n## Manual install\n\n### iOS Install\n\n\n1. `yarn add react-native-share`\n2. In XCode, in the project navigator, right click `Libraries` \xe2\x9e\x9c `Add Files to [your project\'s name]`\n3. Go to `node_modules` \xe2\x9e\x9c `react-native-share` \xe2\x9e\x9c `ios` and add `RNShare.xcodeproj`\n4. In XCode, in the project navigator, select your project. Add `libRNShare.a` to your project\'s `Build Phases` \xe2\x9e\x9c `Link Binary With Libraries`\n5. In XCode, in the project navigator, select your project. Add `Social.framework` and `MessageUI.framework` to your project\'s `General` \xe2\x9e\x9c `Linked Frameworks and Libraries`\n6. In iOS 9 or higher, You should add app list that you will share.\nIf you want to share Whatsapp and Mailto, you should write `LSApplicationQueriesSchemes` in info.plist  \n    ```xml\n    <key>LSApplicationQueriesSchemes</key>\n    <array>\n      <string>whatsapp</string>\n      <string>mailto</string>\n    </array>\n    ```\n7. (Optional) Also following lines allows users to save photos, add them in `info.plist`\n    ```xml\n    <key>NSPhotoLibraryAddUsageDescription</key>\n    <string>$(PRODUCT_NAME) wants to save photos</string>\n    ```\n8. Run your project (`Cmd+R`)\n\n### iOS Install(using Pods)\n\n\nIf you wish, you can use [cocopoads](https://cocoapods.org/) to use react-native-share.\n\nYou just need to add to your Podfile the react-native-share dependency.\n\n```ruby\n  # React-Native-Share pod\n  pod \'RNShare\', :path => \'../node_modules/react-native-share\'\n```\n\nAfter that, just run a `pod install` or `pod udpate` to get up and running with react-native-share. \n\nThen run a `react-native link react-native-share`, and doing the steps 6 and 7.\n\nYou can also see our example to see how you need to setup your podfile.\n\nBtw, We also recommend reading this [amazing article](https://shift.infinite.red/beginner-s-guide-to-using-cocoapods-with-react-native-46cb4d372995) about how pods and rn work together. =D\n\n\n### Android Install\n\n\n1. `yarn add react-native-share`\n2. Open up `android/app/src/main/java/[...]/MainApplication.java`\n    - Add `import cl.json.RNSharePackage;` and `import cl.json.ShareApplication;` to the imports at the top of the file\n    - Add `new RNSharePackage()` to the list returned by the `getPackages()` method\n\n3. Append the following lines to `android/settings.gradle`:\n  \t```\n  \tinclude \':react-native-share\'\n  \tproject(\':react-native-share\').projectDir = new File(rootProject.projectDir, \t\'../node_modules/react-native-share/android\')\n  \t```\n4. Insert the following lines inside the dependencies block in\n   `android/app/build.gradle`:\n\n    ```\n      compile project(\':react-native-share\')\n    ```\n5. **(Optional)** [Follow this for implementing Provider](#adding-your-implementation-of-fileprovider)\n\n### Windows Install\n\n\n[Read it! :D](https://github.com/ReactWindows/react-native)\n\n1. `yarn add react-native-share`\n2. In Visual Studio add the `RNShare.sln` in `node_modules/react-native-share/windows/RNShare.sln` folder to their solution, reference from their app.\n2. Open up your `MainPage.cs` app\n  - Add `using Cl.Json.RNShare;` to the usings at the top of the file\n  - Add `new RNSharePackage()` to the `List<IReactPackage>` returned by the `Packages` method\n\n\n\n# Methods\n---\n\n### open(options)\n\nOpen Simple share dialog\n\nReturns a promise that fulfills or rejects as soon as user successfully open the share action sheet or cancelled/failed to do so. As a result you might need to further handle the rejection while necessary. e.g.\n\n*For share multiple files, you must using option urls instead of url to share multiple files/images/docs.\nExample could be found in Example folder\n\n\n```jsx\n  Share.open(options)\n    .then((res) => { console.log(res) })\n    .catch((err) => { err && console.log(err); });\n```\n\nSupported options:\n\n| Name  | Type     | Description |\n| :---- | :------: | :--- |\n| url | string   | URL you want to share (only support base64 string in iOS & Android ). |\n| urls | Array[string]   | array of base64 string you want to share (only support iOS & Android). |\n| type | string   | File mime type (optional) |\n| message | string   |  |\n| title | string   |  (optional) |\n| subject | string   | (optional) |\n| email | string   | Email of addressee (optional) |\n| excludedActivityTypes | string   | (optional) |\n| failOnCancel | boolean | (defaults to true) Specifies whether promise should reject if user cancels share dialog (optional) |\n| showAppsToView | boolean | (optional) only android|\n| filename | string | only support base64 string in Android|\n\n#### Url format when sharing a file\n\n***Share base 64 file\n\nWhen share a base 64 file, please follow the format below:\n```\nurl: "data:<data_type>/<file_extension>;base64,<base64_data>"\n```\n\n***Share file directly\n\nWhen share a local file directly, please follow the format below:\n```\nurl: "file://<file_path>",\n```\n\n---\n### shareSingle(options) (in iOS & Android)\n\nOpen share dialog with specific application\n\n*This returns a promise too.*\n\nSupported options:\n\n| Name  | Type     | Description |\n| :---- | :------: | :--- |\n| url | string   | URL you want to share |\n| type | string   | File mime type (optional) |\n| message | string   |  |\n| title | string   |  (optional) |\n| subject | string   | (optional) |\n| email | string   | Email of addressee (optional) |\n| social | string   | supported social apps: [List](#static-values-for-social)  |\n| forceDialog | boolean | (optional) only android. Avoid showing dialog with buttons Just Once / Always. Useful for Instagram to always ask user if share as Story or Feed |\n\n***NOTE: If both `message` and `url` are provided, `url` will be concatenated to the end of `message` to form the body of the message. If only one is provided it will be used***\n\n---\n### isPackageInstalled(<app>) (in Android)\nIt\'s a method that checks if an app (package) is installed on Android. \nIt returns a promise with `isInstalled`. e.g.\n\nChecking if Instagram is installed on Android.\n```jsx\nShare.isPackageInstalled(\'com.instagram.android\')\n  .then(({ isInstalled }) => console.log(isInstalled))\n```\n\n***NOTE: in iOS you can use `Linking.canOpenURL(url)`***\n\n---\n## Static Values for social\n\nThese can be assessed using Share.Social property\nFor eg.\n```javascript\nimport Share from \'react-native-share\';\n\nconst shareOptions = {\n    title: \'Share via\',\n    message: \'some message\',\n    url: \'some share url\',\n    social: Share.Social.WHATSAPP,\n    whatsAppNumber: "9199999999"  // country code + phone number(currently only works on Android)\n    filename: \'test\' , // only for base64 file in Android \n};\nShare.shareSingle(shareOptions);\n```\n\n| Name  | Android     | iOS | Windows |\n| :---- | :------: | :--- | :---\n| **FACEBOOK** | yes   | yes | no |\n| **PAGESMANAGER** | yes   | no | no |\n| **WHATSAPP** | yes   | yes | no |\n| **INSTAGRAM** | yes   | yes | no |\n| **GOOGLEPLUS** | yes   | yes | no |\n| **EMAIL** | yes   | yes | no |\n| **PINTEREST** | yes   | no | no |\n| **SMS** | yes   | no | no |\n| **SNAPCHAT** | yes   | no | no |\n| **MESSENGER** | yes   | no | no |\n| **LINKEDIN** | yes   | no | no |\n\n#### How it looks:\n\n|          | Android  | IOS      | Windows  |\n| -------- | -------- | -------- | -------- |\n| Simple Share | ![Demo Android](/assets/android-250x.png)   | ![Demo iOS](/assets/ios-250x.png)   | ![Demo Windows](/assets/windows-250x.png) |\n| UI Component   | ![Demo Android UI Component](/assets/android-component-250x.gif)   | ![Demo Android UI Component](/assets/ios-component-250x.gif) |  TODO |\n\n---\n# Troubleshooting\n---\n#### Share Remote PDF File with Gmail & WhatsApp (iOS)\n\nWhen sharing a pdf file with base64, there are two current problems.\n\n1. On WhatsApp base64 wont be recognized => nothing to share\n2. In the GmailApp the file extension is wrong (.dat).\n\nTherefore we use this "workaround" in order to handle pdf sharing for iOS Apps to mentioned Apps\n\n1. Install react-native-fetch-blob\n2. Set a specific path in the RNFetchBlob configurations\n3. Download the PDF file to temp device storage\n4. Share the response\'s path() of the donwloaded file directly\n\nCode:\n\n```jsx\nstatic sharePDFWithIOS(fileUrl, type) {\n  let filePath = null;\n  let file_url_length = fileUrl.length;\n  const configOptions = {\n    fileCache: true,\n    path:\n      DIRS.DocumentDir + (type === \'application/pdf\' ? \'/SomeFileName.pdf\' : \'/SomeFileName.png\') // no difference when using jpeg / jpg / png /\n  };\n  RNFetchBlob.config(configOptions)\n    .fetch(\'GET\', fileUrl)\n    .then(async resp => {\n      filePath = resp.path();\n      let options = {\n        type: type,\n        url: filePath // (Platform.OS === \'android\' ? \'file://\' + filePath)\n      };\n      await Share.open(options);\n      // remove the image or pdf from device\'s storage\n      await RNFS.unlink(filePath);\n    });\n}\n```\n\nNothing to do on Android. You can share the pdf file with base64\n\n```jsx\nstatic sharePDFWithAndroid(fileUrl, type) {\n  let filePath = null;\n  let file_url_length = fileUrl.length;\n  const configOptions = { fileCache: true };\n  RNFetchBlob.config(configOptions)\n    .fetch(\'GET\', fileUrl)\n    .then(resp => {\n      filePath = resp.path();\n      return resp.readFile(\'base64\');\n    })\n    .then(async base64Data => {\n      base64Data = `data:${type};base64,` + base64Data;\n      await Share.open({ url: base64Data });\n      // remove the image or pdf from device\'s storage\n      await RNFS.unlink(filePath);\n    });\n}\n```\n\n#### Adding your implementation of FileProvider\n\n[Android guide](https://developer.android.com/training/secure-file-sharing/setup-sharing.html).\n   \n- `applicationId` should be defined in the `defaultConfig` section in your `android/app/build.gradle`:\n\n- File: `android/app/build.gradle`\n\n    ```\n    defaultConfig {\n        applicationId "com.yourcompany.yourappname"\n        ...\n    }\n    ```\n    \n- Add this `<provider>` section to your `AndroidManifest.xml`\n\n    File: `AndroidManifest.xml`\n    ```xml\n    <application>\n        <provider\n            android:name="androidx.core.content.FileProvider"\n            android:authorities="${applicationId}.provider"\n            android:grantUriPermissions="true"\n            android:exported="false">\n            <meta-data\n                android:name="android.support.FILE_PROVIDER_PATHS"\n                android:resource="@xml/filepaths" />\n        </provider>\n    </application>\n    ```\n\n- Create a `filepaths.xml` under this directory:\n`android/app/src/main/res/xml`. \n\n    In this file, add the following contents:\n    \n    File: `android/app/src/main/res/xml/filepaths.xml`\n    ```xml\n    <?xml version="1.0" encoding="utf-8"?>\n    <paths xmlns:android="http://schemas.android.com/apk/res/android">\n      <external-path name="myexternalimages" path="Download/" />\n    </paths>\n    ```\n\n- Edit your `MainApplication.java` class to add `implements ShareApplication` and `getFileProviderAuthority`\n- The `getFileProviderAuthority` function returns the `android:authorities` value added in the `AndroidManifest.xml` file\n- `applicationId` is defined in the `defaultConfig` section of your `android/app/build.gradle` and referenced using `BuildConfig.APPLICATION_ID`\n\n    ```java\n    import cl.json.ShareApplication\n    public class MainApplication extends Application implements ShareApplication, ReactApplication {\n    \n         @Override\n         public String getFileProviderAuthority() {\n                return BuildConfig.APPLICATION_ID + ".provider";\n         }\n\n         // ...Your own code\n\n    }\n    ```\n\n#### Mocking with Jest\n\n- To mock when using Jest. Add the below line on your `__mock__` directory.\n\n```js\njest.mock(\'react-native-share\', () => ({\n  default: jest.fn(),\n}));\n```\n'