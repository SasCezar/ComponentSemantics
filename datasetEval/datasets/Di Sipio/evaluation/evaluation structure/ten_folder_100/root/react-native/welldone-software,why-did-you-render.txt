b'# Why Did You Render\n\n[![npm version](https://badge.fury.io/js/%40welldone-software%2Fwhy-did-you-render.svg)](https://badge.fury.io/js/%40welldone-software%2Fwhy-did-you-render)\n\n`why-did-you-render` monkey patches **`React`** to notify you about avoidable re-renders. (Works with **`React Native`** as well.)\n\nFor example, when you pass `style={{width: \'100%\'}}` to a big pure component and make it always re-render:\n\n![](https://raw.githubusercontent.com/welldone-software/why-did-you-render/master/demo-image.png)\n\nIt can also help you to simply track when and why a certain component re-renders.\n\n## Read More\n* You can read more about the library [>> HERE <<](http://bit.ly/wdyr1).\n* Part 2 - **Common fixing scenarios** this library can help to eliminate can be found [>> HERE <<](http://bit.ly/wdyr02).\n* Part 3 - **React Hooks** - Understand and fix hooks issues [>> HERE <<](http://bit.ly/wdyr3).\n* Part 4 - **React-Redux** - Understand and fix react-redux issues [>> HERE <<](http://bit.ly/wdyr04).\n\n## Sandbox\nYou can test the library in the official sandbox [>> HERE <<](http://bit.ly/wdyr-sb).\n\n## Setup\n```\nnpm install @welldone-software/why-did-you-render --save\n```\nor\n```\nyarn add @welldone-software/why-did-you-render\n```\n\n> *Notice: the required **React version** for the library is **>=16.8** but it might work with older versions by using `trackHooks: false` in `whyDidYouRender`\'s init options.*\n\n## Installation\nExecute `whyDidYouRender` with `React` as it\'s first argument.\n\n```js\nimport React from \'react\';\n\nif (process.env.NODE_ENV !== \'production\') {\n  const whyDidYouRender = require(\'@welldone-software/why-did-you-render\');\n  whyDidYouRender(React);\n}\n```\n\nIf you are building for latest browsers and don\'t transpile, the "class" keyword use the "no-classes-transpile" dist:\n```js\nimport React from \'react\';\n\nif (process.env.NODE_ENV !== \'production\') {\n  const whyDidYouRender = require(\'@welldone-software/why-did-you-render/dist/no-classes-transpile/umd/whyDidYouRender.min.js\');\n  whyDidYouRender(React);\n}\n```\nNot doing so will [result in a bug](https://github.com/welldone-software/why-did-you-render/issues/5)\nwhere a transpiled class tries to extend a native class:\n\n`Class constructors must be invoked with \'new\'`.\n\n## Usage\nMark all the components you want to be notified about their re-renders with `whyDidYouRender` like this:\n\n```js\nclass BigListPureComponent extends React.PureComponent {\n  static whyDidYouRender = true\n  render(){\n    return (\n      //some heavy render you want to ensure doesn\'t happen if its not neceserry\n    )\n  }\n}\n```\n\nOr like this:\n\n```js\nconst BigListPureComponent = props => (\n  <div>\n    //some heavy component you want to ensure doesn\'t happen if its not neceserry\n  </div>\n)\nBigListPureComponent.whyDidYouRender = true\n```\n\nYou can also pass an object to specify more advanced settings:\n\n```js\nEnhancedMenu.whyDidYouRender = {\n  logOnDifferentValues: true,\n  customName: \'EnhancedMenu\'\n}\n```\n\n- `logOnDifferentValues`:\n\n  Normally, only re-renders that are caused by equal values in props / state trigger notifications:\n  ```js\n  render(<Menu a={1}/>)\n  render(<Menu a={1}/>)\n  ```\n  This option will trigger notifications even if they occurred because of different props / state (Thus, because of "legit" re-renders):\n  ```js\n  render(<Menu a={1}/>)\n  render(<Menu a={2}/>)\n  ```\n\n- `customName`:\n\n  Sometimes the name of the component can be very inconvenient. For example:\n\n  ```js\n  const EnhancedMenu = Connect(withPropsOnChange(withPropsOnChange(withStateHandlers(withPropsOnChange(withState(withPropsOnChange(lifecycle(withPropsOnChange(withPropsOnChange(onlyUpdateForKeys(LoadNamespace(Connect(withState(withState(withPropsOnChange(lifecycle(withPropsOnChange(withHandlers(withHandlers(withHandlers(withHandlers(Connect(lifecycle(Menu))))))))))))))))))))))))\n  ```\n\n  will have the display name:\n\n  ```js\n  Connect(withPropsOnChange(withPropsOnChange(withStateHandlers(withPropsOnChange(withState(withPropsOnChange(lifecycle(withPropsOnChange(withPropsOnChange(onlyUpdateForKeys(LoadNamespace(Connect(withState(withState(withPropsOnChange(lifecycle(withPropsOnChange(withHandlers(withHandlers(withHandlers(withHandlers(Connect(lifecycle(Menu))))))))))))))))))))))))\n  ```\n\n  To prevent polluting the console, and any other reason, you can change it using `customName`.\n\n## Options\nOptionally you can pass in options as a second parameter. The following options are available:\n- `include: [RegExp, ...]` (`null` by default)\n- `exclude: [RegExp, ...]` (`null` by default)\n- `trackHooks: true`\n- `logOnDifferentValues: false`\n- `hotReloadBufferMs: 500`\n- `onlyLogs: false`\n- `collapseGroups: false`\n- `titleColor`\n- `diffNameColor`\n- `diffPathColor`\n- `notifier: ({Component, displayName, prevProps, prevState, nextProps, nextState, reason, options}) => void`\n\n#### include / exclude\nYou can include or exclude tracking for re-renders for components\nby their displayName with the `include` and `exclude` options.\n\n*Notice: **exclude** takes priority over both `include` and `whyDidYouRender` statics on components.*\n\nFor example, the following code is used to [track all redundant re-renders that are caused by React-Redux](http://bit.ly/wdyr04):\n```js\nwhyDidYouRender(React, { include: [/^ConnectFunction/] });\n```\n\n#### trackHooks\nYou can turn off tracking of hooks changes.\n\nUnderstand and fix hook issues [>> HERE <<](http://bit.ly/wdyr3).\n\n#### logOnDifferentValues\nNormally, you only want notifications about component re-renders when their props and state\nare the same, because it means these re-renders could of been avoided. But you can also track\nall re-renders, even on different state/props.\n\n```js\nrender(<BigListPureComponent a={1}/>)\nrender(<BigListPureComponent a={2}/>)\n// this will only cause whyDidYouRender notifications for {logOnDifferentValues: true}\n```\n\n#### hotReloadBufferMs\nTime in milliseconds to ignore updates after a hot reload is detected.\n\nWe can\'t currently know exactly if a render was triggered by hot reload,\nso instead, we ignore all updates for `hotReloadBufferMs` (default: 500) after a hot reload.\n\n#### onlyLogs\nIf you don\'t want to use `console.group` to group logs by component, you can print them as simple logs.\n\n#### collapseGroups\nGrouped logs can start collapsed:\n\n#### titleColor / diffNameColor / diffPathColor\nControls the colors used in the console notifications\n\n#### notifier\nYou can create a custom notifier if the default one does not suite your needs.\n\n## Credit\n\nInspired by the following previous work:\n\nhttps://github.com/maicki/why-did-you-update which i had the chance to maintain for some time.\n\nhttps://github.com/garbles/why-did-you-update where [A deep dive into React perf debugging](http://benchling.engineering/deep-dive-react-perf-debugging/) is credited for the idea.\n\n## License\n\nThis library is [MIT licensed](./LICENSE).\n'