b'# wagtailgmaps [![PyPI](https://img.shields.io/pypi/v/wagtailgmaps.svg)](https://pypi.python.org/pypi/wagtailgmaps)\n\n> Simple Google Maps address formatter and LatLng provider for [Wagtail](https://wagtail.io/) fields.\n\n*Check out [Awesome Wagtail](https://github.com/springload/awesome-wagtail) for more awesome packages and resources from the Wagtail community.*\n\n![Wagtailgmaps screenshot](./screenshot.png)\n\n## Quickstart\n\n### Setting Up Your Google API Key\n\n1. Follow the instructions to [get a key](https://developers.google.com/maps/documentation/javascript/get-api-key)\n2. Enable the following services under `API Restrictions`:\n    * [Geocoding API](https://developers.google.com/maps/documentation/javascript/geocoding)\n    * [Maps Static API](https://developers.google.com/maps/documentation/static-maps/)\n    * [Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/)\n    * [Maps Embed API](https://developers.google.com/maps/documentation/javascript/)\n\n![Google_API_Screenshot](./google-maps-api.png)\n\n### Installing and Configuration the Python Package\n\n1. Install with `pip install wagtailgmaps`\n2. Add `wagtailgmaps` to your `settings.py` `INSTALLED_APPS` section.\n3. Add some configuration in your `settings.py` file:\n\n    ```python\n    # Mandatory\n    WAGTAIL_ADDRESS_MAP_CENTER = \'Wellington, New Zealand\'  # It must be a properly formatted address\n    WAGTAIL_ADDRESS_MAP_KEY = \'xxx\'\n\n    # Optional\n    WAGTAIL_ADDRESS_MAP_ZOOM = 8  # See https://developers.google.com/maps/documentation/javascript/tutorial#MapOptions for more information.\n    WAGTAIL_ADDRESS_MAP_LANGUAGE = \'ru\'  # See https://developers.google.com/maps/faq#languagesupport for supported languages.\n    ```\n\n4. Use it:\n\n    ```python\n    # myapp/models.py\n    from django.db import models\n    from wagtail.wagtailcore.models import Page\n    from wagtailgmaps.edit_handlers import MapFieldPanel\n\n    class MapPage(Page):\n        # Wagtailgmaps expects a `CharField` (or any other field that renders as a text input)\n        formatted_address = models.CharField(max_length=255)\n        latlng_address = models.CharField(max_length=255)\n\n        # Use the `MapFieldPanel` just like you would use a `FieldPanel`\n        content_panels = Page.content_panels + [\n            MapFieldPanel(\'formatted_address\'),\n            MapFieldPanel(\'latlng_address\', latlng=True),\n        ]\n    ```\n\n    ```html\n    # myapp/templates/myapp/map_page.html\n    <a href="http://maps.google.com/?q={{ self.formatted_address }}">Open map (Formatted Address)</a>\n    <a href="http://maps.google.com/?q={{ self.latlng_address }}">Open map (Lat/Long Address)</a>\n    ```\n\n## Additional information\n\n### `MapFieldPanel` options\n\n - `heading` - A custom heading in the admin, defaults to "Location"\n - `classname` - Add extra css classes to the field\n - `latlng` - Field returns a LatLng instead of an address\n - `centre` - A custom override for this field\n - `zoom` - A custom override for this field\n\n### How the address option works under the hook\n\nIf using the address option, the field gets updated according to the [Google Geocoding Service](https://developers.google.com/maps/documentation/geocoding/) each time:\n\n* The map marker gets dragged and dropped into a location (`dragend` JS event).\n* Click happens somewhere in the map (`click` JS event).\n* Return key is pressed after editing the field (`enterKey` JS event for return key only).\n\n### Troubleshooting\n\nWhen editing the model from the admin interface the affected field shows up with a map, like the screenshot above. If it doesn\'t, check your browser console to make sure that there is no error related to your API key.\n\n## Development\n\n### Releases\n\n- Make a new branch for the release of the new version.\n- Update the [CHANGELOG](https://github.com/springload/wagtailgmaps/CHANGELOG.md).\n- Update the version number in `wagtailgmaps/__init__.py`, following semver.\n- Make a PR and squash merge it.\n- Back on master with the PR merged, use `make publish` (confirm, and enter your password).\n- Finally, go to GitHub and create a release and a tag for the new version.\n- Done!\n'