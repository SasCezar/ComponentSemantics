b'[![Build Status](https://travis-ci.org/Frojd/wagtail-systemtext.svg?branch=master)](https://travis-ci.org/Frojd/wagtail-systemtext) [![PyPI version](https://badge.fury.io/py/wagtailsystemtext.svg)](https://badge.fury.io/py/wagtailsystemtext)\n\n# Wagtail System Text\n\nThis is a library that enables cms editors to update static test in Wagtail. By using identifiers developers mark the strings that can be updated by the editor/moderator from the cms.\n\nA template identifier can look like this `{% systemtext "title" %}`. When this identifier are evaluated it will be added to the cms under the section **Settings / System Text** under the name `title`. The entry has a field called `string` that can be updated, this is the text that will be rendered to the website users.\n\nIdentifiers can also be grouped, by using the group argument `{% systemtext "title" group "headlines" %}` we can make management easier, identifiers without group will be assigned to the `general` group.\n\nBy default identifiers will added in lazy mode, so for instance when a site renders a idenifier it will be added to that sites set of identifiers. The are also management commands that both searches through your code base and finds suiteable identifiers (`find_and_add_systemtext`), syncs then betweeen sites (`sync_systemtext`) and manual add/delete commands (`add_systemtext` / `delete_systemtext`).\n\n\n## Requirements\n\n- Python 3\n- Django 2+\n- Wagtail 2+\n\n\n## Installation\n\nInstall the library with pip:\n\n```bash\n$ pip install wagtailsystemtext\n```\n\n\n## Quick Setup\n\nMake sure `wagtail.contrib.modeladmin` and `wagtailsystemtext` is added to your `INSTALLED_APPS`.\n\n\n```python\nINSTALLED_APPS = (\n    # ...\n    \'wagtail.contrib.modeladmin\',\n    \'wagtailsystemtext\',\n)\n```\n\nThen add SiteSystemTextMiddleware to your middlewares, make sure you add it after `wagtail.wagtail.core.middleware.SiteMiddleware`\n\n```python\nMIDDLEWARE_CLASSES = (\n    # ...\n    \'wagtail.wagtail.core.middleware.SiteMiddleware\',\n    \'wagtailsystemtext.middlewares.SiteSystemTextMiddleware\',\n)\n```\n\nDone!\n\n\n## Usage\n\nOverall the implementation follows the same convention of django translations.\n\n### Strings\n\nThis is how you work with regular text, supply identifer and group and retrive the systemtext string.\n\n```python\nfrom wagtailsystemtext.utils import systemtext as _st\n\n_st(\'my_text\')\n_st(\'main_label\', group=\'buttons\')\n_st(\'main_label\', group=\'buttons\', default=\'My label\')\n```\n\n### Lazy strings\n\nLazy strings are run when called upon, when for instance you want to initialize a systemtext retrival before the middleware has run. Like in a admin interface.\n\n```python\nfrom wagtailsystemtext.utils import systemtext_lazy as _st\n\n_st(\'my_text\')\n_st(\'main_label\', group=\'buttons\')\n_st(\'main_label\', group=\'buttons\', default=\'My label\')\n```\n\n### Templates\n\nSystemtext contains a templatetag called systemtext, that behaves in the same way as Djangos `{% trans... %}`\n\n#### Templatetags\n\n```python\n{% load systemtext %}\n\n{% systemtext "my_text" %}\n{% systemtext "main_label" group "buttons" %}\n{% systemtext "main_label" group "buttons" default "My label" %}\n```\n\n\n## Management commands\n\n- `find_and_add_systemtext`: Finds the systemtext identifiers in your applications (by looking for `_st` and `{% systemtext ... %}`) and adds them to each wagtail site).\n- `add_systemtext`: Add identifier to site(s)\n- `delete_systemtext`: Remove identifiers from site(s)\n- `sync_systemtext`: Sync identifiers between sites to make sure they contain the same\n- `list_systemtext`: List all active systemtext\n\n\n## Settings\n\n- `SYSTEMTEXT_CACHE_PREFIX`: Cache prefix (`"wagtailsystemtext"` by default)\n- `SYSTEMTEXT_CACHE_EXPIRY`: Cache expiry in seconds (10 min by default)\n- `SYSTEMTEXT_REBUILD_ON_SAVE`: If cache should be rebuilt on save (`True` by default)\n- `SYSTEMTEXT_USE_DEFAULT_ON_EMPTY`: If present, use default value when string is empty (`False` by default)\n\n\n### Release start\n\nThese hooks will automatically bump the application version when using `git flow release ...`\n\n```bash\nchmod +x $PWD/git-hooks/bump-version.sh\nln -nfs $PWD/git-hooks/bump-version.sh .git/hooks/post-flow-release-start\nln -nfs $PWD/git-hooks/bump-version.sh .git/hooks/post-flow-hotfix-start\n```\n\n\n## Roadmap\n\n- [x] `trans` template tag support\n- [x] Wagtail admin view with site permissions\n- [x] Cache-rebild on save through admin\n- [x] Default text support (on declaration)\n- [x] Lazy text transforms\n- [x] Add setting for fallbacking to default if string is empty\n- [x] Automatic tag discovery\n- [x] Sync command between sites\n- [ ] Group filter in Wagtail admin\n- [ ] Last accessed timestamps\n- [ ] `blocktrans` template tag support\n\n\n## Contributing\n\nWant to contribute? Awesome. Just send a pull request.\n\n\n## License\n\nWagtail System Text is released under the [MIT License](http://www.opensource.org/licenses/MIT).\n'