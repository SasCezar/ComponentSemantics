b"Wagtail PostgreSQL full text search backend\n===========================================\n\n.. image:: http://img.shields.io/travis/wagtail/wagtail-pg-search-backend/master.svg\n   :target: https://travis-ci.org/wagtail/wagtail-pg-search-backend\n\nA PostgreSQL full text search backend for Wagtail CMS.\n\n\nInstallation\n------------\n\nPostgreSQL full text search in Wagtail requires PostgreSQL >= 9.2\n(noticable speed improvements are in place for PostgreSQL >= 9.5),\nDjango >= 1.10 and Wagtail >= 1.8.\n\nFirst, install the module using::\n\n    pip install wagtail-pg-search-backend\n\nThen you'll need to do a little bit of configuration.\n\nAdd the following to the project settings::\n\n    INSTALLED_APPS = [\n        ...\n        'wagtail_pgsearchbackend'\n        ...\n    ]\n\n    WAGTAILSEARCH_BACKENDS = {\n        'default': {\n            'BACKEND': 'wagtail_pgsearchbackend.backend',\n            'SEARCH_CONFIG': 'english'\n        }\n    }\n\nThen run migrations to add the required database table::\n\n    ./manage.py migrate wagtail_pgsearchbackend\n\n\nConfiguration\n-------------\n\nThe ``SEARCH_CONFIG`` key takes a text search configuration name.\nThis controls the stemming, stopwords etc. used when searching and\nindexing the database. To get a list of the available config names\nuse this query::\n\n    SELECT cfgname FROM pg_catalog.pg_ts_config\n\n\nUsage\n-----\n\nThis backend implements the required methods to be compatible\nwith most features mentioned in the the\n`Wagtail search docs`_.\n\n.. _Wagtail search docs: http://docs.wagtail.io/en/v1.9/topics/search/backends.html\n\n\nKnown limitations\n~~~~~~~~~~~~~~~~~\n\n* ``SearchField.partial_match`` behaviour is not implemented.\n\n* Due to a PostgreSQL limitation, ``SearchField.boost`` is only partially\n  respected. It is changed so that there can only be 4 different boosts.\n  If you define 4 or less different boosts,\n  everything will be perfectly accurate.\n  However, your search will be a little less accurate if you define more than\n  4 different boosts. That being said, it will work and be roughly the same.\n\n* ``SearchField.es_extra`` is not handled because it is specific\n  to ElasticSearch.\n\n* Using ``SearchQuerySet.search`` while limiting to specific field(s) is only\n  supported for database fields, not methods.\n\n\nPerformance\n~~~~~~~~~~~\n\nThe PostgreSQL search backend has been tried and tested on a few small\nto medium sized website and its performance compares favorably to that\nof ElasticSearch.\n\nSome noticeable speed improvements are in place when using PostgreSQL >= 9.5.\n\n\nFeatures to add\n---------------\n\nThese features would awesome to have once this project is merged with Wagtail:\n\n- Per-object boosting\n- Faceting\n- Autocomplete (maybe it should replace partial search?)\n- Spelling suggestions\n\n\nDevelopment\n-----------\n\nInstall the package and dev requirements::\n\n    pip install -e . -r requirements-dev.txt\n\n\nCreating migrations\n~~~~~~~~~~~~~~~~~~~\n\nFirst create a database::\n\n    createdb -Upostgres wagtail_pgsearchbackend\n\nThen call makemigrations using the test settings::\n\n    django-admin makemigrations --settings=tests.settings\n\n\nTesting\n~~~~~~~\n\nTo run the unittests for the current environment's Python version\nand Wagtail run::\n\n    make unittests\n\nTo check the code for style errors run::\n\n    make flaketest\n\nTo combine these tasks run::\n\n    make\n\nTo run the unittest against all supported versions of Python and\nWagtail run::\n\n    tox\n\nThe tox run will also create a coverage report combining the results\nof all runs. This report is located in ``htmlcov/index.html``.\n\nTo run individual tests by name use the ``runtests.py`` script and give\nthe dotted path the the test module(s), class(es) or method(s) that you\nwant to test e.g.::\n\n    ./runtests.py tests.test_module.TestClass.test_method\n\n"