b'=====================\nDjango-WagtailMedium\n=====================\n\nWagtailmedium is a Medium Editor integration for the Wagtail CMS.\n\n.. image:: https://raw.githubusercontent.com/dperetti/Django-wagtailmedium/master/Documentation.codestory/data/1a179310-b817-11e6-9f99-f91930e01b01.png\n\n\n**Note**: A more detailed documentation is available in `.codestory <http://codestoryapp.com>`_ format, along with a sample project to fiddle with.\n\nFeatures\n--------\n- Compatible with Wagtail internal links, plus the ability to add url fragments.\n- Configurable from the Django settings.\n- Ability to create custom buttons (ex: text marker).\n\n\nInstall\n-------\n1. **Install from pip**::\n\n    pip install django-wagtailmedium\n\n2. **Add wagtailmedium to your apps**::\n\n    INSTALLED_APPS = [\n      ...\n      \'wagtailmedium\',\n    ]\n\n3. **Add a wagtailmedium widget to ``WAGTAILADMIN_RICH_TEXT_EDITORS``** (implemented by wagtail, undocumented yet)\n::\n\n   WAGTAILADMIN_RICH_TEXT_EDITORS = {\n        \'default\': {\n            \'WIDGET\': \'wagtail.wagtailadmin.rich_text.HalloRichTextArea\'\n        },\n        \'medium\': {\n            \'WIDGET\': \'wagtailmedium.rich_text.MediumRichTextArea\',\n            \'OPTIONS\': {\n                \'custom_buttons\': {\n                    \'code\': {\n                      \'contentDefault\': \'<b>Code</b>\',\n                      \'contentFA\': \'<i class="fa fa-code"></i>\',\n                      \'tag\': \'code\',\n                      \'className\': \'code\',  # optional\n                    },\n                    \'test\': {\n                        \'contentDefault\': \'<b>Test</b>\',\n                        \'contentFA\': \'<i class="fa fa-code"></i>\',\n                        \'tag\': \'span\',\n                        \'className\': \'test\',  # optional\n                    },\n                },\n                \'medium\': {  # https://github.com/yabwe/medium-editor#options-example\n                    # \'buttonLabels\': \'fontawesome\',\n                    \'toolbar\': {\n                        \'buttons\': [  # https://github.com/yabwe/medium-editor#all-buttons\n                            \'bold\', \'italic\', \'underline\',\n                            \'code\',\n                            \'test\',\n                            \'link\',\n                            \'linkdoc\',\n                            \'h2\', \'h3\', \'orderedlist\', \'unorderedlist\', \'strikethrough\'\n                        ]\n                    },\n                },\n            },\n        },\n    }\n\n\n4. **Register whitelister element rules**\n\nThis wagtail `hook <http://docs.wagtail.io/en/v1.7/reference/hooks.html#construct-whitelister-element-rules>`_ defines which HTML elements are allowed in rich text areas.\n\n``wagtail_hooks.py``::\n\n    from wagtail.wagtailcore import hooks\n    from wagtail.wagtailcore.whitelist import attribute_rule, allow_without_attributes\n\n\n    # http://docs.wagtail.io/en/v1.7/reference/hooks.html#construct-whitelister-element-rules\n    @hooks.register(\'construct_whitelister_element_rules\')  # #7bFcf#\n    def whitelister_element_rules():\n        return {\n            \'u\': allow_without_attributes,\n            \'span\': attribute_rule({\'class\': True}),\n            \'code\': allow_without_attributes,\n            \'blockquote\': allow_without_attributes,\n        }\n\n5. **Use wagtailmedium in a RichTextField of your model**\n\n``models.py``::\n\n    from wagtail.wagtailcore.models import Page, StreamField, RichTextField\n\n    class HomePage(Page):\n        # a default, Hallo editor\n        hallo = RichTextField(blank=True)\n        # a medium editor\n        medium = RichTextField(editor=\'medium\', blank=True)\n\n'