b'## Search backend for Wagtail CMS using Whoosh engine.\n\n[![Build Status](https://travis-ci.org/wagtail/wagtail-whoosh.svg?branch=master)](https://travis-ci.org/wagtail/wagtail-whoosh)\n\n## How to use\n\n* `0.1.x` work with `wagtail>=2.0,<2.2`\n* `0.2.x` work with `wagtail>=2.2`\n\n`pip install wagtail-whoosh`\n\nAfter installing this package, add `wagtail_whoosh` to INSTALLED_APPS. And then config `WAGTAILSEARCH_BACKENDS`\n\n```python\nimport os\n\nROOT_DIR = os.path.abspath(os.path.dirname(__name__))\n\nWAGTAILSEARCH_BACKENDS = {\n    \'default\': {\n        \'BACKEND\': \'wagtail_whoosh.backend\',\n        \'PATH\': os.path.join(ROOT_DIR, \'search_index\')\n        \'LANGUAGE\': \'fr\',\n    },\n}\n```\n\nSet `./manage.py update_index` as cron job\n\n## Features\n\n### Support autocomplete\n\nIf you want to search `hello world`, you might need to use `hello` in previous versions. Now you can use `hel` and the backend would return the result.\n\n```\n# you need to define the search field in this way\nindex.SearchField(\'title\', partial_match=True)\n\n# or this way\nindex.AutocompleteField(\'title\')\n```\n\n### Specifying the fields to search\n\n```\n# Search just the title field\n>>> EventPage.objects.search("Event", fields=["title"])\n[<EventPage: Event 1>, <EventPage: Event 2>]\n```\n\n### Score support\n\n```\nresults = Page1.objects.search(query).annotate_score("_score").results()\nresult += Page2.objects.search(query).annotate_score("_score").results()\nreturn sorted(results, key=lambda r: r._score)\n```\n\n### Language support\n\nWhoosh includes pure-Python implementations of the Snowball stemmers and stop word lists for various languages adapted from NLTK.\n\nSo you can use the built-in language support by setting like `\'LANGUAGE\': \'fr\'`, the language support list is below.\n\n`(\'ar\', \'da\', \'nl\', \'en\', \'fi\', \'fr\', \'de\', \'hu\', \'it\', \'no\', \'pt\', \'ro\', \'ru\', \'es\', \'sv\', \'tr\')`\n\nIf you want more control or want to do customization, you can use `ANALYZER` instead of `LANGUAGE` here.\n\n> An analyzer is a function or callable class (a class with a __call__ method) that takes a unicode string and returns a generator of tokens\n\nYou can set `ANALYZER` using an object reference or dotted module path.\n\n**NOTE: If ANALYZER is set, your LANGUAGE would be ignored**\n\n```\nfrom whoosh.analysis import LanguageAnalyzer\nanalyzer_swedish = LanguageAnalyzer(\'sv\')\n\nWAGTAILSEARCH_BACKENDS = {\n    \'default\': {\n        \'BACKEND\': \'wagtail_whoosh.backend\',\n        \'PATH\': str(ROOT_DIR(\'search_index\')),\n        \'ANALYZER\': analyzer_swedish,\n    },\n}\n```\n\n## NOT-Supported features\n\n1. `facet` is not supported.\n\n'