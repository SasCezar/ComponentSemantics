b'# wagtailembedder [![PyPI](https://img.shields.io/pypi/v/wagtailembedder.svg)](https://pypi.python.org/pypi/wagtailembedder)\n\n> Snippets embedder for Wagtail RichTextField.\n\n*Check out [Awesome Wagtail](https://github.com/springload/awesome-wagtail) for more awesome packages and resources from the Wagtail community.*\n\n![Wagtailembedder scnreenshot](./screenshot.png)\n\n## Quickstart\n\nInstall the package with\n\n```sh\npip install wagtailembedder\n```\n\nAdd `wagtailembedder` to your `settings.py` in the `INSTALLED_APPS` section:\n\n```python\nINSTALLED_APPS = [\n    ...\n    \'modelcluster\',\n    \'wagtailembedder\',\n    \'core\',\n    ...\n]\n```\n\nFor each models registered as a wagtail.wagtailsnippets create an html file to render the template inside a RichText field.\n\n * Templates names will match snippets models names replacing capital letters with underscores, Wagtail style.\n   For the ```SocialMediaLink``` snippet in the ```core``` app, it will look for the following template ```core/templates/snippets/socialmedialink.html```.\n * The variable containing the snippet instance in the template is ```snippet```.\n\nIf no template is defined then an exception will be raised in the frontend when rendering a RichTextField with the embedded snippet in it. Make sure you write some templates for your snippets before start to embedding them.\n\n# Options\n\nIf the snippet meta has a description field, it will show up next to the snippet name in the admin interface.\n\n```python\nfrom django.db import models\nimport django.db.models.options as options\n\noptions.DEFAULT_NAMES = options.DEFAULT_NAMES + (\'description\',)\n\n\n@register_snippet\nclass MySnippet(models.Model):\n    # fields definition\n\n    class Meta:\n        description = "My Snippet Description"\n```\n\n## Development\n\n### Releases\n\n- Make a new branch for the release of the new version.\n- Update the [CHANGELOG](https://github.com/springload/wagtailembedder/CHANGELOG.md).\n- Update the version number in `setup.py`, following semver.\n- Make a PR and squash merge it.\n- Back on master with the PR merged, use `make publish` (confirm, and enter your password).\n- Finally, go to GitHub and create a release and a tag for the new version.\n- Done!\n'