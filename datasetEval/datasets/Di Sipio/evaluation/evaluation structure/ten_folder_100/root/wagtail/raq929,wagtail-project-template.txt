b"# Wagtail Project Template\n\n> A template for a Wagtail project with basic apps and a Webpack setup.\n\n## Table of Contents\n* [Requirements](#requirements)\n* [Create a new repo](#create-a-new-repo)\n* [Development](#development)\n   * [Quick start](#quick-start)\n   * [Adding requirements](#adding-requirements)\n   * [Database configuration](#database-configuration)\n   * [Managment commands](#management-commands)\n\n## Requirements\n* Python 3\n* `virtualenv` or [`virtualenvwrapper`](https://virtualenvwrapper.readthedocs.io/en/latest/install.html)\n\n## Create a new repo from this template.\n\n1.  Clone this repo\n1.  Create a new virtualenv for your project and run `pip install django`\n1.  Create a new project from the template by running `django-admin startproject <project_name> --template=wagtail-project-template`\n1.  `cd` into your new project directory and run `git init` to initialize a git repository. Make an initial commit.\n1.  Open your new project in a text editor and replace all instances of `project_name` with your project name.\n1.  Change this README to be relevant to your project.\n1.  Create a database using the instructions below.\n\n## Development\n\n### Quick start\n1.  [Create a virtualenv](https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html#mkvirtualenv) for this project (using python3)\n1.  `pip install -r dev-requirements.txt`\n1.  In a new window `npm install` then `npm start`\n1.  Start postgresql\n1.  `createdb <project_name>`\n1.  `DATABASE_URL=postgres:///iai ./manage.py migrate`\n1.  `DATABASE_URL=postgres:///iai ./manage.py createdevdata`\n1.  `DATABASE_URL=postgres:///iai ./manage.py runserver`\n\n### Requirements\nUse [`pipenv`](https://docs.pipenv.org/) to manage requirements.\n\n1.  `pipenv install --three` # Creates a virtualenv with python3 and installs normal dependencies\n1.  `pipenv install --dev` # Installs dev dependencies\n1.  `pipenv install <package>` # Installs the package and automatically updates `Pipfile` and `Pipfile.lock`.\n\n### Database configuration\n\nThe first time you run, you'll need to run migrations and create a superuser:\n\n```bash\n    python manage.py migrate           # Create/sync the database.\n    python manage.py createsuperuser   # Create an initial user.\n```\n\n``base.py`` will use sqlite3 by default.\nYou can use postgres with the ``DATABASE_URL`` environment variable.\n\n```bash\n    createdb project_name\n    DATABASE_URL=postgres:///project_name python manage.py migrate\n```\n\nThe format for `DATABASE_URL` urls is\n`<type_of_database>://<database_user>:<database_password>@<server>:<port>/<database_name>`\nIf no database is specified, the default is a SQLite database.\n\nYou can now run the server: `DATABASE_URL=postgres:///project_name ./manage.py runserver`\n\n### Management commands\n<dl>\n  <dt>createdevdata [--delete]</dt>\n  <dd>\n    This command creates a basic Wagtail site and a superuser. It calls all other management commands related to development data. The delete flag deletes all data before creating new data.\n  </dd>\n  <dt>createhomepage [--delete]</dt>\n  <dd>\n    This command creates a homepage and Wagtail Site if they do not already exist. If called with the delete flag, deletes all pages except the root and creates a homepage. You will need to restart the server after running this command, as the Wagtail site number will change.\n  </dd>\n  <dt>createblogposts <number_of_posts></dt>\n  <dd>\n    This command creates a blog index page (if it does not already exist) and the specified number of blog posts.\n  </dd>\n</dl>\n\n## [LICENSE](LICENSE.md)\n"