b".. image:: https://travis-ci.org/springload/wagtailmodelchoosers.svg?branch=master\n   :target: https://travis-ci.org/springload/wagtailmodelchoosers\n.. image:: https://img.shields.io/pypi/v/wagtailmodelchoosers.svg\n   :target: https://pypi.python.org/pypi/wagtailmodelchoosers\n   \nwagtailmodelchoosers\n====================\n\n    A Wagtail app to pick generic models (rather than snippets or pages).\n\n**This is alpha software, use at your own risk. Do not use in production (yet).**\n\nCheck out `Awesome Wagtail <https://github.com/springload/awesome-wagtail>`_ for more awesome packages and resources from the Wagtail community.\n\n.. image:: https://cdn.rawgit.com/springload/wagtailmodelchoosers/b7b6202/.github/wagtailmodelchoosers-screenshot.png\n   :width: 728 px\n\nInstallation\n------------\n\nGrab the package from pip with ``pip install wagtailmodelchoosers``, then add ``wagtailmodelchoosers`` in ``INSTALLED_APPS`` in your settings.\n\nUsage\n-----\n\n``ModelChooserBlock`` takes the name of the chooser configuration as first positional argument. Use other block kwargs (e.g. `required`) as usual.\n\n.. code:: python\n\n    from wagtail.wagtailcore import blocks\n    from wagtailmodelchoosers.blocks import ModelChooserBlock\n    \n    class CustomBlock(blocks.StructBlock):\n        custom_model = ModelChooserBlock('custom_model')  # `chooser` can be a positional argument, the keyword is used here for clarity.\n       \n``ModelChooserPanel`` takes the name of the field as first positional argument (like a regular Panel) and the name of the chooser configuration as second positional argument. Use other panel kwargs as usual.\n\n.. code:: python\n\n    from django.db import models\n    from wagtail.core.models import Page\n    from wagtailmodelchoosers.edit_handlers import ModelChooserPanel\n    \n    class CustomPage(Page):\n        custom_model = models.ForeignKey('myapp.CustomModel')\n        \n        panels = [\n            ...\n            ModelChooserPanel('custom_model', chooser='custom_model'),  # `chooser` can be a positional argument, the keyword is used here for clarity.\n        ]\n\nTo select a model from a remote API, respectively use ``RemoteModelChooserBlock`` and ``RemoteModelChooserPanel`` instead.\n\nIf you have `WagtailDraftail <https://github.com/springload/wagtaildraftail>`_ installed, it will automatically register the ``ModelSource`` and ``RemoteModelSource`` to the JS. Refer to ``WagtailDraftail``'s `documentation <https://github.com/springload/wagtaildraftail#configuration>`_ to hook it up properly.\n\nConfiguration\n~~~~~~~~~~~~~\n\nIt looks for a ``MODEL_CHOOSERS_OPTIONS`` dictionary in the settings where the key is the name of the chooser and the value, a dictionary of options.\n\nThe ModelChooser and RemoteModelChooser share a similar base configuration and only have a few specific fields.\n\n.. code:: python\n\n    MODEL_CHOOSERS_OPTIONS = {\n        'navigation': {\n            'label': 'Navigation',                                   # The label to use for buttons or modal title\n            'display': 'name',                                       # The field to display when selecting an object\n            'list_display': [                                        # The fields to display in the chooser\n                {'label': 'Name', 'name': 'name'},\n                {'label': 'Identity', 'name': 'identity'},\n                {'label': 'Active', 'name': 'active'},\n            ],\n            'content_type': 'core.Navigation',                       # ONLY FOR MODEL: The django content type of the model\n            'fields_to_save': ['id'] + RATE_CHOOSER_DISPLAY_FIELDS,  # ONLY FOR REMOTE: The remote objects fields to save to the DB. Leave empty to save the whole object.\n            'remote_endpoint': 'http://...'                          # ONLY FOR REMOTE: The remote API endpoint.\n            'pk_name': 'uuid',                                       # The primary key name of the model\n        }\n    }\n    \nIn addition, you can customise the mapping of the key of the API, see the configuration key names being used for the `query <https://github.com/springload/wagtailmodelchoosers/blob/c36bb877eef4ac4af6b221f0d7ff7416354754c7/wagtailmodelchoosers/utils.py#L107-L112>`_ and the `response <https://github.com/springload/wagtailmodelchoosers/blob/c36bb877eef4ac4af6b221f0d7ff7416354754c7/wagtailmodelchoosers/utils.py#L115-L123>`_.\n\n\nDevelopment\n-----------\n\nInstallation\n~~~~~~~~~~~~\n\nRequirements: ``virtualenv``, ``pyenv``, ``twine``\n\n.. code:: sh\n\n    git clone git@github.com:springload/wagtailmodelchoosers.git\n    cd wagtailmodelchoosers/\n    virtualenv .venv\n    source ./.venv/bin/activate\n    pip install -e .[testing,docs] -U\n    nvm install\n    npm install\n\nCommands\n~~~~~~~~\n\n.. code:: sh\n\n    make help            # See what commands are available.\n\nTODO: Complete\n\nReleases\n~~~~~~~~\n\n*  Make a new branch for the release of the new version.\n*  Update the `CHANGELOG <https://github.com/springload/wagtailmodelchoosers/CHANGELOG.md>`_.\n*  Update the version number in ``wagtailmodelchoosers/__init__.py`` and ``package.json``, following semver.\n*  Make a PR and squash merge it.\n*  Back on master with the PR merged, use ``make publish`` (confirm, and enter your password).\n*  Finally, go to GitHub and create a release and a tag for the new version.\n*  Done!\n\n"