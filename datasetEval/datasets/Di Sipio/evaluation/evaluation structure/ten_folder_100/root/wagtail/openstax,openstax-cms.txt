b"[![Build Status](https://travis-ci.org/openstax/openstax-cms.svg?branch=master)](https://travis-ci.org/openstax/openstax-cms)\n[![codecov](https://codecov.io/gh/openstax/openstax-cms/branch/master/graph/badge.svg)](https://codecov.io/gh/openstax/openstax-cms)\n\nOpenStax CMS\n=======================\n\nBuilt using [Wagtail CMS](http://wagtail.io) on top of [Django Framework](https://www.djangoproject.com). All installation instructions assume you already have [Homebrew](http://brew.sh) installed. If you are not running on MacOSX or a Linux distribution, see the hyperlinks for dependencies.\n\nDependencies\n=======================\n* [PostgreSQL](http://www.postgresql.org) (\xe2\x89\xa5 11.3)  \n```bash\nbrew install postgresql\n```\n* [Python](https://www.python.org/) (\xe2\x89\xa5 3.4)\n* [PIP](https://github.com/pypa/pip) (\xe2\x89\xa5 8.0.0)\n```bash\nbrew install python3\n```\n\nInstallation\n=======================\nVerify you have Python \xe2\x89\xa5 3.4 installed:  \n```bash\npython --version\npython3 --version\n```\n\nStart PostgreSQL:\n```bash\nbrew services start postgresql\n```\nThis will also make sure PostgreSQL service starts on boot.\n\nCreate a database (this is also a shell script), which is named as `oscms_prodcms`. However, it can be renamed as long as the change is reflected on the appropriate field in `openstax/settings/base.py`:\n```bash\ncreatedb oscms_prodcms\n```\n\nNow we can install the repository. Run the following commands line by line:\n\n```bash\ngit clone https://github.com/openstax/openstax-cms\ncd openstax-cms/\npip3 install -r requirements/dev.txt\n```\n\nAfter all the modules in requirements are installed, run the migration script:\n\n```bash\npython3 manage.py migrate\n```\nNow, create a super user. Run the following command and then proceed with the instructions:\n\n```bash\npython3 manage.py createsuperuser\n```\n\nFinally, start the server:\n\n```bash\npython3 manage.py runserver\n```\n\nTesting\n=======================\nTo test OpenStax CMS on a local device, you need to overwrite some settings. This can be streamlined by introducing `local.py` in `openstax/settings/`. Any changes on or additions to `local.py` will overwrite settings. Make copy of `local.py.example` and rename it to `local.py`:\n```bash\ncd openstax/settings/\ncp local.py.example local.py\n```\n\nStart the server:\n```bash\npython3 manage.py test --liveserver=localhost:8001 --settings=openstax.settings.dev\n```\n\nSQLite Support\n=======================\nSQLite is supported as an alternative to PostgreSQL. In order to switch to SQLite, change the `DATABASES` setting\nin `openstax/settings/base.py` to use `'django.db.backends.sqlite3'`, and set `NAME` to be the full path of your database file, as you would with a regular Django project.\n\nDocker\n=======================\nTo run the CMS in Docker containers:\n\n```bash\ndocker-compose up\n```\n\nThe CMS code directory from your host machine is mounted in the `app` container at `/code`. To drop into a bash terminal in the `app` container:\n\n```bash\ndocker-compose exec -e DJANGO_SETTINGS_MODULE=openstax.settings.docker app bash\n```\n\nThis command has been wrapped in a tiny script:\n\n```bash\n./docker/bash\n```\n\nFrom within the bash shell, you can run the tests:\n\n```bash\npython3 manage.py test --keepdb\n```\n\nor pound on a specific test:\n\n```bash\npython3 manage.py test --keepdb books.tests.BookTests.test_can_create_book\n```\n\nThe `--keepdb` option reuses the test database from run to run so you don't have to wait for it to recreate the database and run the migrations every time.\n\nTo debug tests, you can insert the normal `import pdb; pdb.set_trace()` lines in your code and test runs from the bash environment will show you the debugger.\n\nAPI Endpoints\n=======================\n[View the Wiki Page](https://github.com/openstax/openstax-cms/wiki/API-Endpoints) for the list of all available API endpoints and their descriptions."