b'# [Draft.js filters](https://thibaudcolas.github.io/draftjs-filters/) [<img src="https://raw.githubusercontent.com/thibaudcolas/draftail.org/master/.github/draftail-logo.svg?sanitize=true" width="90" height="90" align="right">](https://www.draftail.org/)\n\n[![npm](https://img.shields.io/npm/v/draftjs-filters.svg)](https://www.npmjs.com/package/draftjs-filters) [![Build Status](https://travis-ci.org/thibaudcolas/draftjs-filters.svg?branch=master)](https://travis-ci.org/thibaudcolas/draftjs-filters) [![Coverage Status](https://coveralls.io/repos/github/thibaudcolas/draftjs-filters/badge.svg)](https://coveralls.io/github/thibaudcolas/draftjs-filters)\n\n> Filter [Draft.js](https://facebook.github.io/draft-js/) content to preserve only the formatting you allow. Built for [Draftail](https://www.draftail.org/).\n\n[![Screenshot of Microsoft Word with tens of toolbars activated](https://thibaudcolas.github.io/draftjs-filters/word-toolbars-overload.jpg)](https://thibaudcolas.github.io/draftjs-filters)\n\nThe main use case is to select what formatting to keep when copy-pasting rich text into an editor, for example from Word or Google Docs, addressing Draft.js limitations like [#166](https://github.com/facebook/draft-js/issues/166) and [#504](https://github.com/facebook/draft-js/issues/504). Check out the [online demo](https://thibaudcolas.github.io/draftjs-filters)!\n\n> If you want to learn more about how this is used in practice, have a look at [Rethinking rich text pipelines with Draft.js](https://wagtail.io/blog/rethinking-rich-text-pipelines-with-draft-js/).\n\n## Using the filters\n\nFirst, grab the package from npm:\n\n```sh\nnpm install --save draftjs-filters\n```\n\nThen, in your editor import `filterEditorState` and call it in the Draft.js `onChange` handler. This function takes two parameters: the filtering configuration, and the `editorState`.\n\n```js\nimport { filterEditorState } from "draftjs-filters"\n\nfunction onChange(nextState) {\n  const { editorState } = this.state\n  let filteredState = nextState\n\n  const shouldFilterPaste =\n    nextState.getCurrentContent() !== editorState.getCurrentContent() &&\n    nextState.getLastChangeType() === "insert-fragment"\n\n  if (shouldFilterPaste) {\n    filteredState = filterEditorState(\n      {\n        blocks: ["header-two", "header-three", "unordered-list-item"],\n        styles: ["BOLD"],\n        entities: [\n          {\n            type: "IMAGE",\n            attributes: ["src"],\n            whitelist: {\n              src: "^http",\n            },\n          },\n          {\n            type: "LINK",\n            attributes: ["url"],\n          },\n        ],\n        maxNesting: 1,\n        whitespacedCharacters: ["\\n", "\\t", "\xf0\x9f\x93\xb7"],\n      },\n      filteredState,\n    )\n  }\n\n  this.setState({ editorState: filteredState })\n}\n```\n\nHere are the available options:\n\n```jsx\n// Whitelist of allowed block types. unstyled and atomic are always included.\nblocks: $ReadOnlyArray<string>,\n// Whitelist of allowed inline styles.\nstyles: $ReadOnlyArray<string>,\n// Whitelist of allowed entities.\nentities: $ReadOnlyArray<{\n  // Entity type, eg. "LINK"\n  type: string,\n  // Allowed attributes. Other attributes will be removed. If this is omitted, all attributes are kept.\n  attributes?: $ReadOnlyArray<string>,\n  // Refine which entities are kept by whitelisting acceptable values with regular expression patterns.\n  // It\'s also possible to use "true" to signify that a field is required to be present,\n  // and "false" for fields required to be absent.\n  // If this is omitted, all entities are kept.\n  whitelist?: {\n    [attribute: string]: string | boolean,\n  },\n}>,\n// Maximum amount of depth for lists (0 = no nesting).\nmaxNesting: number,\n// Characters to replace with whitespace.\nwhitespacedCharacters: Array<string>,\n```\n\n### Types\n\nIf your project uses [Flow](https://flow.org/), type inference should just work. If you don\'t use Flow, it won\'t get in your way either.\n\n### Advanced usage\n\n`filterEditorState` isn\'t very flexible. If you want more control over the filtering, simply compose your own filter function with the other single-purpose utilities. The Draft.js filters are published as ES6 modules using [Rollup](https://rollupjs.org/) \xe2\x80\x93 module bundlers like Rollup and Webpack will tree shake (remove) the unused functions so you only bundle the code you use.\n\nIf using filters that remove blocks, be sure to use `applyContentWithSelection` to restore the selection where appropriate after filtering.\n\n#### API\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n##### preserveAtomicBlocks\n\nCreates atomic blocks where they would be required for a block-level entity\nto work correctly, when such an entity exists.\nNote: at the moment, this is only useful for IMAGE entities that Draft.js\ninjects on arbitrary blocks on paste.\n\n###### Parameters\n\n- `content` **ContentState**\n\n##### resetAtomicBlocks\n\nResets atomic blocks to have a single-space char and no styles.\nThis is how they are stored by Draft.js by default.\n\n###### Parameters\n\n- `content` **ContentState**\n\n##### removeInvalidAtomicBlocks\n\nRemoves atomic blocks for which the entity isn\'t whitelisted.\n\n###### Parameters\n\n- `whitelist` **\\$ReadOnlyArray&lt;{type: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)}>**\n- `content` **ContentState**\n\n##### removeInvalidDepthBlocks\n\nRemoves blocks that have a non-zero depth, and aren\'t list items.\nHappens with Apple Pages inserting `unstyled` items between list items.\n\n###### Parameters\n\n- `content` **ContentState**\n\n##### preserveBlockByText\n\nChanges block type and depth based on the block\'s text. \xe2\x80\x93 some word processors\nadd a specific prefix within the text, eg. "\xc2\xb7 Bulleted list" in Word 2010.\nAlso removes the matched text.\nThis is meant first and foremost for list items where the list bullet or numeral\nends up in the text. Other use cases may not be well covered.\n\n###### Parameters\n\n- `rules` **\\$ReadOnlyArray&lt;{test: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String), type: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String), depth: [number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)}>**\n- `content` **ContentState**\n\n##### limitBlockDepth\n\nResets the depth of all the content to at most max.\n\n###### Parameters\n\n- `max` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)**\n- `content` **ContentState**\n\n##### filterBlockTypes\n\nConverts all block types not present in the whitelist to unstyled.\nAlso sets depth to 0 (for potentially nested list items).\n\n###### Parameters\n\n- `whitelist` **\\$ReadOnlyArray&lt;[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)>**\n- `content` **ContentState**\n\n##### filterInlineStyles\n\nRemoves all styles not present in the whitelist.\n\n###### Parameters\n\n- `whitelist` **\\$ReadOnlyArray&lt;[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)>**\n- `content` **ContentState**\n\n##### cloneEntities\n\nClones entities in the entityMap, so each range points to its own entity instance.\nThis only clones entities as necessary \xe2\x80\x93 if an entity is only referenced\nin a single range, it won\'t be changed.\n\n###### Parameters\n\n- `content` **ContentState**\n\n##### filterEntityRanges\n\nFilters entity ranges (where entities are applied on text) based on the result of\nthe callback function. Returning true keeps the entity range, false removes it.\nDraft.js automatically removes entities if they are not applied on any text.\n\n###### Parameters\n\n- `filterFn` **function (content: ContentState, entityKey: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String), block: BlockNode): [boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)**\n- `content` **ContentState**\n\n##### shouldKeepEntityType\n\nKeeps all entity types (images, links, documents, embeds) that are enabled.\n\n###### Parameters\n\n- `whitelist` **\\$ReadOnlyArray&lt;{type: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)}>**\n- `type` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)**\n\n##### shouldRemoveImageEntity\n\nRemoves invalid images \xe2\x80\x93 they should only be in atomic blocks.\nThis only removes the image entity, not the camera emoji (\xf0\x9f\x93\xb7) that Draft.js inserts.\n\n###### Parameters\n\n- `entityType` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)**\n- `blockType` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)**\n\n##### shouldKeepEntityByAttribute\n\nFilters entities based on the data they contain.\n\n###### Parameters\n\n- `entityTypes` **\\$ReadOnlyArray&lt;{type: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String), whitelist: {}?}>**\n- `entityType` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)**\n- `data` **{}**\n\n##### filterEntityData\n\nFilters data on an entity to only retain what is whitelisted.\nThis is crucial for IMAGE and LINK, where Draft.js adds a lot\nof unneeded attributes (width, height, etc).\n\n###### Parameters\n\n- `entityTypes` **$ReadOnlyArray&lt;{type: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String), attributes: $ReadOnlyArray&lt;[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)>?}>**\n- `content` **ContentState**\n\n##### replaceTextBySpaces\n\nReplaces the given characters by their equivalent length of spaces, in all blocks.\n\n###### Parameters\n\n- `characters` **\\$ReadOnlyArray&lt;[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)>**\n- `content` **ContentState**\n\n##### applyContentWithSelection\n\nApplies the new content to the editor state, optionally moving the selection\nto be on a valid block, inserting one if needed.\nSee <https://github.com/thibaudcolas/draftjs-filters/issues/27>.\n\n###### Parameters\n\n- `editorState` **EditorState**\n- `content` **ContentState**\n- `nextContent` **ContentState**\n\n##### filterEditorState\n\nApplies whitelist and blacklist operations to the editor content,\nto enforce it\'s shaped according to the options.\nWill not alter the editor state if there are no changes to make.\n\n###### Parameters\n\n- `options` **FilterOptions**\n- `editorState` **EditorStateType**\n\n### Browser support and polyfills\n\nThe Draft.js filters follow the browser support targets of Draft.js. Be sure to have a look at the [required Draft.js polyfills](https://facebook.github.io/draft-js/docs/advanced-topics-issues-and-pitfalls).\n\n#### Word processor support\n\nHave a look at our test data in [`pasting/`](pasting).\n\n| Editor - Browser  | Chrome Windows | Chrome macOS | Firefox Windows | Firefox macOS | Edge Windows | IE11 Windows | Safari macOS | Safari iOS | Chrome Android |\n| ----------------- | -------------- | ------------ | --------------- | ------------- | ------------ | ------------ | ------------ | ---------- | -------------- |\n| **Word 2016**     |                |              |                 |               |              |              |              | N/A        | N/A            |\n| **Word 2010**     |                | N/A          |                 | N/A           |              |              | N/A          | N/A        | N/A            |\n| **Apple Pages**   | N/A            |              | N/A             |               | N/A          | N/A          |              |            | N/A            |\n| **Google Docs**   |                |              |                 |               |              |              |              |            |                |\n| **Word Online**   |                |              |                 |               |              | Unsupported  |              | ?          | ?              |\n| **Dropbox Paper** |                |              |                 |               |              | Unsupported  |              | ?          | ?              |\n| **Draft.js**      |                |              |                 |               |              |              |              |            |                |\n\nUse the [Draft.js Cut/Copy/Paste testing plan](https://github.com/facebook/draft-js/wiki/Manual-Testing#cutcopypaste). We target specific external sources, and have ready-made test documents available to test them:\n\n##### External sources\n\nHere are external sources we want to pay special attention to, and for which we have ready-made test documents with diverse rich content.\n\n- [Microsoft Word 2016](/pasting/documents/Draft.js%20paste%20test%20document%20Word2016%20macOS.docx)\n- [Microsoft Word 2010](/pasting/documents/Draft.js%20paste%20test%20document%20Word2010.docx)\n- [Google Docs](https://docs.google.com/document/d/1YjqkIMC3q4jAzy__-S4fb6mC_w9EssmA6aZbGYWFv80/edit)\n- [Dropbox Paper](https://paper.dropbox.com/doc/Draft.js-paste-test-document-njfdkwmkeGQ9KICjVwLmU)\n- [Apple Pages](/pasting/documents/Draft.js%20paste%20test%20document.pages)\n- [Microsoft Word Online](https://1drv.ms/w/s!AuGin45FpiF5hjzm9QdWHYGqPrqm)\n\n#### IE11\n\nThere are [known Draft.js issues](https://github.com/facebook/draft-js/issues/986) with pasting in IE11. For now, we advise users to turn on `stripPastedStyles` in IE11 only so that Draft.js removes all formatting but preserves whitespace:\n\n```jsx\nconst IS_IE11 = !window.ActiveXObject && "ActiveXObject" in window\n\nconst editor = <Editor stripPastedStyles={IS_IE11} />\n```\n\n## Contributing\n\nSee anything you like in here? Anything missing? We welcome all support, whether on bug reports, feature requests, code, design, reviews, tests, documentation, and more. Please have a look at our [contribution guidelines](docs/CONTRIBUTING.md).\n\n## Credits\n\nView the full list of [contributors](https://github.com/springload/draftail/graphs/contributors). [MIT](LICENSE) licensed. Website content available as [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\n\nMicrosoft Word toolbars screenshot from _PCWorld \xe2\x80\x93\xc2\xa0Microsoft Word Turns 25_ article.\n'