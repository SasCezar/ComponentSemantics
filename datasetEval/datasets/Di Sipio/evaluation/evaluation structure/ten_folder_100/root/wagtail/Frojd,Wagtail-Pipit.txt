b"[![CircleCI](https://circleci.com/gh/Frojd/Wagtail-Pipit.svg?style=svg)](https://circleci.com/gh/Frojd/Wagtail-Pipit)\n\n# Pipit\n\nPipit is a [Wagtail CMS](https://wagtail.io/) boilerplate which aims to provide an easy and modern developer workflow with a React-rendered frontend.\n\nThe benefit of using Pipit is that we can cherry-pick the best JavaScript tools and have a \nmodern frontend stack while still not making the trade-off normally would by running our application completely headless.\n\n## Features\n\n- Hot reloading\n- Server-Side Rendering\n- Page scaffolding\n- [12-Factor App](https://12factor.net/) compliant\n- Docker development environment\n- Deploy scripts via [Ansistrano](https://github.com/ansistrano)\n- Orchestration using [Ansible](https://github.com/ansible/ansible)\n- Local SSL for development\n- Error reporting with [Sentry](https://sentry.io/)\n- CI integration via [Circle CI](https://circleci.com/)\n- Data-sync between environments\n\n## Installation\n\n1. Make sure you have [cookiecutter](https://github.com/audreyr/cookiecutter/blob/master/docs/index.rst) installed. If not run `pip install cookiecutter` (or via brew)\n2. Run cookiecutter:\n```\ncookiecutter https://github.com/Frojd/Wagtail-Pipit.git\n```\n\n3. Fill in the questions and you are done!\n\n## Documentation \xe2\x80\x93 Where to go from here?\nWe recommend you to start by checking out the [Getting Started Guide](/docs/getting-started-guide.md). Otherwise, you can read up any of the following topics:\n- [Frontend Developer Guide](/docs/frontend-developer-guide.md)\n- [Backend Developer Guide](/docs/backend-developer-guide.md)\n- [Datasync between environments](/docs/data-sync.md)\n- [Scaffolding](/docs/scaffolding.md)\n- [Server-Side Rendering](/docs/server-side-rendering.md)\n- [Deploying with Ansistrano](/docs/deployment.md)\n- [Setting up continuous integration on CircleCI](/docs/ci.md)\n\n## Why not headless?\nThe current state of Django in combination with JavaScript frontend technologies is \nto either go for a headless solution where Django is only used as an admin and data-provider\nvia API, or a hybrid approach where the most parts of the site are classic Django in Django Template Language and complex frontend\ncomponents are built in React (or another frontend framework).\n\n\nThe cost of going for the headless approach is that you lose basically everything\nthat Django provides for HTTP-requests. Including session management, CSRF, \nsecurity middlewares, routing, previews, etc.\n\nThe problem we have encountered with the hybrid approach is that as your project grows,\nit gets really hard to keep track of where your views are declared. \nIs it in the JavaScript or in Django Template Language? Also, the way React is designed makes it really \nhard to share state between different React-instances and you have to rely on technologies such as Redux.\n\n## Contribute\n\nIf you have ideas for improvement, please share your thoughts through an issue. We also welcome PR's\n\n- Issue Tracker: [https://github.com/Frojd/Wagtail-Pipit/issues](https://github.com/Frojd/Wagtail-Pipit/issues)\n- Source Code: [https://github.com/Frojd/Wagtail-Pipit](https://github.com/Frojd/Wagtail-Pipit)\n\n## Support\n\nIf you have any issues, please submit an issue and we will do our best to help you out.\n"