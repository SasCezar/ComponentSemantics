b'[![Build Status](https://travis-ci.org/fourdigits/wagtail_textract.svg?branch=master)](https://travis-ci.org/fourdigits/wagtail_textract)\n[![Coverage Report](http://codecov.io/github/fourdigits/wagtail_textract/coverage.svg?branch=master)](http://codecov.io/github/fourdigits/wagtail_textract?branch=master)\n\n# Text extraction for Wagtail document search\n\nThis package is for replacing [Wagtail][1]\'s Document class with one\nthat allows searching in Document file contents using [textract][2].\n\nTextract can extract text from (among [others][6]) PDF, Excel and Word files.\n\nThe package was inspired by the ["Search: Extract text from documents" issue][3] in Wagtail.\n\nDocuments will work as before, except that Document search in Wagtail\'s admin interface\nwill also find search terms in the files\' contents.\n\nSome screenshots to illustrate.\n\nIn our fresh Wagtail site with `wagtail_textract` installed,\nwe uploaded a [file called `test_document.pdf`](./src/wagtail_textract/tests/testfiles/test_document.pdf) with handwritten text in it.\nIt is listed in the admin interface under Documents:\n\n![Document List](/docs/screenshot_document_list_test_document.png)\n\nIf we now search in Documents for the word `correct`, which is one of the handwritten words,\nthe live search finds it:\n\n![Document Search finds PDF by searching for "staple"](/docs/screenshot_document_search_correct.png)\n\nThe assumption is that this search should not only be available in Wagtail\'s admin interface,\nbut also in a public-facing search view, for which we provide a code example.\n\n\n## Requirements\n\n- Wagtail 2 (see [tox.ini](./tox.ini))\n- The [Textract dependencies][8]\n\n\n## Maturity\n\nWe have been using this package in production since August 2018 on https://nuffic.nl.\n\n\n## Installation\n\n- Install the [Textract dependencies][8]\n- Add `wagtail_textract` to your requirements and/or `pip install wagtail_textract`\n- Add to your Django `INSTALLED_APPS`.\n- Put `WAGTAILDOCS_DOCUMENT_MODEL = "wagtail_textract.document"` in your Django settings.\n\nNote: You\'ll get an incompatibility warning during installation of wagtail_textract (Wagtail 2.0.1 installed):\n\n```\nrequests 2.18.4 has requirement chardet<3.1.0,>=3.0.2, but you\'ll have chardet 2.3.0 which is incompatible.\ntextract 1.6.1 has requirement beautifulsoup4==4.5.3, but you\'ll have beautifulsoup4 4.6.0 which is incompatible.\n```\n\nWe haven\'t seen this leading to problems, but it\'s something to keep in mind.\n\n\n### Tesseract\n\nIn order to make `textract` use [Tesseract][4], which happens if regular\n`textract` finds no text, you need to add the data files that Tesseract can\nbase its word matching on.\n\nCreate a `tessdata` directory in your project directory, and download the\n[languages][5] you want.\n\n\n## Transcribing\n\nTranscription is done automatically after Document save,\nin an [`asyncio`][7] executor to prevent blocking the response during processing.\n\nTo transcribe all existing Documents, run the management command::\n\n    ./manage.py transcribe_documents\n\nThis may take a long time, obviously.\n\n\n## Usage in custom view\n\nHere is a code example for a search view (outside Wagtail\'s admin interface)\nthat shows both Page and Document results.\n\n```python\nfrom itertools import chain\n\nfrom wagtail.core.models import Page\nfrom wagtail.documents.models import get_document_model\n\n\ndef search(request):\n    # Search\n    search_query = request.GET.get(\'query\', None)\n    if search_query:\n        page_results = Page.objects.live().search(search_query)\n        document_results = Document.objects.search(search_query)\n        search_results = list(chain(page_results, document_results))\n\n        # Log the query so Wagtail can suggest promoted results\n        Query.get(search_query).add_hit()\n    else:\n        search_results = Page.objects.none()\n\n    # Render template\n    return render(request, \'website/search_results.html\', {\n        \'search_query\': search_query,\n        \'search_results\': search_results,\n    })\n```\n\nYour template should allow for handling Documents differently than Pages,\nbecause you can\'t do `pageurl result` on a Document:\n\n```jinja2\n{% if result.file %}\n   <a href="{{ result.url }}">{{ result }}</a>\n{% else %}\n   <a href="{% pageurl result %}">{{ result }}</a>\n{% endif %}\n```\n\n\n## What if you already use a custom Document model?\n\nIn order to use wagtail_textract, your `CustomizedDocument` model should do\nthe same as [wagtail_textract\'s Document](./src/wagtail_textract/models.py):\n\n- subclass `TranscriptionMixin`\n- alter `search_fields`\n\n```python\nfrom wagtail_textract.models import TranscriptionMixin\n\n\nclass CustomizedDocument(TranscriptionMixin, ...):\n    """Extra fields and methods for Document model."""\n    search_fields = ... + [\n        index.SearchField(\n            \'transcription\',\n            partial_match=False,\n        ),\n    ]\n```\n\nNote that the first class to subclass should be `TranscriptionMixin`,\nso its `save()` takes precedence over that of the other parent classes.\n\n\n## Tests\n\nTo run tests, checkout this repository and:\n\n    make test\n\n\n### Coverage\n\nA coverage report will be generated in `./coverage_html_report/`.\n\n\n## Contributors\n\n- Karl Hobley\n- Bertrand Bordage\n- Kees Hink\n- Tom Hendrikx\n- Coen van der Kamp\n- Mike Overkamp\n- Thibaud Colas\n- Dan Braghis\n- Dan Swain\n\n\n[1]: https://wagtail.io/\n[2]: https://github.com/deanmalmgren/textract\n[3]: https://github.com/wagtail/wagtail/issues/542\n[4]: https://github.com/tesseract-ocr\n[5]: https://github.com/tesseract-ocr/tessdata\n[6]: http://textract.readthedocs.io/en/stable/#currently-supporting\n[7]: https://docs.python.org/3/library/asyncio.html\n[8]: http://textract.readthedocs.io/en/latest/installation.html\n'