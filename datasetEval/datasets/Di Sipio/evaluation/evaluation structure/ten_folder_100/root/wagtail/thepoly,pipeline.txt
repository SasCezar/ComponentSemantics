b"# Pipeline\n\nPipeline is [_The Rensselaer Polytechnic_](https://poly.rpi.edu)'s next\nwebsite. It will enable rapid development of new article layouts and\ninteractive features. In the long term, it will provide a solid platform for\nour content over the coming decade and support _The Poly_'s focus on\nonline-first journalism.\n\n## Requirements\n\nEnsure these are installed before continuing.\n\n- [Python 3.7](https://www.python.org) or Python 3.6\n- [Pipenv](https://docs.pipenv.org)\n- [npm](https://www.npmjs.com/get-npm)\n- [Postgres](https://www.postgresql.org)\n\nYou can change Pipeline's settings to use SQLite instead of Postgres, but this is not recommended because Pipeline relies on Postgres's full-text search features.\n\n## Getting started\n\nPipeline is written in Python. It uses Sass and PostCSS on the frontend with webpack to glue them together.\n\n#### Note about Postgres\n\nPipeline expects to be able to connect to a Postgres database named `pipeline`. To set this up on macOS:\n\n```\nbrew install postgresql\nbrew services start postgresql\ncreatedb pipeline\n```\n\n### Installing\n\n```\ngit clone git@github.com:thepoly/pipeline.git\ncd pipeline\nnpm install\nnpx wp --config webpack.development.config.js\npipenv install --dev\npipenv run python manage.py createcachetable\n```\n\n### Running\n\n```\npipenv shell\npython manage.py migrate\npython manage.py createsuperuser\npython manage.py runserver\n```\n\nIf you have issues with the database, ensure that Postgres is running and you have created a database named `pipeline`.\n\n#### Docker\n\nPipeline can also be run in its production configuration with Docker. It requires three containers: one for running the Django project with gunicorn, another to put nginx in front of it and additionally serve static files, and finally a Postgres container.\n\n```docker-compose up```\n\nEnsure that the `SECRET_KEY` environment variable is set. Additionally, run the following inside of the `django` container (e.g. `docker-compose exec django bash`):\n\n```\npython manage.py migrate\npython manage.py createsuperuser\n```\n\nPipeline will be available at port 8000 on localhost.\n\n### Standards\n\nMake sure you format your code with [Black](https://github.com/python/black) and use [Flake8](http://flake8.pycqa.org/en/latest/) to find problems.\n\n### How to make changes to styling\n\nWith your terminal/command prompt running ```python manage.py runserver```, open another at the project folder location and run ```npm run watch```.\nNow you can edit styles at pipeline/pipeline/static/css/pipeline.scss\n\n## Status\n\nMany of the following features are partially complete, but this isn't indicated. Look at the Issues page if you need to know what is being worked on.\n\n- [ ] Articles\n  - [x] Index pages\n  - [ ] Article pages\n    - [x] Basic layout\n    - [ ] Section-specific layouts\n    - [x] Editor previews\n  - [x] Summaries\n  - [x] Kickers\n    - [x] Autocomplete\n  - [x] Subdecks\n  - [ ] Archive pages\n  - [ ] WordPress importer\n  - [ ] Old site importer\n  - [x] Related to authors\n- [ ] Photos\n  - [x] Uploads\n  - [x] Captions\n  - [x] Bylines\n  - [x] Multiple per article\n  - [x] Galleries\n- [ ] Syndication\n  - [x] RSS feed\n  - [x] Sitemap\n  - [x] Facebook tags\n  - [x] Twitter tags\n  - [ ] oEmbed\n  - [ ] Apple News\n- [ ] Home page\n  - [x] Basic article prioritization\n  - [ ] Full user control of column layout\n- [ ] Staff\n  - [x] Index page\n  - [ ] Individual pages\n    - [x] Authored articles\n    - [ ] Bylined photos\n  - [x] Positions/terms\n  - [x] Staff photos\n- [ ] Contact\n  - [x] Email addresses on staff pages\n- [ ] Users\n  - [x] Basic publish permission level\n  - [x] Fine grained permissions\n  - [ ] G Suite authentication\n- [ ] Search\n  - [x] Basic headline search\n  - [x] Search all fields of articles\n  - [ ] Search non-article pages\n- [ ] Instrumentation\n  - [x] Basic Prometheus metrics\n  - [ ] DB metrics\n  - [ ] HTTP Basic auth\n"