b'# [Draft.js conductor](https://thibaudcolas.github.io/draftjs-conductor/) [<img src="https://raw.githubusercontent.com/thibaudcolas/draftail.org/master/.github/draftail-logo.svg?sanitize=true" width="90" height="90" align="right">](https://www.draftail.org/)\n\n[![npm](https://img.shields.io/npm/v/draftjs-conductor.svg)](https://www.npmjs.com/package/draftjs-conductor) [![Build Status](https://travis-ci.org/thibaudcolas/draftjs-conductor.svg?branch=master)](https://travis-ci.org/thibaudcolas/draftjs-conductor) [![Coverage Status](https://coveralls.io/repos/github/thibaudcolas/draftjs-conductor/badge.svg)](https://coveralls.io/github/thibaudcolas/draftjs-conductor)\n\n> \xf0\x9f\x93\x9d\xe2\x9c\xa8 Little [Draft.js](https://facebook.github.io/draft-js/) helpers to make rich text editors _just work_. Built for [Draftail](https://www.draftail.org/).\n\n[![Photoshop\xe2\x80\x99s Magic Wand selection tool applied on a WYSIWYG editor interface](https://thibaudcolas.github.io/draftjs-conductor/wysiwyg-magic-wand.png)](https://thibaudcolas.github.io/draftjs-conductor)\n\nCheck out the [online demo](https://thibaudcolas.github.io/draftjs-conductor)!\n\n## Features\n\n- [Infinite list nesting](#infinite-list-nesting)\n- [Idempotent copy-paste between editors](#idempotent-copy-paste-between-editors)\n- [Editor state data conversion helpers](#editor-state-data-conversion-helpers)\n\n---\n\n### Infinite list nesting\n\nBy default, Draft.js only provides support for [5 list levels](https://github.com/facebook/draft-js/blob/232791a4e92d94a52c869f853f9869367bdabdac/src/component/contents/DraftEditorContents-core.react.js#L58-L62) for bulleted and numbered lists. While this is often more than enough, some editors need to go further.\n\nInstead of manually writing and maintaining the list nesting styles, use this little helper:\n\n```js\nimport { ListNestingStyles, blockDepthStyleFn } from "draftjs-conductor";\n\n<Editor blockStyleFn={blockDepthStyleFn} />\n<ListNestingStyles max={6} />\n```\n\n`ListNestingStyles` will generate the necessary CSS for your editor\xe2\x80\x99s lists. `blockDepthStyleFn` will then apply classes to blocks based on their depth, so the styles take effect. Voil\xc3\xa0!\n\nWith React v16.6 and up, you can also leverage [`React.memo`](https://reactjs.org/docs/react-api.html#reactmemo) to speed up re-renders:\n\n```js\nconst NestingStyles = React.memo(ListNestingStyles);\n\n<NestingStyles max={6} />;\n```\n\nShould you need more flexibility, import `generateListNestingStyles` which will allow you to further specify how the styles are generated.\n\nRelevant Draft.js issues:\n\n- [maxDepth param is greater than 4 in RichUtils.onTab \xe2\x80\x93\xc2\xa0facebook/draft-js#997](https://github.com/facebook/draft-js/issues/997)\n- Still problematic: [Nested list styles above 4 levels are not retained when copy-pasting between Draft instances. \xe2\x80\x93 facebook/draft-js#1605 (comment)](https://github.com/facebook/draft-js/pull/1605#pullrequestreview-87340460)\n\n---\n\n### Idempotent copy-paste between editors\n\nThe default Draft.js copy-paste handlers lose a lot of the formatting when copy-pasting between Draft.js editors. While this might be ok for some use cases, sites with multiple editors on the same page need them to reliably support copy-paste.\n\nRelevant Draft.js issues:\n\n- [Ability to retain pasted custom entities - facebook/draft-js#380](https://github.com/facebook/draft-js/issues/380)\n- [Copy/paste between editors \xe2\x80\x93 facebook/draft-js#787](https://github.com/facebook/draft-js/issues/787)\n- [Extra newlines added to text pasted between two Draft editors \xe2\x80\x93 facebook/draft-js#1389](https://github.com/facebook/draft-js/issues/1389)\n- [Copy/paste between editors strips soft returns \xe2\x80\x93 facebook/draft-js#1154](https://github.com/facebook/draft-js/issues/1154)\n- [Sequential unstyled blocks are merged into the same block on paste \xe2\x80\x93\xc2\xa0facebook/draft-js#738](https://github.com/facebook/draft-js/issues/738)\n- [Nested list styles are not retained when copy-pasting between Draft instances. \xe2\x80\x93 facebook/draft-js#1163](https://github.com/facebook/draft-js/issues/1163)\n- [Nested list styles above 4 levels are not retained when copy-pasting between Draft instances. \xe2\x80\x93 facebook/draft-js#1605 (comment)](https://github.com/facebook/draft-js/pull/1605#pullrequestreview-87340460)\n- [Merged `<p>` tags on paste \xe2\x80\x93 facebook/draft-js#523 (comment)](https://github.com/facebook/draft-js/issues/523#issuecomment-371098488)\n\nAll of those problems can be fixed with this library, which overrides the `copy` event to transfer more of the editor\xe2\x80\x99s content, and introduces a function to use with the Draft.js [`handlePastedText`](https://draftjs.org/docs/api-reference-editor#handlepastedtext) to retrieve the pasted content.\n\n**This will paste all copied content, even if the target editor might not support it.** To ensure only supported content is retained, use filters like [draftjs-filters](https://github.com/thibaudcolas/draftjs-filters).\n\nHere\xe2\x80\x99s how to use the copy override, and the paste handler:\n\n```js\nimport {\n  registerCopySource,\n  handleDraftEditorPastedText,\n} from "draftjs-conductor";\n\nclass MyEditor extends Component {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      editorState: EditorState.createEmpty(),\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.handlePastedText = this.handlePastedText.bind(this);\n  }\n\n  componentDidMount() {\n    this.copySource = registerCopySource(this.editorRef);\n  }\n\n  onChange(nextState: EditorState) {\n    this.setState({ editorState: nextState });\n  }\n\n  handlePastedText(text: string, html: ?string, editorState: EditorState) {\n    let newState = handleDraftEditorPastedText(html, editorState);\n\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n\n    return false;\n  }\n\n  componentWillUnmount() {\n    if (this.copySource) {\n      this.copySource.unregister();\n    }\n  }\n\n  render() {\n    const { editorState } = this.state;\n\n    return (\n      <Editor\n        ref={(ref) => {\n          this.editorRef = ref;\n        }}\n        editorState={editorState}\n        onChange={this.onChange}\n        handlePastedText={this.handlePastedText}\n      />\n    );\n  }\n}\n```\n\n`registerCopySource` will ensure the clipboard contains a full representation of the Draft.js content state on copy, while `handleDraftEditorPastedText` retrieves Draft.js content state from the clipboard. Voil\xc3\xa0! This also changes the HTML clipboard content to be more semantic, with less styles copied to other word processors/editors.\n\nNote: IE11 isn\xe2\x80\x99t supported, as it doesn\'t support storing HTML in the clipboard, and we also use the [`Element.closest`](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest) API.\n\n### Editor state data conversion helpers\n\nDraft.js has its own data conversion helpers, [`convertFromRaw`](https://draftjs.org/docs/api-reference-data-conversion#convertfromraw) and [`convertToRaw`](https://draftjs.org/docs/api-reference-data-conversion#converttoraw), which work really well, but aren\xe2\x80\x99t providing that good of an API when initialising or persisting the content of an editor.\n\nWe provide two helper methods to simplify the initialisation and serialisation of content. **`createEditorStateFromRaw`** combines [`EditorState.createWithContent`](https://draftjs.org/docs/api-reference-editor-state#createwithcontent), [`EditorState.createEmpty`](https://draftjs.org/docs/api-reference-editor-state#createempty) and [`convertFromRaw`](https://draftjs.org/docs/api-reference-data-conversion#convertfromraw) as a single method:\n\n```js\nimport { createEditorStateFromRaw } from "draftjs-conductor";\n\n// Initialise with `null` if there\xe2\x80\x99s no preexisting state.\nconst editorState = createEditorStateFromRaw(null);\n// Initialise with the raw content state otherwise\nconst editorState = createEditorStateFromRaw({ entityMap: {}, blocks: [] });\n// Optionally use a decorator, like with Draft.js APIs.\nconst editorState = createEditorStateFromRaw(null, decorator);\n```\n\nTo save content, **`serialiseEditorStateToRaw`** combines [`convertToRaw`](https://draftjs.org/docs/api-reference-data-conversion#converttoraw) with checks for empty content \xe2\x80\x93 so empty content is saved as `null`, rather than a single text block with empty text as would be the case otherwise.\n\n```js\nimport { serialiseEditorStateToRaw } from "draftjs-conductor";\n\n// Content will be `null` if there\xe2\x80\x99s no textual content, or RawDraftContentState otherwise.\nconst content = serialiseEditorStateToRaw(editorState);\n```\n\n## Contributing\n\nSee anything you like in here? Anything missing? We welcome all support, whether on bug reports, feature requests, code, design, reviews, tests, documentation, and more. Please have a look at our [contribution guidelines](docs/CONTRIBUTING.md).\n\n## Credits\n\nView the full list of [contributors](https://github.com/thibaudcolas/draftjs-conductor/graphs/contributors). [MIT](LICENSE) licensed. Website content available as [CC0](https://creativecommons.org/publicdomain/zero/1.0/). Image credit: [FirefoxEmoji](https://github.com/mozilla/fxemoji).\n'