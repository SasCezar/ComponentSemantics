b'A generic, reusable column block for Wagtail\'s StreamField.\n\nAllows developers to create column layouts with a number of different layout\nratios that are supported in the admin in a visually appealing way.\n\n![Admin interface showing column blocks in a streamfield](/docs/admin.png?raw=true)\n\nA basic frontend template is included, but no frontend CSS. Due to the\nvariations of responsive layouts and frontend layout frameworks,\nfrontend templates should be overridden by the developer.\n\nInstallation\n------------\n\nOnce you have set up Wagtail, you should just need to do the following:\n\n1. pip install wagtailcolumnblocks\n2. Edit INSTALLED\\_APPS in your settings.py to include \'wagtailcolumnblocks\'.\n\nUsage Example\n-------------\n\nAssuming you have set up Wagtail according to [these instructions](https://wagtail.io/developers/) (and those above), you can see wagtailcolumnblocks in action as follows.\n\nEdit home/models.py to look like this. HomePage is from the original templated code, and we\'ve added SidebarPage and the \\*Blocks classes:\n\n```python\nfrom django.db import models\n\nfrom wagtail.core.models import Page\nfrom wagtail.core import blocks\nfrom wagtail.core import fields\nfrom wagtail.embeds.blocks import EmbedBlock\nfrom wagtail.images.blocks import ImageChooserBlock\nfrom wagtail.admin.edit_handlers import FieldPanel, StreamFieldPanel\n\nfrom wagtailcolumnblocks.blocks import ColumnsBlock\n\n\nclass MyContentBlocks(blocks.StreamBlock):\n    """\n    The blocks you want to allow within each MyColumnBlocks column.\n    """\n\n    image = ImageChooserBlock()\n    text = blocks.CharBlock()\n\n\nclass MyColumnBlocks(blocks.StreamBlock):\n    """\n    All the root level blocks you can use\n    """\n    column_2_1 = ColumnsBlock(\n        # Blocks you want to allow within each column\n        MyContentBlocks(),\n        # Two columns in admin, first twice as wide as the second\n        ratios=(2, 1),\n        # Used for grouping related fields in the streamfield field picker\n        group="Columns",\n        # 12 column frontend grid (this is the default, so can be omitted)\n        grid_width=12,\n        # Override the frontend template\n        template=\'home/blocks/two_column_block.html\',\n    )\n\n\nclass SidebarPage(Page):\n    content = fields.StreamField(MyColumnBlocks)\n\n    content_panels = [\n        FieldPanel(\'title\'),\n        StreamFieldPanel(\'content\')\n    ]\n\nclass HomePage(Page):\n    pass\n```\n\nEdit `home/templates/home/sidebar_page.html` to look like this:\n```html\n{% extends "base.html" %}\n{% load static %}\n{% load wagtailcore_tags %}\n\n{% block content %}\n<div class="row">\n    {{page.content}}\n</div>\n{% endblock content %}\n```\n\nEdit `home/templates/home/blocks/two_column_block.html` to look like this:\n```html\n{% load wagtailcore_tags %}\n\n<div class="row">\n    {% for column, width in columns %}\n        <div class="col-xs-12 col-md-6">\n            Column width = {{ width }}\n            {% include_block column %}\n        </div>\n    {% endfor %}\n</div>\n```\n\nRun `python manage.py makemigrations && python manage.py migrate` to add our SidebarPage migration and execute it.\n\nIn the Wagtail admin you should now be able to create a Sidebar page which shows up in a two column layout. When you view or preview the page you should see the templated content.\n\nLicense\n-------\n\nLicensed under the BSD 3-clause "New" or "Revised" License.\n\n(c) 2019, Squareweave. All rights reserved.\n'