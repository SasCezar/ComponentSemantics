b'# [Wagtail Headless Preview](https://pypi.org/project/wagtail-headless-preview/) [![PyPI](https://img.shields.io/pypi/v/wagtail-headless-preview.svg)](https://pypi.org/project/wagtail-headless-preview/) [![black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n## Overview\n\nWith Wagtail as the backend, and a separate app for the front-end (for example a single page React app), editors are no longer able to preview their changes. This is because the front-end is no longer within Wagtail\'s direct control. The preview data therefore needs to be exposed to the front-end app.\n\nThis package enables previews for Wagtail pages when used in a headless setup by routing the preview to the specified front-end URL.\n\n## Setup\n\nInstall using pip:\n```sh\npip install wagtail-headless-preview\n```\n\nAfter installing the module, add `wagtail_headless_preview` to installed apps in your settings file:\n\n```python\n# settings.py\n\nINSTALLED_APPS = [\n    ...\n    \'wagtail_headless_preview\',\n]\n```\n\nRun migrations:\n\n```sh\n$ ./manage.py migrate\n```\n\nthen configure the preview client URL using the `HEADLESS_PREVIEW_CLIENT_URLS` setting.\n\nFor single site, the configuration should look like:\n\n```python\nHEADLESS_PREVIEW_CLIENT_URLS = {\n    \'default\': \'http://localhost:8020/\',\n}\n```\n\nFor a multi-site setup, add each site as a separate entry:\n\n```python\nHEADLESS_PREVIEW_CLIENT_URLS = {\n    \'default\': \'http://localhost:8020/\',\n    \'site1.example.com\': \'http://localhost:8020/\',\n    \'site2.example.com\': \'http://localhost:8021/\',\n}\n```\n\nOptionally, you can enable live preview functionality with the `HEADLESS_PREVIEW_LIVE` setting:\n\n```python\n# settings.py\nHEADLESS_PREVIEW_LIVE = True\n```\n\nNote: Your front-end app must be set up for live preview, a feature that usually requires [Django Channels](https://github.com/django/channels/) or other WebSocket/async libraries. \n\n## Usage\n\nAdd `HeadlessPreviewMixin` to your page class:\n\n```python\nfrom wagtail_headless_preview.models import HeadlessPreviewMixin\n\nclass MyWonderfulPage(HeadlessPreviewMixin, Page):\n    pass\n```\n\n## How will my front-end app display preview content?\n\nThis depends on your project, as it will be dictated by the requirements of your front-end app.\n\nThe following example uses a Wagtail API endpoint to access previews - \nyour app may opt to access page previews using [GraphQL](https://wagtail.io/blog/getting-started-with-wagtail-and-graphql/) instead.\n\n### Example\n\nThis example sets up an API endpoint which will return the preview for a page, and then displays that data on a simplified demo front-end app.\n\n* Add `wagtail.api.v2` to the installed apps:\n```python\n# settings.py\n\nINSTALLED_APPS = [\n    ...\n    \'wagtail.api.v2\',\n]\n```\n\n* create an `api.py` file in your project directory:\n```python\nfrom django.contrib.contenttypes.models import ContentType\n\nfrom wagtail.api.v2.endpoints import PagesAPIEndpoint\nfrom wagtail.api.v2.router import WagtailAPIRouter\n\nfrom wagtail_headless_preview.models import PagePreview\nfrom rest_framework.response import Response\n\n\n# Create the router. "wagtailapi" is the URL namespace\napi_router = WagtailAPIRouter(\'wagtailapi\')\n\n\nclass PagePreviewAPIEndpoint(PagesAPIEndpoint):\n    known_query_parameters = PagesAPIEndpoint.known_query_parameters.union([\'content_type\', \'token\'])\n\n    def listing_view(self, request):\n        page = self.get_object()\n        serializer = self.get_serializer(page)\n        return Response(serializer.data)\n\n    def detail_view(self, request, pk):\n        page = self.get_object()\n        serializer = self.get_serializer(page)\n        return Response(serializer.data)\n\n    def get_object(self):\n        app_label, model = self.request.GET[\'content_type\'].split(\'.\')\n        content_type = ContentType.objects.get(app_label=app_label, model=model)\n\n        page_preview = PagePreview.objects.get(content_type=content_type, token=self.request.GET[\'token\'])\n        page = page_preview.as_page()\n        if not page.pk:\n            # fake primary key to stop API URL routing from complaining\n            page.pk = 0\n\n        return page\n\n\napi_router.register_endpoint(\'page_preview\', PagePreviewAPIEndpoint)\n```\n\n* Register the API URLs so Django can route requests into the API:\n\n```python\n# urls.py\n\nfrom .api import api_router\n\nurlpatterns = [\n    ...\n    path(\'api/v2/\', api_router.urls),\n    ...\n    # Ensure that the api_router line appears above the default Wagtail page serving route\n    path(\'\', include(wagtail_urls)),\n]\n```\n\nFor further information about configuring the wagtail API, refer to the [Wagtail API v2 Configuration Guide](https://docs.wagtail.io/en/stable/advanced_topics/api/v2/configuration.html)\n\n* Next, add a `client/index.html` file in your project root. This will query the API to display our preview:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <script>\n        function go() {\n            var querystring = window.location.search.replace(/^\\?/, \'\');\n            var params = {};\n            querystring.replace(/([^=&]+)=([^&]*)/g, function(m, key, value) {\n                params[decodeURIComponent(key)] = decodeURIComponent(value);\n            });\n\n            var apiUrl = \'http://localhost:8000/api/v2/page_preview/1/?content_type=\' + encodeURIComponent(params[\'content_type\']) + \'&token=\' + encodeURIComponent(params[\'token\']) + \'&format=json\';\n            fetch(apiUrl).then(function(response) {\n                response.text().then(function(text) {\n                    document.body.innerText = text;\n                });\n            });\n        }\n    </script>\n</head>\n<body onload="go()"></body>\n</html>\n```\n\n\n* Install django-cors-headers: `pip install django-cors-headers`\n* Add CORS config to your settings file to allow the front-end to access the API\n\n```python\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_URLS_REGEX = r\'^/api/v2/\'\n ```\n \nand follow the rest of the [setup instructions for django-cors-headers](https://github.com/ottoyiu/django-cors-headers#setup).\n\n* Start up your site as normal: `./manage.py runserver 0:8000`\n* Serve the front-end `client/index.html` at `http://localhost:8020/`\n   - this can be done by running `python3 -m http.server 8020` from inside the client directory\n* From the wagtail admin interface, edit (or create) and preview a page that uses `HeadlessPreviewMixin`\n\nThe preview page should now show you the API response for the preview! \xf0\x9f\x8e\x89\n\nThis is where a real front-end would take over and display the preview as it would be seen on the live site.\n\n## Credits\n\n- Matthew Westcott ([@gasman](https://github.com/gasman)), initial proof of concept\n- Karl Hobley ([@kaedroho](https://github.com/kaedroho)), improvements\n'