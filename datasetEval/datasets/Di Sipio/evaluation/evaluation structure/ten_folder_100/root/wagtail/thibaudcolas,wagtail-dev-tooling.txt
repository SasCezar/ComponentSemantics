b'# \xf0\x9f\x9a\xa7 Latest tooling work: https://github.com/thibaudcolas/wagtail-tooling\n\n----\n\n# wagtail-dev-tooling\n\n> Advanced tooling for [Wagtail](https://github.com/wagtail/wagtail) development. See [example reports](https://thibaudcolas.github.io/wagtail-dev-tooling/).\n\n*Check out [Awesome Wagtail](https://github.com/springload/awesome-wagtail) for more awesome packages and resources from the Wagtail community.*\n\n## Installation\n\n```sh\n# Get the code from the repository.\ngit clone git@github.com:thibaudcolas/wagtail-dev-tooling.git\ncd wagtail-dev-tooling\n# Install dependencies.\nnvm install\nnpm install\n# Configure environment variables.\n# touch .env\n# Configure Wagtail user session ID to use.\n# Get this value by logging into the Wagtail admin of your site, then\n# use the developer tools to insect the cookies, to find "sessionid".\n# echo "WAGTAIL_SESSIONID=yoursessionid" >> .env\n```\n\n## UI regression tests\n\n```sh\n# 1. Create UI regression reference.\nnpm run regression:reference\n# 2. Run UI regression tests.\nnpm run regression:test\n# 3. Open UI regression report.\nnpm run regression:open\n```\n\n## Web performance audits\n\n```sh\n# 1. Start the containers with graphite and grafana.\ndocker-compose up -d\n# 2. Run the performance tests.\nnpm run performance:test\n# 3. Open UI performance report.\nnpm run performance:open\n# 4. Tear down the containers when you\'ve had enough.\ndocker-compose stop\n```\n\n## Git hooks\n\nPre-commit hook to add within Wagtail at `.git/hooks/pre-commit`:\n\n```sh\n#!/usr/bin/env bash\n\ncommand_exists () {\n    type "$1" &> /dev/null ;\n}\n\n# Fail on first line that fails.\nset -e\n\n# Check if this is the initial commit\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n    against=HEAD\nelse\n    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904\nfi\n\n# Use git diff-index to check for whitespace errors\nif ! git diff-index --check --cached $against\nthen\n    echo "Aborting commit due to whitespace errors."\n    exit 1\nfi\n\nSTAGED=$(git --no-pager diff --name-only --cached --diff-filter=ACM)\nJS_STAGED=$(grep .js$ <<< "$STAGED" || true)\nSCSS_STAGED=$(grep .scss$ <<< "$STAGED" || true)\nPY_STAGED=$(grep .py$ <<< "$STAGED" || true)\n\nif [ -n "$JS_STAGED" ];\nthen\n    ./node_modules/.bin/eslint $JS_STAGED\nfi\n\nif [ -n "$SCSS_STAGED" ];\nthen\n    ./node_modules/.bin/stylelint $SCSS_STAGED\nfi\n\nif [ -n "$PY_STAGED" ];\nthen\n    if command_exists flake8;\n    then\n        flake8 $PY_STAGED\n    else\n        printf "\\`flake8\\` is missing. The following Python files couldn\'t be linted:\\n$PY_STAGED\\n\\nMake sure to install the correct Python version as defined in \\`.python-version\\` and the linting dependencies \\`pip install -r requirements/lint.txt\\`."\n        exit 1\n    fi\nfi\n\nif [ -n "$JS_STAGED" ];\nthen\n    npm run test:unit:coverage --silent\nfi\n```\n\n## Examples\n\n### BackstopJS UI regression report\n\n![BackstopJS UI regression report](examples/backstop-regression-report.png)\n\n### Grafana dashboard displaying web performance metrics\n\n![Grafana dashboard displaying web performance metrics](examples/grafana-performance-dashboard.png)\n\n### Sitespeed performance budget output\n\n![Sitespeed performance budget output](examples/sitespeed-performance-budget.png)\n\n### Sitespeed performance metrics\n\n![Sitespeed performance metrics](examples/sitespeed-performance-report.png)\n\n### Sitespeed page load waterfall chart\n\n![Sitespeed page load waterfall chart](examples/sitespeed-waterfall-chart.png)\n\n## Documentation\n\n- https://github.com/garris/BackstopJS\n- http://docs.casperjs.org/en/latest/\n- http://phantomjs.org/api/webpage/\n- https://docs.slimerjs.org/current/api/webpage.html\n- https://www.sitespeed.io/\n- http://docs.grafana.org/\n- https://docs.docker.com/\n'