b"# wagtail-netlify\n\n[![PyPI version](https://badge.fury.io/py/wagtailnetlify.svg)](https://badge.fury.io/py/wagtailnetlify)\n\nDeploy your Wagtail site on Netlify. Features include:\n\n - automatic deployment when pages are published\n - a new `netlify` management command\n - conversion of Wagtail redirects to Netlify's format\n\n![Screencast demo](https://tom.s3.amazonaws.com/wagtail-netlify.gif)\n\n## Installation\n\n1. Install and configure [Wagtail Bakery](https://github.com/moorinteractive/wagtail-bakery), if you haven't already.\n2. Install [Netlify CLI v2.x](https://www.netlify.com/docs/cli/#installation), if you haven't already.\n3. Install Wagtail-Netlify via pip (with `pip install wagtailnetlify`).\n\n## Configuration\n\n1. Add `wagtailnetlify` to your `INSTALLED_APPS`.\n2. Run the migrations: `./manage.py migrate wagtailnetlify`.\n3. Add `NETLIFY_PATH` to your settings.\n\nCheck the [Settings](#settings) section below for more customisation options.\n\n## Usage\n\nIf `NETLIFY_AUTO_DEPLOY` is set to `True`, Wagtail will automatically deploy your site every time a page is published.\n\n*or*\n\nTo deploy changes manually, use `./manage.py netlify`.\n\n## Settings\n\n### `NETLIFY_PATH`\n\nThe path to the Netlify CLI. *Hint: type `which netlify` to check the location.*\n\n### `NETLIFY_SITE_ID`\n\n**Default: `None`**\n\nIf set, deploy to that specific Netlify site.\n\nIf not set, the Netlify CLI might prompt you to select one.\n\n### `NETLIFY_API_TOKEN`\n\n**Default: `None`**\n\nIf set, the Netlify CLI will not prompt you to click the authentication link in the console. It can be useful when deployed to a remote server where you don't see the console output.\n\nConnect to your Netlify account to [generate a token](https://app.netlify.com/account/applications) and then set the settings. *Warning: You should never check credentials in your version control system. Use [environment variables](https://django-environ.readthedocs.io/en/latest/) or [local settings file](http://techstream.org/Bits/Local-Settings-in-django) instead.*\n\n### `NETLIFY_AUTO_DEPLOY`\n\n**Default: `True`**\n\nWhether to automatically deploy your site to Netlify every time you publish a page. This make take between a few seconds and a few minutes, depending on the size of your site, and the number of pages which are affected by your change.\n\n### `NETLIFY_DEPLOY_FUNCTION`\n\n**Default: `wagtailnetlify.models.deploy`**\n\nThe function to be called when a deploy is triggered (excluding when triggered manually with the `./manage.py netlify` command). It can be useful if you want to use your own task runner (like Celery) instead of the built-in threading model.\n\nThe function needs to be a valid [Django signal receiver](https://docs.djangoproject.com/en/2.1/topics/signals/#receiver-functions).\n\n### Optional admin view\n\nNetlify can send a webhook after a successful deployment. This app provides an endpoint for that webhook and an admin view of completed deployments. To enable this view:\n\n1. Add `wagtail.contrib.modeladmin` to your `INSTALLED_APPS`\n1. Update your project's `urls.py`:\n\n```python\n# in your imports\nfrom wagtailnetlify import views as netlify_views\n\n# in urlpatterns, before including wagtail_urls\nurl(r'^netlify/', netlify_views.success_hook, name='netlify'),\n```\n\n3. In Netlify's admin interface for your app, add http://yourdomain/netlify/success as a URL to notify for the outgoing webhook on *Deploy succeeded* events (in Settings / Build & deploy / Deploy notifications).\n\nThe view will be available under `Settings / Deployments` in your site's admin.\n\n## Development\n\n### Releases\n\n1. Ensure you have the latest versions of `pip`, `setuptools` and `twine` installed in your virtual environment.\n1. Ensure your `master` branch is up to date.\n1. Create a new branch (e.g. `release/v1.1.3`) for the release of the new version.\n1. Update the version number in `wagtailnetlify/__init__.py` following [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n1. Update `CHANGELOG.md`.\n1. (Optional) If you need to verify anything, use `make publish-test` to upload to https://test.pypi.org and enter your PyPi *test* credentials as needed.\n1. On GitHub, create a pull request and squash merge it.\n1. Checkout and pull the `master` branch locally.\n1. Use `make publish` and enter your PyPi credentials as needed.\n1. On GitHub, create a release and a tag for the new version.\n"