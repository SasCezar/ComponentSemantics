b'![](./docs/_media/icon.svg)\n\n\n# Getting Started\n\n[![Chat on slack](https://img.shields.io/badge/slack-rematchjs-blue.svg?logo=slack&style=flat)](https://rematchjs.slack.com)[![Build Status](https://travis-ci.org/rematch/rematch.svg?branch=master)](https://travis-ci.org/rematch/rematch)[![Coverage Status](https://coveralls.io/repos/github/rematch/rematch/badge.svg?branch=master)](https://coveralls.io/github/rematch/rematch?branch=master)[![Npm version](https://img.shields.io/npm/v/@rematch/core?color=bright-green&style=flat)](https://badge.fury.io/js/%40rematch%2Fcore)[![Bundle size](https://img.shields.io/badge/bundlesize-~5kb-brightgreen.svg?style=flat)](https://img.shields.io/badge/bundlesize-~5kb-brightgreen.svg?style=flat)[![File size](https://img.shields.io/badge/dependencies-redux-brightgreen.svg?style=flat)](https://img.shields.io/badge/dependencies-redux-brightgreen.svg?style=flat)\n\n## Rematch\n\n### Rethink Redux.\n\nRematch is Redux best practices without the boilerplate. No more action types, action creators, switch statements or thunks.\n\n- [Why we created Rematch](https://hackernoon.com/redesigning-redux-b2baee8b8a38)\n- [Video: Introducing Rematch](https://www.youtube.com/watch?v=3ezSBYoL5do)\n- [A comparison of Redux & Rematch](https://rematch.github.io/rematch/#/purpose.md)\n\n### Index\n\n- [Getting Started](https://rematch.github.io/rematch/#/README?id=getting-started-1)\n- [Purpose](https://rematch.github.io/rematch/#/purpose.md)\n- [Examples](https://rematch.github.io/rematch/#/examples)\n- [Migration Guide](https://rematch.github.io/rematch/#/migration-guide)\n- API Reference\n  - [Core API](https://rematch.github.io/rematch/#/api-reference/api.md)\n  - [Init Redux API](https://rematch.github.io/rematch/#/api-reference/reduxapi.md)\n  - [Plugins API](https://rematch.github.io/rematch/#/api-reference/pluginsapi.md)\n- Recipes\n  - [Devtools](https://rematch.github.io/rematch/#/recipes/devtools.md)\n  - [React](https://rematch.github.io/rematch/#/recipes/react.md)\n  - [Vue](https://rematch.github.io/rematch/#/recipes/vue.md)\n  - [Testing](https://rematch.github.io/rematch/#/recipes/testing.md)\n  - [TypeScript](https://rematch.github.io/rematch/#/recipes/typescript.md)\n  - [Immer](https://rematch.github.io/rematch/#/recipes/immer.md)\n  - [Decoupling reducers](https://rematch.github.io/rematch/#/recipes/decouplingreducers.md)\n- Plugins\n  - [Selectors](https://rematch.github.io/rematch/#/plugins/select.md)\n  - [Loading](https://rematch.github.io/rematch/#/plugins/loading.md)\n  - [Persist](https://rematch.github.io/rematch/#/plugins/persist.md)\n  - [Updated](https://rematch.github.io/rematch/#/plugins/updated.md)\n  - [React Navigation](https://rematch.github.io/rematch/#/plugins/react-navigation.md)\n  - [Immer](https://rematch.github.io/rematch/#/plugins/immer.md)\n- [Inspiration](https://rematch.github.io/rematch/#/inspiration.md)\n\n**Translations**\n\n- [\xe4\xb8\xad\xe6\x96\x87\xe6\x89\x8b\xe5\x86\x8c](https://rematch.github.io/rematch/#/lang/zh-cn/)\n\n### Getting Started\n\n```bash\nnpm install @rematch/core\n```\nor\n```bash\nyarn add @rematch/core\n```\n\n\n#### Step 1: Init\n\n**init** configures your reducers, devtools & store.\n\n**index.js**\n\n```javascript\nimport { init } from \'@rematch/core\'\nimport * as models from \'./models\'\n\nconst store = init({\n\tmodels,\n})\n\nexport default store\n```\n\n_For a more advanced setup, see_ [_plugins_](https://github.com/rematch/rematch/tree/e4fe17537a947bbe8a9faf1e0e77099beb7fef91/docs/plugins.md) _and_ [_Redux config options_](api-reference/reduxapi.md)_._\n\n#### Step 2: Models\n\nThe **model** brings together state, reducers, async actions & action creators in one place.\n\n**models.js**\n\n```javascript\nexport const count = {\n\tstate: 0, // initial state\n\treducers: {\n\t\t// handle state changes with pure functions\n\t\tincrement(state, payload) {\n\t\t\treturn state + payload\n\t\t},\n\t},\n\teffects: dispatch => ({\n\t\t// handle state changes with impure functions.\n\t\t// use async/await for async actions\n\t\tasync incrementAsync(payload, rootState) {\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 1000))\n\t\t\tdispatch.count.increment(payload)\n\t\t},\n\t}),\n}\n```\n\n_See the_ [_reducers docs_](https://github.com/rematch/rematch/blob/master/docs/api.md#reducers) _to learn more, including how to trigger actions from other models._\n\nUnderstanding models is as simple as answering a few questions:\n\n1. What is my initial state? **state**\n2. How do I change the state? **reducers**\n3. How do I handle async actions? **effects** with async/await\n\n#### Step 3: Dispatch\n\n**dispatch** is how we trigger reducers & effects in your models. Dispatch standardizes your actions without the need for writing action types or action creators.\n\n```javascript\nimport { init } from \'@rematch/core\'\nimport * as models from \'./models\'\n\nconst store = init({\n\tmodels,\n})\n\nexport const { dispatch } = store\n// state = { count: 0 }\n// reducers\ndispatch({ type: \'count/increment\', payload: 1 }) // state = { count: 1 }\ndispatch.count.increment(1) // state = { count: 2 }\n\n// effects\ndispatch({ type: \'count/incrementAsync\', payload: 1 }) // state = { count: 3 } after delay\ndispatch.count.incrementAsync(1) // state = { count: 4 } after delay\n```\n\nDispatch can be called directly, or with the `dispatch[model][action](payload)` shorthand.\n\n#### Step 4: View\n\nRematch can be used with native redux integrations such as "react-redux". See an example below.\n\n```jsx\nimport React from \'react\'\nimport ReactDOM from \'react-dom\'\nimport { Provider, connect } from \'react-redux\'\nimport store from \'./store\'\n\nconst Count = props => (\n\t<div>\n\t\tThe count is {props.count}\n\t\t<button onClick={props.increment}>increment</button>\n\t\t<button onClick={props.incrementAsync}>incrementAsync</button>\n\t</div>\n)\n\nconst mapState = state => ({\n\tcount: state.count,\n})\n\nconst mapDispatch = ({ count: { increment, incrementAsync } }) => ({\n\tincrement: () => increment(1),\n\tincrementAsync: () => incrementAsync(1),\n})\n\nconst CountContainer = connect(\n\tmapState,\n\tmapDispatch\n)(Count)\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<CountContainer />\n\t</Provider>,\n\tdocument.getElementById(\'root\')\n)\n```\n\n### Examples\n\n- Count: [JS](https://codepen.io/Sh_McK/pen/BJMmXx?editors=1010) \\| [React](https://codesandbox.io/s/3kpyz2nnz6) \\| [Vue](https://codesandbox.io/s/n3373olqo0) \\| [Angular](https://stackblitz.com/edit/rematch-angular-5-count)\n- Todos: [React](https://codesandbox.io/s/92mk9n6vww)\n\n### Migrating From Redux\n\nMoving from Redux to Rematch involves very few steps.\n\n1. Setup Rematch `init` with Redux [step 1](https://codesandbox.io/s/yw2wy1q929)\n2. Mix reducers & models [step 2](https://codesandbox.io/s/9yk6rjok1r)\n3. Shift to models [step 3](https://codesandbox.io/s/mym2x8m7v9)\n\n### Migration from 0.x to 1.x\n\nFor an earlier version, see [v0.x docs](https://github.com/rematch/rematch/tree/v0). Currently only displaying v1.x documentation.\n\nBreaking changes with v1.0.0. Global imports of `dispatch` and `getState` have been removed. Instead, you can export and import your store, capturing `store.dispatch`, `store.getState`. See the [Changelog](https://github.com/rematch/rematch/blob/master/CHANGELOG.md) for details.\n\n### API\n\nSee the [@rematch/core API](https://rematch.github.io/rematch/#/api-reference/api.md)\n\n### Changelog\n\nSee the [CHANGELOG](https://github.com/rematch/rematch/blob/master/CHANGELOG.md) to see what\'s new.\n\nLike this project? \xe2\x98\x85 us on GitHub :\\)\n'