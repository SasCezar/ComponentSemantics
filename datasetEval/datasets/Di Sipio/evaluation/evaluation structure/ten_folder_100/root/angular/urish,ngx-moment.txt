b"# ngx-moment\n\nmoment.js pipes for Angular\n\n[![Build Status](https://travis-ci.org/urish/ngx-moment.png?branch=master)](https://travis-ci.org/urish/ngx-moment)\n[![npm version](https://img.shields.io/npm/v/ngx-moment.svg)](https://www.npmjs.com/package/ngx-moment)\n\nThis module works with Angular 5.0 and newer.\n\nFor an Angular 2 / 4 version, please install [angular2-moment](https://npmjs.org/package/angular2-moment). For the AngularJS, please check out [angular-moment](https://github.com/urish/angular-moment).\n\nInstallation\n------------\n\n```bash\nnpm install --save moment ngx-moment\n```\n\nor if you use yarn:\n\n```bash\nyarn add moment ngx-moment\n```\n\n### For System.js users:\n\nDon't forget to update your systemjs.config.js:\n\n```\npackages: {\n            app: {\n                main: './main.js',\n                defaultExtension: 'js'\n            },\n            'moment': {\n                main: './moment.js',\n                defaultExtension: 'js'\n            },\n            'ngx-moment': {\n                main: './index.js',\n                defaultExtension: 'js'\n            }\n        }\n```\n\nUsage\n-----\n\nImport `MomentModule` into your app's modules:\n\n``` typescript\nimport { MomentModule } from 'ngx-moment';\n\n@NgModule({\n  imports: [\n    MomentModule\n  ]\n})\n```\n\nIf you would like to supply any `NgxMomentOptions` that will be made available to the pipes you can also use:\n\n```typescript\nimport { MomentModule } from 'ngx-moment';\n\n@NgModule({\n  imports: [\n    MomentModule.forRoot({\n      relativeTimeThresholdOptions: {\n        'm': 59\n      }\n    })\n  ]\n})\n```\n\nThis makes all the `ngx-moment` pipes available for use in your app components.\n\nAvailable pipes\n---------------\n\n## amTimeAgo pipe\nTakes an optional `omitSuffix` argument that defaults to `false` and another optional `formatFn` function which can be used to customise the format of the time ago text.\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{myDate | amTimeAgo}}\n  `\n})\n```\n\nPrints `Last updated: a few seconds ago`\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{myDate | amTimeAgo:true}}\n  `\n})\n```\n\nPrints `Last updated: a few seconds`\n\n## amCalendar pipe\nTakes optional `referenceTime` argument (defaults to now)\nand `formats` argument that could be output formats object or callback function.\nSee [momentjs docs](http://momentjs.com/docs/#/displaying/calendar-time/) for details.\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{myDate | amCalendar}}\n  `\n})\n```\n\nPrints `Last updated: Today at 14:00` (default referenceTime is today by default)\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: <time>{{myDate | amCalendar:nextDay }}</time>\n  `\n})\nexport class AppComponent {\n  nextDay: Date;\n\n  constructor() {\n      this.nextDay = new Date();\n      nextDay.setDate(nextDay.getDate() + 1);\n  }\n}\n```\n\nPrints `Last updated: Yesterday at 14:00` (referenceTime is tomorrow)\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: <time>{{myDate | amCalendar:{sameDay:'[Same Day at] h:mm A'} }}</time>\n  `\n})\n```\n\nPrints `Last updated: Same Day at 2:00 PM`\n\n## amDateFormat pipe\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{myDate | amDateFormat:'LL'}}\n  `\n})\n```\n\nPrints `Last updated: January 24, 2016`\n\n## amParse pipe\n\nParses a custom-formatted date into a moment object that can be used with the other pipes.\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{'24/01/2014' | amParse:'DD/MM/YYYY' | amDateFormat:'LL'}}\n  `\n})\n```\n\nPrints `Last updated: January 24, 2016`\n\nThe pipe can also accept an array of formats as parameter.\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{'24/01/2014 22:00' | amParse: formats | amDateFormat:'LL'}}\n  `\n})\nexport class App {\n\n  formats: string[] = ['DD/MM/YYYY HH:mm:ss', 'DD/MM/YYYY HH:mm'];\n\n  constructor() { }\n\n}\n```\n\nPrints `Last updated: January 24, 2016`\n\n## amLocal pipe\n\nConverts UTC time to local time.\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{mydate | amLocal | amDateFormat: 'YYYY-MM-DD HH:mm'}}\n  `\n})\n```\n\nPrints `Last updated 2016-01-24 12:34`\n\n## amLocale pipe\n\nTo be used with amDateFormat pipe in order to change locale.\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{'2016-01-24 14:23:45' | amLocale:'en' | amDateFormat:'MMMM Do YYYY, h:mm:ss a'}}\n  `\n})\n```\n\nPrints `Last updated: January 24th 2016, 2:23:45 pm`\n\nNote: The locale might have to be imported (e.g. in the app module).\n\n``` typescript\nimport 'moment/locale/de';\n```\n\n## amFromUnix pipe\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{ (1456263980 | amFromUnix) | amDateFormat:'hh:mmA'}}\n  `\n})\n```\n\nPrints `Last updated: 01:46PM`\n\n## amDuration pipe\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Uptime: {{ 365 | amDuration:'seconds' }}\n  `\n})\n```\n\nPrints `Uptime: 6 minutes`\n\n## amDifference pipe\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Expiration: {{nextDay | amDifference: today :'days' : true}} days\n  `\n})\n```\nPrints `Expiration: 1 day`\n\n## amAdd and amSubtract pipes\n\nUse these pipes to perform date arithmetics. See [momentjs docs](http://momentjs.com/docs/#/manipulating/add/) for details.\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Expiration: {{'2017-03-17T16:55:00.000+01:00' | amAdd: 2 : 'hours' | amDateFormat: 'YYYY-MM-DD HH:mm'}}\n  `\n})\n```\nPrints `Expiration: 2017-03-17 18:55`\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{'2017-03-17T16:55:00.000+01:00' | amSubtract: 5 : 'years' | amDateFormat: 'YYYY-MM-DD HH:mm'}}\n  `\n})\n```\nPrints `Last updated: 2012-03-17 16:55`\n\n## amFromUtc pipe\n\nParses the date as UTC and enables mode for subsequent moment operations (such as displaying the time in UTC). This can be combined with `amLocal` to display a UTC date in local time.\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{ '2016-12-31T23:00:00.000-01:00' | amFromUtc | amDateFormat: 'YYYY-MM-DD' }}\n  `\n})\n```\n\nPrints `Last updated: 2017-01-01`\n\nIt's also possible to specify a different format than the standard ISO8601.\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{ '31/12/2016 23:00-01:00' | amFromUtc: 'DD/MM/YYYY HH:mmZZ' | amDateFormat: 'YYYY-MM-DD' }}\n  `\n})\n```\n\nOr even an array of formats:\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{ '31/12/2016 23:00-01:00' | amFromUtc: formats | amDateFormat: 'YYYY-MM-DD' }}\n  `\n})\nexport class App {\n  \n  formats: string[] = ['DD/MM/YYYY HH:mm:ss', 'DD/MM/YYYY HH:mmZZ'];\n\n  constructor() { }\n\n}\n```\n\nBoth examples above will print `Last updated: 2017-01-01`\n\n## amUtc pipe\n\nEnables UTC mode for subsequent moment operations (such as displaying the time in UTC).\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{ '2016-12-31T23:00:00.000-01:00' | amUtc | amDateFormat: 'YYYY-MM-DD' }}\n  `\n})\n```\n\nPrints `Last updated: 2017-01-01`\n\n## amParseZone pipe\n\nParses a string but keeps the resulting Moment object in a fixed-offset timezone with the provided offset in the string.\n\n``` typescript\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: {{ '2016-12-31T23:00:00.000-03:00' | amParseZone | amDateFormat: 'LLLL (Z)' }}\n  `\n})\n```\n\nPrints `Last updated: Saturday, December 31, 2016 11:00 PM (-03:00)`\n\n## amIsBefore and amIsAfter pipe\n\nCheck if a moment is before another moment. Supports limiting granularity to a unit other than milliseconds, pass the units as second parameter\n\n```typescript\n@Component({\n  selector: 'app',\n  template: `\n    Today is before tomorrow: {{ today | amIsBefore:tomorrow:'day' }}\n  `\n})\n```\n\nPrints `Today is before tomorrow: true`\n\n```typescript\n@Component({\n  selector: 'app',\n  template: `\n    Tomorrow is after today: {{ tomorrow | amIsAfter:today:'day' }}\n  `\n})\n```\n\nPrints `Tomorrow is after today: true`\n\nNgxMomentOptions\n----------------\nAn `NgxMomentOptions` object can be provided to the module using the `forRoot` convention and will provide options for the pipes to use with the `moment` instance, these options are detailed in the table below:\n\n| prop | type | description |\n| --- |:---:| --- |\n| relativeTimeThresholdOptions | Dictionary<br>key: string<br>value: number | Provides the `relativeTimeThreshold` units allowing a pipe to set the `moment.relativeTimeThreshold` values. <br><br>The `key` is a unit defined as one of `ss`, `s`, `m`, `h`, `d`, `M`.<br><br>See [Relative Time Thresholds](https://momentjs.com/docs/#/customization/relative-time-threshold/) documentation for more details. |\n\nComplete Example\n----------------\n\n``` typescript\nimport { NgModule, Component } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { MomentModule } from 'ngx-moment';\n\n@Component({\n  selector: 'app',\n  template: `\n    Last updated: <b>{{myDate | amTimeAgo}}</b>, <b>{{myDate | amCalendar}}</b>, <b>{{myDate | amDateFormat:'LL'}}</b>\n  `\n})\nexport class AppComponent {\n  myDate: Date;\n\n  constructor() {\n    this.myDate = new Date();\n  }\n}\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    MomentModule\n  ],\n  declarations: [ AppComponent ]\n  bootstrap: [ AppComponent ]\n})\nclass AppModule {}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```\n\nDemo\n----\n\n[See online demo on Plunker](http://plnkr.co/edit/ziBJ0mftSjnz0SrYPwbo?p=preview)\n"