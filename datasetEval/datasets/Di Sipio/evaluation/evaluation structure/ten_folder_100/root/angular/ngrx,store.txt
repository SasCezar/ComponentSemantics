b'---\n# This repository is for version 2.x of @ngrx/store.\n# [Click here for the latest version (4.x)](https://github.com/ngrx/platform)\n---\n\n## @ngrx/store\nRxJS powered state management for Angular applications, inspired by Redux\n\n[![Join the chat at https://gitter.im/ngrx/store](https://badges.gitter.im/ngrx/store.svg)](https://gitter.im/ngrx/store?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![CircleCI Status for ngrx/store](https://circleci.com/gh/ngrx/store.svg?style=shield&circle-token=aea1fc73de3419cd926fc95e627e036113646fd8\n)](https://circleci.com/gh/ngrx/store)\n[![npm version](https://badge.fury.io/js/%40ngrx%2Fstore.svg)](https://www.npmjs.com/package/@ngrx/store)\n\n@ngrx/store is a controlled state container designed to help write performant, consistent applications\non top of Angular. Core tenets:\n- State is a single immutable data structure\n- Actions describe state changes\n- Pure functions called reducers take the previous state and the next action to compute the new state\n- State accessed with the `Store`, an observable of state and an observer of actions\n\nThese core principles enable building components that can use the `OnPush` change detection strategy\ngiving you [intelligent, performant change detection](http://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html#smarter-change-detection)\nthroughout your application.\n\n\n### Installation\nInstall @ngrx/core and @ngrx/store from npm:\n```bash\nnpm install @ngrx/core @ngrx/store@2.2.3 --save\n```\n\nOptional packages:\n- [@ngrx/store-devtools](https://github.com/ngrx/store-devtools) instruments your store letting you use a\n[powerful time-travelling debugger](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en).\n- [@ngrx/router-store](https://github.com/ngrx/router-store) keeps the state of @angular/router in your store\n- [@ngrx/effects](https://github.com/ngrx/effects) isolates side effects from your UI by expressing side effects as sources of actions\n\n\n### Examples\n- [Official @ngrx/example-app](https://github.com/ngrx/example-app) is an officially maintained example application showcasing best practices\nfor @ngrx projects, including @ngrx/store and @ngrx/effects\n- [angular-webpack2-starter](https://github.com/qdouble/angular-webpack2-starter) is a complete Webpack 2 starter with built-in support for @ngrx.\nIncludes Ahead-of-Time (AOT) compilation, hot module reloading (HMR), devtools, and server-side rendering.\n\n\n### Introduction\n- [Reactive Angular 2 with ngrx (video)](https://youtu.be/mhA7zZ23Odw)\n- [Comprehensive Introduction to @ngrx/store](https://gist.github.com/btroncone/a6e4347326749f938510)\n- [@ngrx/store in 10 minutes (video)](https://egghead.io/lessons/angular-2-ngrx-store-in-10-minutes)\n- [Build Redux Style Applications with Angular2, RxJS, and ngrx/store (video)](https://egghead.io/courses/building-a-time-machine-with-angular-2-and-rxjs)\n\n\n### Setup\nCreate a reducer function for each data type you have in your application. The combination of these reducers will\nmake up your application state:\n\n```ts\n// counter.ts\nimport { ActionReducer, Action } from \'@ngrx/store\';\n\nexport const INCREMENT = \'INCREMENT\';\nexport const DECREMENT = \'DECREMENT\';\nexport const RESET = \'RESET\';\n\nexport function counterReducer(state: number = 0, action: Action) {\n\tswitch (action.type) {\n\t\tcase INCREMENT:\n\t\t\treturn state + 1;\n\n\t\tcase DECREMENT:\n\t\t\treturn state - 1;\n\n\t\tcase RESET:\n\t\t\treturn 0;\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n```\n\nIn your app\'s main module, import those reducers and use the `StoreModule.provideStore(reducers)`\nfunction to provide them to Angular\'s injector:\n\n```ts\nimport { NgModule } from \'@angular/core\'\nimport { StoreModule } from \'@ngrx/store\';\nimport { counterReducer } from \'./counter\';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    StoreModule.provideStore({ counter: counterReducer })\n  ]\n})\nexport class AppModule {}\n```\n\n\nYou can then inject the `Store` service into your components and services. Use `store.select` to\n_select_ slice(s) of state:\n\n```ts\nimport { Store } from \'@ngrx/store\';\nimport { INCREMENT, DECREMENT, RESET } from \'./counter\';\n\ninterface AppState {\n  counter: number;\n}\n\n@Component({\n\tselector: \'my-app\',\n\ttemplate: `\n\t\t<button (click)="increment()">Increment</button>\n\t\t<div>Current Count: {{ counter | async }}</div>\n\t\t<button (click)="decrement()">Decrement</button>\n\n\t\t<button (click)="reset()">Reset Counter</button>\n\t`\n})\nclass MyAppComponent {\n\tcounter: Observable<number>;\n\n\tconstructor(private store: Store<AppState>){\n\t\tthis.counter = store.select(\'counter\');\n\t}\n\n\tincrement(){\n\t\tthis.store.dispatch({ type: INCREMENT });\n\t}\n\n\tdecrement(){\n\t\tthis.store.dispatch({ type: DECREMENT });\n\t}\n\n\treset(){\n\t\tthis.store.dispatch({ type: RESET });\n\t}\n}\n```\n\n\n## Contributing\nPlease read [contributing guidelines here](https://github.com/ngrx/store/blob/master/CONTRIBUTING.md).\n'