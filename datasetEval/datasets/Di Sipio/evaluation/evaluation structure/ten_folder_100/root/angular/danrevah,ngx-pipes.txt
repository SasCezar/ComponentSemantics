b'<p align="center">\n<img \n    src="assets/ngx-logo.png" width="160" border="0" alt="NGX-PIPES">\n<br/><br/>\n<a href="https://www.npmjs.com/package/ngx-pipes"><img src="https://img.shields.io/npm/v/ngx-pipes.svg?style=flat-square" alt="npm"></a>\n<a href="http://packagequality.com/#?package=ngx-pipes"><img src="https://npm.packagequality.com/shield/ngx-pipes.svg?style=flat-square" alt="Package Quality"></a>\n<a href="https://travis-ci.org/danrevah/ngx-pipes"><img src="https://img.shields.io/travis/danrevah/ngx-pipes.svg?style=flat-square" alt="Travis"></a>\n<a href="https://coveralls.io/github/danrevah/ngx-pipes?branch=master"><img src="https://img.shields.io/coveralls/danrevah/ngx-pipes.svg?style=flat-square" alt="Coveralls"></a>\n<a href="https://www.npmjs.com/package/ngx-pipes"><img src="https://img.shields.io/npm/dm/ngx-pipes.svg?style=flat-square" alt="npm"></a>\n<a href="https://github.com/danrevah/ngx-pipes/blob/master/LICENSE.md"><img src="https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square" alt="MIT licensed"></a>\n<br/><br/>\n Useful pipes for Angular with no external dependencies\n<br/><br/>\n</p>\n\n#### Extras\n\n<b><a href="https://github.com/danrevah/typeserializer" target="_blank">TypeSerializer</a> - Serializer / Deserializer, designed to make prettier code while using decorators.</b>\n\n<b><a href="https://github.com/danrevah/segal-decorators" target="_blank">Segal Decorators</a> - Bunch of highly useful decorators, helps in writing a more concise code while improving readability</b>\n\n## Table of contents\n\n - [Installation](#installation)\n - [Contributing](#contributing)\n - [Changelog](CHANGELOG.md)\n - [Date](#date)   \n    - [timeAgo](#timeago)\n - [String](#string)\n    - [aOrAn](#aoran)\n    - [repeat](#repeat)\n    - [scan](#scan)\n    - [shorten](#shorten)\n    - [stripTags](#striptags)\n    - [ucfirst](#ucfirst)\n    - [ucwords](#ucwords)\n    - [trim](#trim)\n    - [ltrim](#ltrim)\n    - [rtrim](#rtrim)\n    - [reverse](#reverse)\n    - [slugify](#slugify)\n    - [camelize](#camelize)\n    - [latinise](#latinise)\n    - [lines](#lines)\n    - [underscore](#underscore)\n    - [test](#test)\n    - [match](#match)\n    - [lpad](#lpad)\n    - [rpad](#rpad)\n    - [makePluralString](#makepluralstring)\n    - [wrap](#wrap)\n - [Array](#Array)   \n    - [diff](#diff)\n    - [flatten](#flatten)\n    - [initial](#initial)\n    - [intersection](#intersection)\n    - [range](#range)\n    - [reverse](#reverse)\n    - [tail](#tail)\n    - [truthify](#truthify)\n    - [union](#union)\n    - [unique](#unique)\n    - [without](#without)\n    - [pluck](#pluck)\n    - [shuffle](#shuffle)\n    - [every](#every)\n    - [some](#some)\n    - [sample](#sample)\n    - [groupBy](#groupby)\n    - [groupByImpure](#groupbyimpure)\n    - [filterBy](#filterby)\n    - [filterByImpure](#filterbyimpure)\n    - [orderBy](#orderby)\n    - [orderByImpure](#orderbyimpure)\n    - [chunk](#chunk)\n    - [fromPairs](#fromPairs)\n - [Object](#object)\n    - [keys](#keys)\n    - [values](#values)\n    - [pairs](#pairs)\n    - [pick](#pick)\n    - [omit](#omit)\n    - [invert](#invert)\n    - [invertBy](#invertby)\n    - [diffObj](#diffobj)\n - [Math](#math)   \n    - [min](#min)\n    - [max](#max)\n    - [sum](#sum)\n    - [average](#average)\n    - [percentage](#percentage)\n    - [ceil](#ceil)\n    - [floor](#floor)\n    - [round](#round)\n    - [sqrt](#sqrt)\n    - [pow](#pow)\n    - [degrees](#degrees)\n    - [radians](#radians)\n    - [bytes](#bytes)\n - [Boolean](#boolean)   \n    - [isNull](#isnull)\n    - [isDefined](#isdefined)\n    - [isUndefined](#isundefined)\n    - [isString](#isstring)\n    - [isFunction](#isfunction)\n    - [isNumber](#isnumber)\n    - [isArray](#isarray)\n    - [isObject](#isobject)\n    - [isGreaterThan](#isgreaterthan)\n    - [isGreaterEqualThan](#isgreaterequalthan)\n    - [isLessThan](#islessthan)\n    - [isLessEqualThan](#islessequalthan)\n    - [isEqualTo](#isequalto)\n    - [isNotEqualTo](#isnotequalto)\n    - [isIdenticalTo](#isidenticalto)\n    - [isNotIdenticalTo](#isnotidenticalto)\n \n\n## Installation\n\n1. Use npm to install the package\n\n  ```terminal\n  $ npm install ngx-pipes --save \n  ```\n\n2. You could either add into your module `imports` the `NgPipesModule` in order to add all of the pipes, Or add a specific module such as `NgArrayPipesModule`, `NgObjectPipesModule`, `NgStringPipesModule`, `NgMathPipesModule`, `NgDatePipesModule` or `NgBooleanPipesModule`.\n\n  ```typescript\n  import {NgPipesModule} from \'ngx-pipes\';\n  \n  @NgModule({\n   // ...\n   imports: [\n     // ...\n     NgPipesModule\n   ]\n  })\n  ```\n\n3. Pipes are also injectable and can be used in Components / Services / etc..\n\n  ```typescript  \n  import {ReversePipe} from \'ngx-pipes\';\n\n  @Component({\n    // ..\n    providers: [ReversePipe]\n  })\n  export class AppComponent {\n    constructor(private reversePipe: ReversePipe) {\n      this.reversePipe.transform(\'foo\'); // Returns: "oof"\n    }\n    // ..\n  }\n  ```\n\n4. You can also use pipes as part of your template for ex. \n\n```html\n<p>{{ \'foo\' | reverse }}</p> <!-- Output: "oof" -->\n```\n\nand it\'s also possible to stack multiple pipes\n\n```html\n<p>{{ \' foo\' | ltrim | reverse }}</p> <!-- Output: "oof" -->\n```\n\n\n## Date\n\n### timeAgo\n\nTime ago pipe converts date to \'just now\', \'X days ago\', \'last week\', \'X days ago\', etc..\n\n**Usage:** `string | timeAgo`\n```typescript\nimport * as moment from \'moment\';\n\nconst now = new Date();\n\n// timeAgo also supports moment.js objects\nconst lastWeek = moment().subtract(10, \'days\');\n```\n\n```html\n<span>Updated: {{now | timeAgo}}</span> <!-- Output: "just now" -->\n<span>Updated: {{lastWeek | timeAgo}}</span> <!-- Output: "last week" -->\n```\n\n## String\n\n### aOrAn\n\nPrefixes input string with "a" or "an".\n\n**Usage:** `string | aOrAn`\n\n```html\n<span>This is a picture of {{imageDescription | aOrAn}}</span>\n```\n\n### repeat\n\nRepeats a string n times\n\n**Usage:** `string | repeat: times: [separator|optional]`\n\n```html\n<p>{{ \'example\' | repeat: 3: \'@\' }}</p> <!-- Output: "example@example@example" -->\n```\n\n### scan\n\nScans string and replace `{i}` placeholders by equivalent member of the array\n\n**Usage:** `string | scan: [ARRAY]`\n\n```html\n<p>{{\'Hey {0}, {1}\' | scan: [\'foo\', \'bar\']}}</p> <!-- Output: "Hey foo, bar" -->\n```\n\n### shorten\n\nShortening a string by length and providing a custom string to denote an omission\n\n**Usage:** `string | shorten: length: [suffix|optional]: [wordBreak boolean|optional]`\n\n```html\n<p>{{\'Hey foo bar\' | shorten: 3: \'...\'}}</p> <!-- Output: "Hey..." -->\n```\n\n### stripTags\n\nStrips a HTML tags from string and providing which tags should not be removed\n\n**Usage:** `string | stripTags: [ARRAY]`\n\n```html\n<p>{{\'<a href="">foo</a> <p class="foo">bar</p>\' | stripTags }}</p> <!-- Output: "foo bar" -->\n<p>{{\'<a href="">foo</a> <p class="foo">bar</p>\' | stripTags: \'p\'}}</p> <!-- Output: foo <p class="foo">bar</p> -->\n```\n\n### ucfirst\n\nUppercase first letter of first word\n\n```html\n<p>{{\'foo bar\' | ucfirst }}</p> <!-- Output: "Foo bar" -->\n```\n\n### ucwords\n\nUppercase first letter every word\n\n```html\n<p>{{\'foo bar\' | ucwords }}</p> <!-- Output: "Foo Bar" -->\n<p>{{\'shaquille o\'neal\' | ucwords }}</p> <!-- Output: "Shaquille O\'Neal" -->\n```\n\n### trim\n\nStrips characters from the beginning and end of a string (default character is space).\n\n**Usage:** `string | trim: [characters|optional]`\n\n```html\n<p>{{\'  foo  \' | trim }}</p> <!-- Output: "foo" -->\n<p>{{\'foobarfoo\' | trim: \'foo\' }}</p> <!-- Output: "bar" -->\n```\n\n### ltrim\n\nStrips characters from the beginning of a string (default character is space).\n\n**Usage:** `string | ltrim: [characters|optional]`\n\n```html\n<p>{{\'  foo  \' | ltrim }}</p> <!-- Output: "foo  " -->\n<p>{{\'foobarfoo\' | ltrim: \'foo\' }}</p> <!-- Output: "barfoo" -->\n```\n\n### rtrim\n\nStrips characters from the end of a string (default character is space).\n\n**Usage:** `string | rtrim: [characters|optional]`\n\n```html\n<p>{{\'  foo  \' | rtrim }}</p> <!-- Output: "  foo" -->\n<p>{{\'foobarfoo\' | rtrim: \'foo\' }}</p> <!-- Output: "foobar" -->\n```\n\n### reverse\n\nReverses a string\n\n**Usage:** `string | reverse`\n\n```html\n<p>{{\'foo bar\' | reverse }}</p> <!-- Output: "rab oof" -->\n```\n\n### slugify\n\nSlugify a string (lower case and add dash between words).\n\n**Usage:** `string | slugify`\n\n```html\n<p>{{\'Foo Bar\' | slugify }}</p> <!-- Output: "foo-bar" -->\n<p>{{\'Some Text To Slugify\' | slugify }}</p> <!-- Output: "some-text-to-slugify" -->\n```\n\n### camelize\n\nCamelize a string replaces dashes and underscores and converts to camelCase string.\n\n**Usage:** `string | camelize`\n\n```html\n<p>{{\'foo_bar\' | camelize }}</p> <!-- Output: "fooBar" -->\n<p>{{\'some_dashed-with-underscore\' | camelize }}</p> <!-- Output: "someDashedWithUnderscore" -->\n<p>{{\'-dash_first-\' | camelize }}</p> <!-- Output: "dashFirst" -->\n```\n\n### latinise\n\nRemoves accents from Latin characters.\n\n**Usage:** `string | latinise`\n\n```html\n<p>{{\'F\xc3\xa9\xc3\xa9\' | latinise }}</p> <!-- Output: "Fee" -->\n<p>{{\'foo\' | latinise }}</p> <!-- Output: "foo" -->\n```\n\n### lines\n\nConverts a string with new lines into an array of each line.\n\n**Usage:** `string | lines`\n\n```html\n<p>{{\'Some\\nSentence with\\r\\nNew line\' | lines }}</p> <!-- Output: "[\'Some\', \'Sentence with\', \'New line\']" -->\n```\n\n### underscore\n\nConverts camelCase string to underscore.\n\n**Usage:** `string | underscore`\n\n```html\n<p>{{\'angularIsAwesome\' | underscore }}</p> <!-- Output: "angular_is_awesome" -->\n<p>{{\'FooBar\' | underscore }}</p> <!-- Output: "foo_bar" -->\n```\n\n### test\n\nTests if a string matches a pattern.\n\n**Usage:** `string | test: {RegExp}: {Flags}`\n\n```html\n<p>{{\'foo 42\' | test: \'[\\\\d]+$\': \'g\' }}</p> <!-- Output: true -->\n<p>{{\'42 foo\' | test: \'[\\\\d]+$\': \'g\' }}</p> <!-- Output: false -->\n<p>{{\'FOO\' | test: \'^foo\': \'i\' }}</p> <!-- Output: true -->\n```\n\n### match\n\nReturns array of matched elements in string.\n\n**Usage:** `string | match: {RegExp}: {Flags}`\n\n```html\n<p>{{\'foo 42\' | match: \'[\\\\d]+$\': \'g\' }}</p> <!-- Output: \'42\' -->\n<p>{{\'42 foo\' | match: \'[\\\\d]+$\': \'g\' }}</p> <!-- Output: null -->\n<p>{{\'FOO\' | match: \'^foo\': \'i\' }}</p> <!-- Output: \'FOO\' -->\n```\n\n### lpad\n\nLeft pad a string to a given length using a given pad character (default is a space)\n\n\n**Usage:** `string | lpad: length: [padCharacter:string|optional]`\n\n```html\n<p>{{\'foo\' | lpad: 5}}</p> <!-- Output: "  foo" -->\n<!-- Cast a number to string in order to left pad it with zeros -->\n<p>{{String(3) | lpad: 5: \'0\'}}</p> <!-- Output: "00003" -->\n```\n\n### rpad\n\nRight pad a string to a given length using a given pad character  (default is a space)\n\n\n**Usage:** `string | rpad: length: [padCharacter:string|optional]`\n\n```html\n<p>{{\'Foo\' | rpad: 5: \'#\'}}</p> <!-- Output: "Foo##" -->\n```\n\n### makePluralString\n\nMake a singular string plural. Optional `quantity` argument specifies how many of the singular string there are.\n\n**Usage:** `string | makePluralString: [quantity:string|optional]`\n\n```html\n<span>{{\'Painting\' | makePluralString}}</span> <!-- Output: "Paintings" -->\n<span>{{\'Painting\' | makePluralString: 1}}</span> <!-- Output: "Painting" -->\n<span>{{\'One Painting\' | makePluralString: 1}}</span> <!-- Output: "One Painting" -->\n<span>{{\'Painting\' | makePluralString: 4}}</span> <!-- Output: "Paintings" -->\n<span>{{\'Four Painting\' | makePluralString: 4}}</span> <!-- Output: "Four Paintings" -->\n``` \n\n\n### wrap\n\nWrap a string between a prefix and a suffix\n\n\n**Usage:** `string | wrap: prefix: suffix`\n\n```html\n<p>{{\'Foo\' | wrap: \'nice prefix \': \' and awesome suffix!\'}}</p> <!-- Output: "nice prefix Foo and awesome suffix!" -->\n```\n\n## Array\n\n### diff\n\nReturns array of diff between arrays \n\n**Usage:** `array | diff: [ARRAY]: [ARRAY]: ... : [ARRAY]`\n\n```typescript\nthis.items = [1, 2, 3, 4];\n```\n\n```html\n<li *ngFor="let item of items | diff: [1, 2]"> <!-- Array: [3, 4] -->\n```\n\n### flatten\n\nFlattens nested array, passing shallow will mean it will only be flattened a single level\n\n**Usage:** `array | flatten: [shallow|optional]`\n\n```typescript\nthis.items = [1,2,3,[4,5,6,[7,8,9],[10,11,12,13,[14],[15],[16, [17]]]]];\n```\n\n```html\n<li *ngFor="let item of items | flatten"> \n<!-- Array: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17] -->\n```\n\n### initial\n\nSlicing off the end of the array by n elements\n\n**Usage:** `array | initial: n`\n\n```typescript\nthis.items = [first, second, third];\n```\n\n```html\n<li *ngFor="let item of items | initial: 1"> <!-- Array: [first, second] -->\n```\n\n### tail\n\nSlicing off the start of the array by n elements\n\n**Usage:** `array | tail: n`\n\n```typescript\nthis.items = [first, second, third];\n```\n\n```html\n<li *ngFor="let item of items | tail: 1"> <!-- Array: [second, third] -->\n```\n\n### intersection\n\nReturns the intersections of an arrays\n\n**Usage:** `array | intersection: [ARRAY]: [ARRAY]: ... : [ARRAY]`\n\n```typescript\nthis.items = [1, 2, 3, 4, 5];\n```\n\n```html\n<li *ngFor="let item of items | intersection: [1, 2, 3]: [3, 6]"> <!-- Array: [3] -->\n```\n\n### range\n\nReturns an array with range of numbers\n\n**Usage:** `range: [start: number, default = \'1\']: [count: number]: [step: number | optional, default = \'1\']`\n\n```typescript\nthis.items = this.rangePipe.transform(1, 5); // Returns: [1, 2, 3, 4, 5]\n```\n\n```html\n<li *ngFor="let item of items"> <!-- Array: [1, 2, 3, 4, 5] -->\n```\n\n### reverse\n\nReverses an array\n\n**Usage:** `array | reverse`\n\n```typescript\nthis.items = [1, 2, 3];\n```\n\n```html\n<li *ngFor="let item of items | reverse"> <!-- Array: [3, 2, 1] -->\n```\n\n### truthify\n\nRemoves un-truthy values from array\n\n**Usage:** `array | truthify`\n\n```typescript\nthis.items = [null, 1, false, undefined, 2, 0, 3, NaN, 4, \'\'];\n```\n\n```html\n<li *ngFor="let item of items | truthify"> <!-- Array: [1, 2, 3, 4] -->\n```\n\n### union\n\nCombine two arrays\n\n**Usage:** `array | union: [ARRAY]`\n\n```typescript\nthis.items = [1, 2, 3];\n```\n\n```html\n<li *ngFor="let item of items | union: [[4]]"> <!-- Array: [1, 2, 3, 4] -->\n```\n\n### unique\n\nRemoves duplicates from array\n\n**Usage:** `array | unique: \'Property (Optional)\'`\n\n```typescript\nthis.items = [1, 2, 3, 1, 2, 3];\n```\n\n```html\n<li *ngFor="let item of items | unique"> <!-- Array: [1, 2, 3] -->\n```\n\n### without\n\nReturns array without specific elements\n\n**Usage:** `array | without: [ARRAY]`\n\n```typescript\nthis.items = [1, 2, 3, 1, 2, 3];\n```\n\n```html\n<li *ngFor="let item of items | without: [1,3]"> <!-- Array: [2, 2] -->\n```\n\n### pluck\n\nReturns array of properties values\n\n**Usage:** `array | pluck: propertyName`\n\n```typescript\nthis.items = [\n  {\n    a: 1, \n    b: {\n      c: 4\n    }\n  }, \n  {\n    a: 2, \n    b: {\n      c: 5\n    }\n  }, \n  {\n    a: 3, \n    b: {\n      c: 6\n    }\n  }, \n];\n```\n\n```html\n<li *ngFor="let item of items | pluck: \'a\'"> <!-- Array: [1, 2, 3] -->\n<li *ngFor="let item of items | pluck: \'b.c\'"> <!-- Array: [4, 5, 6] -->\n```\n\n### shuffle\n\nReturns randomly shuffled array\n\n**Usage:** `array | shuffle`\n\n```typescript\nthis.items = [1, 2, 3, 4, 5, 6];\n```\n\n```html\n<li *ngFor="let item of items | shuffle"> <!-- Array: [4, 1, 6, 2, 5, 3] -->\n```\n\n### every\n\nReturns true if every elements of the array fits the predicate otherwise false\n\n**Usage:** `array | every: predicate`\n\n```typescript\nthis.itemsOne = [1, 1, 1];\nthis.itemsTwo = [1, 1, 2];\nthis.itemsThree = [2, 2, 2];\nthis.predicate = (value: any, index: number, array: any[]): boolean => {\n  return value === 1;\n};\n```\n\n```html\n<p>{{ itemsOne | every: predicate }}</p> <!-- Output: "true" -->\n<p>{{ itemsTwo | every: predicate }}</p> <!-- Output: "false" -->\n<p>{{ itemsThree | every: predicate }}</p> <!-- Output: "false" -->\n```\n\n### some\n\nReturns true if some elements of the array fits the predicate otherwise false\n\n**Usage:** `array | some: predicate`\n\n```typescript\nthis.itemsOne = [1, 1, 1];\nthis.itemsTwo = [1, 1, 2];\nthis.itemsThree = [2, 2, 2];\nthis.predicate = (value: any, index: number, array: any[]): boolean => {\n  return value === 1;\n};\n```\n\n```html\n<p>{{ itemsOne | some: predicate }}</p> <!-- Output: "true" -->\n<p>{{ itemsTwo | some: predicate }}</p> <!-- Output: "true" -->\n<p>{{ itemsThree | some: predicate }}</p> <!-- Output: "false" -->\n```\n\n### sample\n\nReturns sample items randomly from array\n\n**Usage:** `array | sample: [amount | default = 1]`\n\n```html\n<p>{{ [1, 2, 3, 4] | sample }}</p> <!-- Output: "[2]" -->\n<p>{{ [1, 2, 3, 4] | sample: 2 }}</p> <!-- Output: "[4, 3]" -->\n```\n\n### groupBy\n\nReturns object of grouped by items by discriminator, and supports nested properties.\n\n**Usage:** `array | groupBy: [string[] | string | Function]: [delimiter: string | optional, default = \'|\']`\n\n```typescript\nthis.arrayObject = [\n  {id: 1, elm: \'foo\', value: 0}, \n  {id: 2, elm: \'bar\', value: 1}, \n  {id: 3, elm: \'foo\', value: 2}, \n  {id: 4, elm: \'foo\', value: 2}\n];\n\nthis.arrayNestedObject = [\n  {id: 1, prop: { deep: \'foo\' }},\n  {id: 2, prop: { deep: \'bar\' }},\n  {id: 3, prop: { deep: \'foo\' }},\n  {id: 4, prop: { deep: \'bar\' }}\n];\n```\n\n```html\n<p>{{ arrayObject | groupBy: \'elm\' }}</p> \n<!-- Output: "{foo: [{id: 1, elm: \'foo\', value: 0}, {id: 3, elm: \'foo\', value: 2}, {id: 4, elm: \'foo\', value: 2}], bar: [{id: 2, elm: \'bar\', value: 1}]}" -->\n\n<p>{{ arrayObject | groupBy: [\'elm\', \'value\'] }}</p> \n<!-- Output: "{\'foo|0\': [{elm: foo, value: 0}], \'bar|1\': [{elm:bar,value: 1}], \'foo|2\': [{elm:foo, value: 2}], \'bar|3\': [{elm:bar, value: 3}]}" -->\n\n<p>{{ arrayObject | groupBy: [\'elm\', \'value\']: \'_\' }}</p> \n<!-- Output: "{foo_0: [{elm: foo, value: 0}], bar_1: [{elm:bar,value: 1}], foo_2: [{elm:foo, value: 2}], bar_3: [{elm:bar, value: 3}]}" -->\n\n<p>{{ arrayNestedObject | groupBy: \'prop.deep\' }}</p> \n<!-- Output:{foo: [{id: 1, prop: {deep: foo}}, {id: 3, prop: {deep: foo}}], bar: [{id: 2, prop: {deep: bar}}, {id: 4, prop: {deep: bar}}]}" -->\n```\n\n### groupByImpure\n\nIdentical to groupBy pipe, the only difference is that it\'s an impure pipe.\n\nImpure pipes: https://angular.io/guide/pipes#impure-pipes\n\n### filterBy\n\nReturns object array of grouped by items by discriminator\n\n**Usage:** `array | filterBy: [prop, nested.prop, ...]: search: [strict | optional]`\n\n```typescript\nthis.users = [\n   {id: 1, first_name: \'John\', last_name: \'Doe\', work: { company: \'Foo Tech\' }},\n   {id: 2, first_name: \'Jane\', last_name: \'West\', work: { company: \'AAA Solutions\' }},\n   {id: 3, first_name: \'Bruce\', last_name: \'John\', work: { company: \'Bar Tech\' }},\n   {id: 4, first_name: \'William\', last_name: \'Cent\', work: { company: \'Foo Tech\' }, arr: [{name: \'foo\'}]}\n];\n```\n\n```html\n<!-- Returns users with `id` of 1 -->\n<p>{{ users | filterBy: [\'id\']: 1 }}</p> \n<!-- Output: "[{id: 1, first_name: \'John\', last_name: \'Doe\', work: { company: \'Foo Tech\', previous_company: \'\' }}]" -->\n\n<!-- filterBy also support nested properties -->\n<p>{{ users | filterBy: [\'work.company\']: \'Bar Tech\' }}</p> \n<!-- Output: "[{ "id": 3, "first_name": "Bruce", "last_name": "John", "work": { "company": "Bar Tech", "previous_company": "" } }]" -->\n\n<!-- filterBy also support nested properties inside of an array -->\n<p>{{ users | filterBy: [\'arr.name\']: \'foo\' }}</p> \n<!-- Output: "[{id: 4, first_name: \'William\', last_name: \'Cent\', work: { company: \'Foo Tech\' }, arr: [{name: \'foo\'}]}]" -->\n\n<!-- Return users whose first name or last name is \'John\'. -->\n<p>{{ users | filterBy: [\'first_name\', \'last_name\']: \'John\' }}</p>\n<!-- Output: "[{id: 1, first_name: \'John\', last_name: \'Doe\', work: { company: \'Foo Tech\', previous_company: \'\' }}]" -->\n\n<!-- Return users whose first name or last name is \'John\' or \'Cent\'. -->\n<p>{{ users | filterBy: [\'first_name\', \'last_name\']: [\'John\', \'Cent\'] }}</p>\n<!-- Output: "[{id: 1, first_name: \'John\', last_name: \'Doe\', work: { company: \'Foo Tech\', previous_company: \'\' }}, {id: 3, first_name: \'Bruce\', last_name: \'John\', work: { company: \'Bar Tech\' }}, {id: 4, first_name: \'William\', last_name: \'Cent\', work: { company: \'Foo Tech\' }, arr: [{name: \'foo\'}]}]" -->\n```\n\n### filterByImpure\n\nIdentical to filterBy pipe, the only difference is that it\'s an impure pipe.\n\nImpure pipes: https://angular.io/guide/pipes#impure-pipes\n\n### orderBy\n\nReturns ordered array by configuration \n\n**Usage:** `array | orderBy: [prop, nested.prop, array of props, ...]`\n\n```typescript\nconst numbers = [2, 1, 3];\n\nconst obj = [\n  {id: 4, name: \'Dave\', amount: 2},\n  {id: 2, name: \'Michael\', amount: 2},\n  {id: 3, name: \'Dan\', amount: 1},\n  {id: 1, name: \'John\', amount: 1}\n];\n\nconst deepObj = [\n  {id: 1, name: \'John\', amount: 1337, deep: {prop: 4}},\n  {id: 2, name: \'Michael\', amount: 42, deep: {prop: 2}},\n  {id: 3, name: \'Dan\', amount: 1, deep: {prop: 1}},\n  {id: 4, name: \'Dave\', amount: 2, deep: {prop: 3}}\n];\n```\n\n```html\n<!-- Returns array ordered by value -->\n<p>{{ numbers | orderBy }}</p>  <!-- Output: [1, 2, 3] -->\n<p>{{ numbers | orderBy: \'-\' }}</p>  <!-- Output: [3, 2, 1] -->\n\n<!-- Returns array ordered by value of property -->\n<p>{{ deepObj | orderBy: \'amount\' }}</p>  \n<!-- Output: [{id: 3, ...}, {id: 4, ...}, {id: 2, ...}, {id: 1, ...}] -->\n<p>{{ deepObj | orderBy: \'-amount\' }}</p>  \n<!-- Output: [{id: 1, ...}, {id: 2, ...}, {id: 4, ...}, {id: 3, ...}] -->\n\n<!-- Returns array ordered by value of deep property -->\n<p>{{ deepObj | orderBy: \'deep.prop\' }}</p>  \n<!-- Output: [{id: 3, ...}, {id: 2, ...}, {id: 4, ...}, {id: 1, ...}] -->\n<p>{{ deepObj | orderBy: \'-deep.prop\' }}</p>  \n<!-- Output: [{id: 1, ...}, {id: 4, ...}, {id: 2, ...}, {id: 3, ...}] -->\n\n<!-- Returns array ordered by mutliple properties -->\n<p>{{ obj | orderBy: [\'amount\', \'id\'] }}</p>  \n<!-- Output: [{id: 1, ...}, {id: 3, ...}, {id: 2, ...}, {id: 4, ...}] -->\n```\n\n### orderByImpure\n\nIdentical to orderBy pipe, the only difference is that it\'s an impure pipe.\n\nImpure pipes: https://angular.io/guide/pipes#impure-pipes\n\n### chunk\n\nReturns chunked array or string by size\n\n**Usage:** `array | size: [number | default = 1]`\n\n```html\n<p>{{ [1, 2, 3, 4, 5] | chunk: 2 }}</p>\n<!-- Output: "[[1, 2], [3, 4], [5]]" -->\n```\n\n### fromPairs\n\nReturns object of an array of key value pairs \n\n**Usage:** `array | fromPairs`\n\n```html\n<p>{{ [[\'foo\', 1], [\'bar\', 2]] | fromPairs }}</p> <!-- Output: "{foo: 1, bar: 2}" -->\n<p>{{ [[\'foo\', [1, 2]], [\'bar\', [3, 4]]] | fromPairs }}</p> <!-- Output: "{foo: [1, 2], bar: [3, 4]}" -->\n```\n\n## Object\n\n### keys\n\nReturns array of object keys\n\n**Usage:** `object | keys`\n\n```html\n<p>{{ {foo: 1, bar: 2} | keys }}</p> <!-- Output: "[\'foo\', \'bar\']" -->\n```\n\n### values\n\nReturns array of object values\n\n**Usage:** `object | values`\n\n```html\n<p>{{ {foo: 1, bar: 2} | values }}</p> <!-- Output: "[1, 2]" -->\n```\n\n### pairs\n\nReturns array of an object key value pairs \n\n**Usage:** `object | pairs`\n\n```html\n<p>{{ {foo: 1, bar: 2} | pairs }}</p> <!-- Output: "[[\'foo\', 1], [\'bar\', 2]]" -->\n<p>{{ {foo: [1, 2], bar: [3, 4]} | pairs }}</p> <!-- Output: "[[\'foo\', [1, 2]], [\'bar\', [3, 4]]]" -->\n```\n\n### pick\n\nReturns object with picked keys from object\n\n**Usage:** `object | pick: [key | string]]`\n\n```html\n<p>{{ {foo: 1, bar: 2} | pick: \'foo\' }}</p> <!-- Output: "{foo: 1}" -->\n<p>{{ {foo: 1, bar: 2} | pick: \'foo\': \'bar\' }}</p> <!-- Output: "{foo: 1, bar: 2}" -->\n```\n\n### omit\n\nReturns object after omitting keys from object (opposite of pick)\n\n**Usage:** `object | omit: [key | string]]`\n\n```html\n<p>{{ {foo: 1, bar: 2} | omit: \'foo\' }}</p> <!-- Output: "{bar: 2}" -->\n<p>{{ {foo: 1, bar: 2} | omit: \'foo\': \'bar\' }}</p> <!-- Output: "{}" -->\n```\n\n### invert\n\nReturns object with inverted keys and values. in case of equal values, subsequent values overwrite property assignments of previous values.\n\n**Usage:** `object | invert`\n\n```html\n<p>{{ {foo: 1, bar: 2} | invert }}</p> <!-- Output: "{1: \'foo\', 2: \'bar\'}" -->\n```\n\n### invertBy\n\nReturns object with inverted keys and values. in case of equal values, will add to an array.\n\n**Usage:** `object | invertBy: [Function | optional]`\n\n```typescript\nthis.cb = (value): string => {\n  return `name_${value}`;\n};\n```\n\n```html\n<p>{{ {foo: 1, bar: 2} | invertBy }}</p> <!-- Output: "{1: [\'foo\'], 2: [\'bar\']}" -->\n<p>{{ {foo: 1, bar: 2} | invertBy: cb }}</p> <!-- Output: "{name_1: [\'foo\'], name_2: [\'bar\']}" -->\n<p>{{ {a: 1, b: 2, c: 1, d: 2} | invertBy }}</p> <!-- Output: "{1: [\'a\', \'c\'], 2: [\'b\', \'d\']}" -->\n```\n\n### diffObj\n\nReturns a diff object of two objects\n\n**Usage:** `object | diffObj: Object`\n\n```html\n<p>{{ {a: 1} | diffObj: {a: 1} }}</p> <!-- Output: "{}" -->\n<p>{{ {a: 1} | diffObj: {a: 2} }}</p> <!-- Output: "{a: 1}" -->\n<p>{{ {a: 1, b: 2} | diffObj: {a: 1, b: 1} }}</p> <!-- Output: "{b: 2}" -->\n<p>{{ {a: 1, b: 2, c: {d: 3} } | diffObj: {a: 1, b: 1, c: {d: 1} } }}</p> <!-- Output: "{b: 2, c: {d: 3}}" -->\n```\n\n## Math\n\n### min\n\nReturns the minimum of a given array\n\n**Usage:** `array | min`\n\n```html\n<p>{{ [1, 2, 3, 1, 2, 3] | min }}</p> <!-- Output: "1" -->\n```\n\n### max\n\nReturns the maximum of a given array\n\n**Usage:** `array | max`\n\n```html\n<p>{{ [1, 2, 3, 1, 2, 3] | max }}</p> <!-- Output: "3" -->\n```\n\n### sum\n\nReturns the sum of a given array\n\n**Usage:** `array | sum`\n\n```html\n<p>{{ [1, 2, 3, 4] | sum }}</p> <!-- Output: "10" -->\n```\n\n### average\n\nReturns the average of a given array\n\n**Usage:** `array | average`\n\n```html\n<p>{{ [1, 2, 3] | average }}</p> <!-- Output: "2" -->\n<p>{{ [1, 2] | average }}</p> <!-- Output: "1.5" -->\n```\n\n### percentage\n\nReturns percentage between numbers \n\n**Usage:** `number | percentage: [total | default = 100]: [floor | default = false]`\n\n```html\n<p>{{ 5 | percentage }}</p> <!-- Output: "5" -->\n<p>{{ 5 | percentage: 160 }}</p> <!-- Output: "3.125" -->\n<p>{{ 5 | percentage: 160: true }}</p> <!-- Output: "3" -->\n```\n\n### ceil\n\nReturns ceil of a number by precision \n\n**Usage:** `number | ceil: [precision | default = 0]`\n\n```html\n<p>{{ 42.123 | ceil }}</p> <!-- Output: "43" -->\n<p>{{ 42.123 | ceil: 2 }}</p> <!-- Output: "42.13" -->\n```\n\n### floor\n\nReturns floor of a number by precision \n\n**Usage:** `number | floor: [precision | default = 0]`\n\n```html\n<p>{{ 42.123 | floor }}</p> <!-- Output: "42" -->\n<p>{{ 42.123 | floor: 2 }}</p> <!-- Output: "42.12" -->\n```\n\n### round\n\nReturns round of a number by precision \n\n**Usage:** `number | round: [precision | default = 0]`\n\n```html\n<p>{{ 42.4 | round }}</p> <!-- Output: "42" -->\n<p>{{ 42.5 | round }}</p> <!-- Output: "43" -->\n<p>{{ 42.123 | round: 2 }}</p> <!-- Output: "42.12" -->\n```\n\n### sqrt\n\nReturns the square root of a number \n\n**Usage:** `number | sqrt`\n\n```html\n<p>{{ 9 | sqrt }}</p> <!-- Output: "3" -->\n```\n\n### pow\n\nReturns the power of a number \n\n**Usage:** `number | pow: [power | default = 2]`\n\n```html\n<p>{{ 3 | pow }}</p> <!-- Output: "9" -->\n<p>{{ 3 | pow: 3 }}</p> <!-- Output: "27" -->\n```\n\n### degrees\n\nReturns the degrees of a number in radians \n\n**Usage:** `number | degrees`\n\n```html\n<p>{{ 3.141592653589793 | degrees }}</p> <!-- Output: "180" -->\n```\n\n### radians\n\nReturns the radians of a number in degrees \n\n**Usage:** `number | radians`\n\n```html\n<p>{{ 180 | radians }}</p> <!-- Output: "3.141592653589793" -->\n```\n\n### bytes\n\nReturns bytes with a unit symbol\n\n**Usage:** `number | bytes: [precision]`\n\n```html\n<p>{{ 10 | bytes }}</p> <!-- Output: "10 B" -->\n<p>{{ 1048576 | bytes }}</p> <!-- Output: "1 KB" -->\n<p>{{ 1073741824 | bytes }}</p> <!-- Output: "1 MB" -->\n<p>{{ 1.0995116e12 | bytes }}</p> <!-- Output: "1 GB" -->\n```\n\n## Boolean\n\n### isNull\n\n**Usage:** `any | isNull`\n\n```html\n<p>{{ null | isNull }}</p> <!-- Output: "true" -->\n<p>{{ 1 | isNull }}</p> <!-- Output: "false" -->\n```\n\n### isDefined\n\n**Usage:** `any | isDefined`\n\n```html\n<p>{{ 1 | isDefined }}</p> <!-- Output: "true" -->\n<p>{{ undefined | isDefined }}</p> <!-- Output: "false" -->\n```\n\n### isUndefined\n\n**Usage:** `any | isUndefined`\n\n```html\n<p>{{ 1 | isUndefined }}</p> <!-- Output: "false" -->\n<p>{{ undefined | isUndefined }}</p> <!-- Output: "true" -->\n```\n\n\n### isString\n\n**Usage:** `any | isString`\n\n```html\n<p>{{ 1 | isString }}</p> <!-- Output: "false" -->\n<p>{{ \'\' | isString }}</p> <!-- Output: "true" -->\n```\n\n### isNumber\n\n**Usage:** `any | isNumber`\n\n```typescript\nthis.func = () => {};\nthis.num = 1;\n```\n\n```html\n<p>{{ num | isNumber }}</p> <!-- Output: "true" -->\n<p>{{ func | isNumber }}</p> <!-- Output: "false" -->\n```\n\n### isArray\n\n**Usage:** `any | isArray`\n\n```typescript\nthis.arr = [1, 2];\nthis.num = 1;\n```\n\n```html\n<p>{{ num | isArray }}</p> <!-- Output: "false" -->\n<p>{{ arr | isArray }}</p> <!-- Output: "true" -->\n```\n\n### isObject\n\n**Usage:** `any | isObject`\n\n```typescript\nthis.obj = {a: 1, b: 2};\nthis.num = 1;\n```\n\n```html\n<p>{{ num | isObject }}</p> <!-- Output: "false" -->\n<p>{{ obj | isObject }}</p> <!-- Output: "true" -->\n```\n\n### isGreaterThan\n\n**Usage:** `number | isGreaterThan: otherNumber`\n\n```html\n<p>{{ 1 | isGreaterThan: 1 }}</p> <!-- Output: "false" -->\n<p>{{ 1 | isGreaterThan: 2 }}</p> <!-- Output: "false" -->\n<p>{{ 2 | isGreaterThan: 1 }}</p> <!-- Output: "true" -->\n```\n\n### isGreaterEqualThan\n\n**Usage:** `number | isGreaterEqualThan: otherNumber`\n\n```html\n<p>{{ 1 | isGreaterEqualThan: 1 }}</p> <!-- Output: "true" -->\n<p>{{ 1 | isGreaterEqualThan: 2 }}</p> <!-- Output: "false" -->\n<p>{{ 2 | isGreaterEqualThan: 1 }}</p> <!-- Output: "true" -->\n```\n\n### isLessThan\n\n**Usage:** `number | isLessThan: otherNumber`\n\n```html\n<p>{{ 1 | isLessThan: 1 }}</p> <!-- Output: "false" -->\n<p>{{ 1 | isLessThan: 2 }}</p> <!-- Output: "true" -->\n<p>{{ 2 | isLessThan: 1 }}</p> <!-- Output: "false" -->\n```\n\n### isLessEqualThan\n\n**Usage:** `number | isLessEqualThan: otherNumber`\n\n```html\n<p>{{ 1 | isLessEqualThan: 1 }}</p> <!-- Output: "true" -->\n<p>{{ 1 | isLessEqualThan: 2 }}</p> <!-- Output: "true" -->\n<p>{{ 2 | isLessEqualThan: 1 }}</p> <!-- Output: "false" -->\n```\n\n### isEqualTo\n\n**Usage:** `number | isEqualTo: otherNumber`\n\n```html\n<p>{{ 1 | isEqualTo: 1 }}</p> <!-- Output: "true" -->\n<p>{{ 1 | isEqualTo: \'1\' }}</p> <!-- Output: "true" -->\n<p>{{ 1 | isEqualTo: 2 }}</p> <!-- Output: "false" -->\n<p>{{ 2 | isEqualTo: 1 }}</p> <!-- Output: "false" -->\n```\n\n### isNotEqualTo\n\n**Usage:** `number | isNotEqualTo: otherNumber`\n\n```html\n<p>{{ 1 | isNotEqualTo: 1 }}</p> <!-- Output: "false" -->\n<p>{{ 1 | isNotEqualTo: \'1\' }}</p> <!-- Output: "false" -->\n<p>{{ 1 | isNotEqualTo: 2 }}</p> <!-- Output: "true" -->\n<p>{{ 2 | isNotEqualTo: 1 }}</p> <!-- Output: "true" -->\n```\n\n### isIdenticalTo\n\n**Usage:** `number | isIdenticalTo: otherNumber`\n\n```html\n<p>{{ 1 | isIdenticalTo: 1 }}</p> <!-- Output: "true" -->\n<p>{{ 1 | isIdenticalTo: \'1\' }}</p> <!-- Output: "false" -->\n<p>{{ 1 | isIdenticalTo: 2 }}</p> <!-- Output: "false" -->\n<p>{{ 2 | isIdenticalTo: 1 }}</p> <!-- Output: "false" -->\n```\n\n### isNotIdenticalTo\n\n**Usage:** `number | isNotIdenticalTo: otherNumber`\n\n```html\n<p>{{ 1 | isNotIdenticalTo: 1 }}</p> <!-- Output: "false" -->\n<p>{{ 1 | isNotIdenticalTo: \'1\' }}</p> <!-- Output: "true" -->\n<p>{{ 1 | isNotIdenticalTo: 2 }}</p> <!-- Output: "true" -->\n<p>{{ 2 | isNotIdenticalTo: 1 }}</p> <!-- Output: "true" -->\n```\n\n## Contributing\n\n* Before adding any new feature or a fix make sure to open an issue first!\n\nMake sure you have `angular-cli` & `karma` installed globally.\n\n```bash\n$ npm install -g angular-cli karma\n```\n\nClone the project, and install dependencies.\n\n```bash\n$ git clone https://github.com/danrevah/ngx-pipes.git\n$ npm install\n```\n\nCreate a new branch\n\n```bash\n$ git checkout -b feat/someFeature\n```\n\nAdd tests & make sure everything is running properly\n```bash\n$ npm test\n```\n\nCommit & push, and make a pull request!\n'