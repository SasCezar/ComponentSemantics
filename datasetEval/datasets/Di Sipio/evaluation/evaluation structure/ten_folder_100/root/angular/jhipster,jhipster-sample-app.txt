b"# jhipsterSampleApplication\n\nThis application was generated using JHipster 6.5.1, you can find documentation and help at [https://www.jhipster.tech/documentation-archive/v6.5.1](https://www.jhipster.tech/documentation-archive/v6.5.1).\n\n## Development\n\nBefore you can build this project, you must install and configure the following dependencies on your machine:\n\n1. [Node.js][]: We use Node to run a development web server and build the project.\n   Depending on your system, you can install Node either from source or as a pre-packaged bundle.\n\nAfter installing Node, you should be able to run the following command to install development tools.\nYou will only need to run this command when dependencies change in [package.json](package.json).\n\n    npm install\n\nWe use npm scripts and [Webpack][] as our build system.\n\nRun the following commands in two separate terminals to create a blissful development experience where your browser\nauto-refreshes when files change on your hard drive.\n\n    ./mvnw\n    npm start\n\nNpm is also used to manage CSS and JavaScript dependencies used in this application. You can upgrade dependencies by\nspecifying a newer version in [package.json](package.json). You can also run `npm update` and `npm install` to manage dependencies.\nAdd the `help` flag on any command to see how you can use it. For example, `npm help update`.\n\nThe `npm run` command will list all of the scripts available to run for this project.\n\n### PWA Support\n\nJHipster ships with PWA (Progressive Web App) support, and it's disabled by default. One of the main components of a PWA is a service worker.\n\nThe service worker initialization code is commented out by default. To enable it, uncomment the following code in `src/main/webapp/index.html`:\n\n```html\n<script>\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.register('./service-worker.js').then(function() {\n      console.log('Service Worker Registered');\n    });\n  }\n</script>\n```\n\nNote: [Workbox](https://developers.google.com/web/tools/workbox/) powers JHipster's service worker. It dynamically generates the `service-worker.js` file.\n\n### Managing dependencies\n\nFor example, to add [Leaflet][] library as a runtime dependency of your application, you would run following command:\n\n    npm install --save --save-exact leaflet\n\nTo benefit from TypeScript type definitions from [DefinitelyTyped][] repository in development, you would run following command:\n\n    npm install --save-dev --save-exact @types/leaflet\n\nThen you would import the JS and CSS files specified in library's installation instructions so that [Webpack][] knows about them:\nEdit [src/main/webapp/app/vendor.ts](src/main/webapp/app/vendor.ts) file:\n\n```\nimport 'leaflet/dist/leaflet.js';\n```\n\nEdit [src/main/webapp/content/scss/vendor.scss](src/main/webapp/content/scss/vendor.scss) file:\n\n```\n@import '~leaflet/dist/leaflet.css';\n```\n\nNote: There are still a few other things remaining to do for Leaflet that we won't detail here.\n\nFor further instructions on how to develop with JHipster, have a look at [Using JHipster in development][].\n\n### Using Angular CLI\n\nYou can also use [Angular CLI][] to generate some custom client code.\n\nFor example, the following command:\n\n    ng generate component my-component\n\nwill generate few files:\n\n    create src/main/webapp/app/my-component/my-component.component.html\n    create src/main/webapp/app/my-component/my-component.component.ts\n    update src/main/webapp/app/app.module.ts\n\n## Building for production\n\n### Packaging as jar\n\nTo build the final jar and optimize the jhipsterSampleApplication application for production, run:\n\n    ./mvnw -Pprod clean verify\n\nThis will concatenate and minify the client CSS and JavaScript files. It will also modify `index.html` so it references these new files.\nTo ensure everything worked, run:\n\n    java -jar target/*.jar\n\nThen navigate to [http://localhost:8080](http://localhost:8080) in your browser.\n\nRefer to [Using JHipster in production][] for more details.\n\n### Packaging as war\n\nTo package your application as a war in order to deploy it to an application server, run:\n\n    ./mvnw -Pprod,war clean verify\n\n## Testing\n\nTo launch your application's tests, run:\n\n    ./mvnw verify\n\n### Client tests\n\nUnit tests are run by [Jest][] and written with [Jasmine][]. They're located in [src/test/javascript/](src/test/javascript/) and can be run with:\n\n    npm test\n\nFor more information, refer to the [Running tests page][].\n\n### Code quality\n\nSonar is used to analyse code quality. You can start a local Sonar server (accessible on http://localhost:9001) with:\n\n```\ndocker-compose -f src/main/docker/sonar.yml up -d\n```\n\nYou can run a Sonar analysis with using the [sonar-scanner](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner) or by using the maven plugin.\n\nThen, run a Sonar analysis:\n\n```\n./mvnw -Pprod clean verify sonar:sonar\n```\n\nIf you need to re-run the Sonar phase, please be sure to specify at least the `initialize` phase since Sonar properties are loaded from the sonar-project.properties file.\n\n```\n./mvnw initialize sonar:sonar\n```\n\nor\n\nFor more information, refer to the [Code quality page][].\n\n## Using Docker to simplify development (optional)\n\nYou can use Docker to improve your JHipster development experience. A number of docker-compose configuration are available in the [src/main/docker](src/main/docker) folder to launch required third party services.\n\nFor example, to start a mysql database in a docker container, run:\n\n    docker-compose -f src/main/docker/mysql.yml up -d\n\nTo stop it and remove the container, run:\n\n    docker-compose -f src/main/docker/mysql.yml down\n\nYou can also fully dockerize your application and all the services that it depends on.\nTo achieve this, first build a docker image of your app by running:\n\n    ./mvnw -Pprod verify jib:dockerBuild\n\nThen run:\n\n    docker-compose -f src/main/docker/app.yml up -d\n\nFor more information refer to [Using Docker and Docker-Compose][], this page also contains information on the docker-compose sub-generator (`jhipster docker-compose`), which is able to generate docker configurations for one or several JHipster applications.\n\n## Continuous Integration (optional)\n\nTo configure CI for your project, run the ci-cd sub-generator (`jhipster ci-cd`), this will let you generate configuration files for a number of Continuous Integration systems. Consult the [Setting up Continuous Integration][] page for more information.\n\n[jhipster homepage and latest documentation]: https://www.jhipster.tech\n[jhipster 6.5.1 archive]: https://www.jhipster.tech/documentation-archive/v6.5.1\n[using jhipster in development]: https://www.jhipster.tech/documentation-archive/v6.5.1/development/\n[using docker and docker-compose]: https://www.jhipster.tech/documentation-archive/v6.5.1/docker-compose\n[using jhipster in production]: https://www.jhipster.tech/documentation-archive/v6.5.1/production/\n[running tests page]: https://www.jhipster.tech/documentation-archive/v6.5.1/running-tests/\n[code quality page]: https://www.jhipster.tech/documentation-archive/v6.5.1/code-quality/\n[setting up continuous integration]: https://www.jhipster.tech/documentation-archive/v6.5.1/setting-up-ci/\n[node.js]: https://nodejs.org/\n[yarn]: https://yarnpkg.org/\n[webpack]: https://webpack.github.io/\n[angular cli]: https://cli.angular.io/\n[browsersync]: https://www.browsersync.io/\n[jest]: https://facebook.github.io/jest/\n[jasmine]: https://jasmine.github.io/2.0/introduction.html\n[protractor]: https://angular.github.io/protractor/\n[leaflet]: https://leafletjs.com/\n[definitelytyped]: https://definitelytyped.org/\n"