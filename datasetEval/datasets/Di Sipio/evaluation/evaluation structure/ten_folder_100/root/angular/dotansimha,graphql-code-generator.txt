b"[![CodeGen](https://user-images.githubusercontent.com/25294569/63773131-35f6aa00-c8e3-11e9-8191-fc0ac6f959e4.gif)](https://graphql-code-generator.com)\n\n[![npm version](https://badge.fury.io/js/%40graphql-codegen%2Fcli.svg)](https://badge.fury.io/js/%40graphql-codegen%2Fcli)\n[![CircleCI](https://circleci.com/gh/dotansimha/graphql-code-generator/tree/master.svg?style=svg)](https://circleci.com/gh/dotansimha/graphql-code-generator/tree/master)\n[![Discord Chat](https://img.shields.io/discord/625400653321076807)](https://discord.gg/xud7bH9)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)\n[![renovate-app badge][renovate-badge]][renovate-app]\n[![Netlify Status](https://api.netlify.com/api/v1/badges/beb4a802-e080-469d-82d6-e83a3d108a40/deploy-status)](https://app.netlify.com/sites/graphql-code-generator/deploys)\n\n[renovate-badge]: https://img.shields.io/badge/renovate-app-blue.svg\n[renovate-app]: https://renovateapp.com/\n\n[graphql-code-generator.com](https://graphql-code-generator.com)\n\n[GraphQL Codegen 1.0 is here!](https://graphql-code-generator.com/docs/migration/from-0-18)\n\nGraphQL Code Generator is a tool that generates code out of your GraphQL schema. Whether you are developing a frontend or backend, you can utilize GraphQL Code Generator to generate output from your GraphQL Schema and GraphQL Documents (query/mutation/subscription/fragment).\n\nBy analyzing the schema and documents and parsing it, GraphQL Code Generator can output code at a wide variety of formats, based on pre-defined templates or based on custom user-defined ones. Regardless of the language that you're using, GraphQL Code Generator got you covered.\n\nGraphQL Code Generator let you choose the output that you need, based on _plugins_, which are very flexible and customizable. You can also write your own _plugins_ to generate custom outputs that matches your needs.\n\nYou can try this tool live on your browser and see some useful examples. Check out [GraphQL Code Generator Live Examples](https://graphql-code-generator.com/#live-demo).\n\nWe currently support and maintain [these plugins](https://graphql-code-generator.com/docs/plugins/) (TypeScript, Flow, React, Angular, MongoDB, Stencil, Reason and some more), and there is an active community that writes and maintains custom plugins.\n\n### Quick Start\n\nInstall using `yarn`:\n\n    $ yarn add -D graphql @graphql-codegen/cli\n\nGraphQL Code Generator lets you setup everything by simply running the following command:\n\n    $ graphql-codegen init\n\nQuestion by question, it will guide you through the whole process of setting up a schema, selecting plugins, picking a destination of a generated file and a lot more.\n\nIf you don't want to use the wizard, create a basic `codegen.yml` configuration file, point to your schema, and pick the plugins you wish to use. For example:\n\n```yml\nschema: http://localhost:3000/graphql\ngenerates:\n  src/types.ts:\n    - typescript\n```\n\nThen, run the code-generator using `graphql-codegen` command:\n\n    $ graphql-codegen\n\nThe command above may fetch (for example) the following GraphQL schema:\n\n```graphql\ntype Author {\n  id: Int!\n  firstName: String!\n  lastName: String!\n  posts(findTitle: String): [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String!\n  author: Author!\n}\n\ntype Query {\n  posts: [Post]\n}\n\nschema {\n  query: Query\n}\n```\n\nAnd generate the following TypeScript typings:\n\n```ts\nexport type Maybe<T> = T | null;\n\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n};\n\nexport type Author = {\n  __typename?: 'Author',\n  id: Scalars['Int'],\n  firstName: Scalars['String'],\n  lastName: Scalars['String'],\n  posts?: Maybe<Array<Maybe<Post>>>,\n};\n\nexport type AuthorPostsArgs = {\n  findTitle?: Maybe<Scalars['String']>\n};\n\nexport type Post = {\n  __typename?: 'Post',\n  id: Scalars['Int'],\n  title: Scalars['String'],\n  author: Author,\n};\n\nexport type Query = {\n  __typename?: 'Query',\n  posts?: Maybe<Array<Maybe<Post>>>,\n};\n```\n\n### Links\n\nBesides our [docs page](https://graphql-code-generator.com/docs/getting-started/index), feel free to go through our published Medium articles to get a better grasp of what GraphQL Code Generator is all about:\n\n- [All available plugins](https://graphql-code-generator.com/docs/plugins/)\n\n- [**GraphQL Code-Generator** - The True GraphQL-First platform](https://medium.com/@dotansimha/graphql-code-generator-a34e3785e6fb)\n\n- [**GraphQL Code-Generator v0.9** - What's new?](https://medium.com/@dotansimha/whats-new-in-graphql-code-generator-0-9-0-dba6c9e365d)\n\n- [**GraphQL Code Generator v0.11** - Generate React and Angular Apollo Components, Resolver signatures and much more!](https://medium.com/the-guild/graphql-code-generator-v0-11-15bb9b02899e)\n\n### Contributing\n\nFeel free to open issues and pull requests. We're always welcome support from the community.\n\nTo run this project locally:\n\n- Use Node >= 8\n- Make sure that you have the latest Yarn version (https://yarnpkg.com/lang/en/docs/install/)\n- Clone this repo using `git clone`\n- Run `yarn` on the root dir (it has a Yarn workspace defined, so all the packages dependencies will be installed)\n- Run `yarn build` to build all core packages and plugins\n- Run `yarn test` to make sure everything works\n\n### License\n\n[![GitHub license](https://img.shields.io/badge/license-MIT-lightgrey.svg?maxAge=2592000)](https://raw.githubusercontent.com/apollostack/apollo-ios/master/LICENSE)\n\nMIT\n"