b'Hawkpost\n========\n\nHawkpost lets you create unique links that you can share with the person that desires to send you important information but doesn\'t know how to deal with PGP.\n\nYou can deploy your own server using the code from this repository or use the official server (that is running an exact copy of this repo) at [https://hawkpost.co](https://hawkpost.co).\n\n\n## Rationale\n\nFor many web and mobile development studios, no matter how hard they try to secure their client secrets (passwords, API keys, etc), the weakest link resides on the client most of the times, specially when he\'s not a tech savvy person. This project tries to help minimize this issue on the communication between both parties.\n\nThe way it works is like this:\n\n1. It fetches your public key.\n1. When the box is open and the secrets submitted, all the content is encrypted on the client side.\n1. The server then signs (**experimental**) the encrypted content.\n1. Finally the server forwards it to your e-mail address.\n\n\n# Setting up a development environment\n\nIn this section you can find the steps to setup a minimal development environment on your machine.\n\nBase requirements:\n\n* Python 3\n* Redis\n* PostgreSQL\n\n## On Linux\n\nOn a **Debian** based operating system execute the following steps, after cloning the repository:\n\n* Make sure you have `pipenv` installed. You can check [this page for more information](https://docs.pipenv.org/install/#installing-pipenv)\n\n* Install the dependencies\n\n```\n$ pipenv install\n```\n\n* Create the local postgreSQL database with your user and no password\n\n* Migrate the database\n\n```\n$ pipenv run python manage.py migrate\n```\n\n* Generate stylesheet with gulp (installation instructions for gulp can be found [here](https://gulpjs.com/))\n\n```\n$ gulp build\n```\n\n* Now you should be able to launch the server and its workers\n\n```\n$ pipenv run python manage.py runserver\n$ pipenv run celery -A hawkpost worker --beat -l info\n```\n\nYou can avoid `pipenv run` in every command if you first active the virtual environment with `pipenv shell`.\n\n## Using Docker\n\nTo use this approach you need to have [Docker][docker-overview] and\n[Docker Compose][docker-compose-overview] installed.\nPlease note that since **this project uses version 2 of the\n[Compose file format][docker-compose-versioning]** you may need\nto update your Docker and Docker Compose to their latest versions.\n\nInstallation instructions for every platform are available at the\n[Docker Engine Documentation][docker-install-docs]. If you use Linux you\'ll\nhave to [install Docker Compose][docker-compose-install-docs] manually.\n\nAfter having the latest Docker and Docker Compose installed, **make the\nfolder** that will hold the **GPG public keys keyring**:\n\n```\n$ mkdir -p gpg_home\n```\n\nSome environment variables need to be set so the application works properly.\n**Copy** the provided **[.env.sample](.env.sample)** and name it **`.env`**:\n\n```\n$ cp .env.sample .env\n```\n\nSince this setup assumes containers talk to each other some of the variables\nneed to be set in order to point to the containers\' names.\n\n**Edit `.env`** and set the following variables to these values:\n\n```\nDB_HOST=db\nDB_USER=hawkpost\nDB_PASSWORD=hawkpost\nREDIS_URL=redis://redis:6379/0\nEMAIL_HOST=mail_debug\n```\n\n**Don\'t forget to set the remaining variables** as well.\n\nAfter setting `.env` correctly, just **run** (you may need to `sudo` depending\non your setup)\n\n```bash\n# Run the databases in detached mode to avoid seeing the logs\n$ docker-compose up -d db redis\n\n# Perform the migrations\n# (using `--rm` to remove the temporary container afterwards)\n$ docker-compose run --rm web pipenv run python manage.py migrate\n\n# Run the web, celery and mail_debug containers\n# (`docker-compose up` would log db and redis as well)\n$ docker-compose up web celery mail_debug\n```\n\nThese commands\n\n1. **Run the `db` and the `redis` containers** detached from the console, so\n   we\'re not bothered by their logs while working on the application.\n1. **Perform the migrations** using a temporary `web` container; it is removed\n   afterwards.\n1. **Run the `web`, `celery` and `mail_debug` containers** attached to the\n   console. `mail_debug` is optional since it is only used when debugging the\n   e-mails being sent.\n\nThe `web` container will reload on code changes.\n\nYou may access the application by **opening `http://<docker-network-ip>` on\nyour browser**, which you can find by **running** (you may need to run this as\n`root` depending on your setup).\n\n```\nCID=$(docker ps | grep \'hawkpost_web\' | cut -d \' \' -f 1)\ndocker inspect -f "{{ .NetworkSettings.Networks.hawkpost_default.Gateway }}" $CID\n```\n\nThis IP won\'t change unless you remove every container and the corresponding\nnetwork (manually), so you may alias it on your `/etc/hosts` (to something like\n`hawkpost.test`).\n\n**Note:** This approach was not tested on OS X or Windows platforms, so the\nnetwork feature may require additional steps.\n\n[docker-overview]: https://www.docker.com/products/docker-engine\n[docker-compose-overview]: https://www.docker.com/products/docker-compose\n[docker-compose-versioning]: https://docs.docker.com/compose/compose-file/#versioning\n[docker-install-docs]: https://docs.docker.com/engine/installation\n[docker-compose-install-docs]: https://github.com/docker/compose/releases\n\n# Running the test suite\n\nTo execute our current test suite, you just need to execute the following command after settinng up your local development environment:\n\n> $ pipenv run python manage.py test\n\nIn case you are using our docker setup the command should be:\n\n> $ docker-compose run --rm web pipenv run python manage.py test\n\n# Credits\n\n![Whitesmith](http://i.imgur.com/Si2l3kd.png)\n\nThis project was born during an internal hackathon at [Whitesmith](https://whitesmith.co), which is helping and supporting the current development.\n'