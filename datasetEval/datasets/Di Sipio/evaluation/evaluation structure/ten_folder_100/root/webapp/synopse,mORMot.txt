b"\r\n  Synopse mORMot framework\r\n\r\nAn Open Source Client-Server ORM/SOA framework\r\n (c) 2008-2019 Synopse Informatique\r\n  https://synopse.info\r\n  http://mormot.net\r\n\r\nContributors\r\n  Alan Chate\r\n  Alexander (sha)\r\n  Alexander (volax)\r\n  AlexPirate\r\n  Alfred Glaenzer (alf)\r\n  Andre Heider (dhewg)\r\n  Arnaud Bouchez\r\n  ASiwon\r\n  Aweste\r\n  Bas Schouten\r\n  BigStar\r\n  BugsDigger\r\n  Cheemeng\r\n  CoMPi\r\n  Damien (ddemars)\r\n  Daniel Kuettner\r\n  David Mead (MDW)\r\n  Delphinium (louisyeow)\r\n  DigDiver\r\n  Dominikcz\r\n  EgorovAlex\r\n  Emanuele (lele9)\r\n  Eric Grange\r\n  Esmond\r\n  Esteban Martin (EMartin)\r\n  Eugene Ilyin\r\n  Eva Freimann (EVaF)\r\n  F-Vicente\r\n  Goran Despalatovic (gigo)\r\n  Jean-Baptiste Roussia (jbroussia)\r\n  Joe (jokusoft)\r\n  Johan Bontes\r\n  Jordi Tudela\r\n  Kevin Chen\r\n  Lagodny\r\n  Leon Oosthuizen\r\n  Maciej Izak (hnb)\r\n  Marcos Douglas B. Santos (mdbs99)\r\n  Mario Moretti\r\n  Marius Maximus (mariuszekpl)\r\n  Martin Eckes\r\n  Martin Suer\r\n  Mazinsw\r\n  MChaos\r\n  Miab3\r\n  Michael (EgonHugeist)\r\n  Michalis Kamburelis \r\n  MilesYou\r\n  Mingda\r\n  Mr Yang (ysair)\r\n  Nicolas Marchand (MC)\r\n  Nortg\r\n  Nzsolt\r\n  Oleg Tretyakov\r\n  Ondrej (reddwarf)\r\n  Pavel Mashlyakovskii (mpv)\r\n  Pierre le Riche\r\n  RalfS\r\n  Richard6688\r\n  Sabbiolina\r\n  Sanyin\r\n  Sinisa (sinisav)\r\n  Sllimr7139\r\n  SSoftPro\r\n  Stefan (itSDS)\r\n  Svetozar Belic (transmogrifix)\r\n  Transmogrifix\r\n  Uian2000\r\n  Vaclav\r\n  Vadim Orel\r\n  Willo vd Merwe\r\n  Win2014\r\n  Wloochacz\r\n  Wolfgang Ehrhardt\r\n  Yoanq\r\n  Ysair\r\n  Zed\r\n\r\n[See below if you upgrade from 1.17 revision]\r\n\r\n  \r\nSynopse mORMot is an Open Source Client-Server ORM SOA MVC framework\r\nfor Delphi 6 up to Delphi 10.3 Rio and FPC, targeting Windows/Linux\r\nfor servers, and any platform for clients (including mobile or AJAX).\r\n\r\nThe main features of mORMot are therefore:\r\n\r\n - ORM/ODM: objects persistence on almost any database (SQL or NoSQL);\r\n - SOA: organize your business logic into REST services;\r\n - Clients: consume your data or services from any platform, via ORM/SOA APIs;\r\n - Web MVC: publish your ORM/SOA process as responsive Web Applications.\r\n\r\nWith local or remote access, via an auto-configuring Client-Server REST design.\r\n\r\nDue to its modular design, switch from a Client-Server architecture over\r\nHTTP, named pipes or GDI messages into a stand-alone application is just\r\na matter of mORMot classes initialization.\r\nFor instance, the very same executable can even be running stand-alone,\r\nas a server, as a service, or a client, depending on some run-time parameters!\r\n\r\nEmphasizing simplicity, speed and versatility, mORMot is a incredibly well\r\ndocumented Open Source project easy enough to add basic ORM or Client-Server\r\nfeatures to simple applications for hobbyists, or let experienced users\r\ndevelop scaling and strong service-based projects for their customers, with\r\nthe advantages of native code and easy-to-deploy solutions, reducing\r\ndeployment cost and increasing ROI.\r\n\r\nIt provides an Open Source self-sufficient set of units (even Delphi starter\r\nedition is enough) for creating any application, from a stand-alone solution\r\nup to the most complex Domain-Driven Design (DDD):\r\n\r\n - Presentation layer featuring MVC UI generation with i18n and reporting\r\n (with pdf export) for rich Delphi clients, MVC web clients (with logic-less\r\n Mustache templates) or rich AJAX clients (via native JSON/REST access);\r\n\r\n - Application layer implementing Service Oriented Architecture via\r\n interface-based services (like WCF) and Client-Server ORM (including \r\n method-based services) - following a RESTful model using JSON over several\r\n communication protocols (e.g. HTTP/1.1);\r\n\r\n - Domain Model layer handling all the needed business logic in plain Delphi\r\n objects, including high-level managed types like dynamic arrays or records\r\n for Value Objects, dedicated classes for Entities or Aggregates, and variant\r\n storage with late-binding for dynamic documents;\r\n\r\n - Data persistence infrastructure layer with ORM operations on direct\r\n Oracle, MS SQL, OleDB, ODBC, ZEOS/ZDBC access or any TDataSet provider (e.g.\r\n FireDAC/AnyDAC, UniDAC, NexusDB, BDE...), with a powerful SQLite3 kernel,\r\n and optional SQL access if needed, with amazing performance and advanced\r\n features like Array DML, auto-generating SQL for SQLite3, Oracle, \r\n Jet/MSAccess, MS SQL, Firebird, DB2, PostgreSQL, MySQL and NexusDB - and\r\n alternative high-speed MongoDB NoSQL database access for ODM persistence;\r\n\r\n - Cross-Cutting infrastructure layers for handling data filtering and\r\n validation, security (e.g. Windows authentication or any custom model),\r\n caching, logging and testing (framework uses test-driven approach and\r\n features interface stubbing and mocking).\r\n\r\nWith mORMot, ORM/ODM is not used only for data persistence of objects (like\r\nin other implementations), but as part of a global n-Tier, Service Oriented\r\nArchitecture (SOA), ready to implement Domain-Driven solutions. This\r\nframework is not an ORM on which a transmission layer has been added, like\r\nalmost everything existing in Delphi, C# or Java: this is a full Client-Server \r\nORM/SOA from the ground up.\r\nThis really makes the difference.\r\n\r\nThe business logic of your applications will be easily exposed as Services,\r\nand will be accessible from light clients (written in Delphi or any other\r\nmean, including AJAX).\r\nThe SpiderMonkey JavaScript engine has been integrated on the server side\r\nand can be used to define business rules or any process (including MVC web\r\nrendering) - just like node.js, but with a multi-threaded core, and the\r\nfull power of our optimized Delphi libraries at hand.\r\n\r\nThe framework Core is non-visual: you will get everything you need in a\r\nconsistent set of classes to be used from code. In order to let you focus\r\non your business, using mORMot's KISS/DRY/SOC/YAGNI/TDD and Convention Over\r\nConfiguration patterns. But you have also some UI units available (including\r\nscreen auto-generation, reporting and ribbon GUI), and you can use it from\r\nany RAD, web, or AJAX clients (via JavaScript or Smart Mobile Studio).\r\n\r\nNo dependency is needed on the client side (no DB driver, or third-party\r\nruntime): it is able to connect via standard HTTP, even through a corporate\r\nproxy or a VPN. Rich Delphi clients can be deployed just by copying and running\r\na stand-alone small executable, with no installation process. Stream can be\r\nencrypted via HTTS or with proven SHA/AES-256. Endpoints are configured\r\nautomatically for each published interface on both server and client sides,\r\nand creating a load-balancing proxy is a matter of one method call.\r\nSpeed and scalability has been implemented from the ground up: a genuine\r\noptimized multi-threaded core let a single server handle more than 50,000\r\nconcurrent clients, faster than DataSnap, WCF or node.js, and our rich SOA\r\ndesign is able to implement both vertical and horizontal scalable hosting,\r\nusing recognized enterprise-level SQL or NoSQL databases for storage.\r\n\r\nEven if mORMot will be more easily used in a project designed from scratch,\r\nit fits very well the purpose of evolving any existing Delphi project, or\r\ncreating the server side part of an AJAX application.\r\n\r\nLicensed under a disjunctive tri-license giving you the choice of one of\r\nthe three following sets of free software/open source licensing terms:\r\n - Mozilla Public License, version 1.1 or later;\r\n - GNU General Public License, version 2.0 or later;\r\n - GNU Lesser General Public License, version 2.1 or later.\r\nThis allows the use of our code in as wide a variety of software projects\r\nas possible, while still maintaining copy-left on code we wrote.\r\n\r\nMain project page:\r\nhttp://mORMot.net\r\n\r\nDocumentation:\r\nhttps://synopse.info/files/html/Synopse%20mORMot%20Framework%20SAD%201.18.html\r\n\r\nInstallation:\r\nhttps://synopse.info/files/html/Synopse%20mORMot%20Framework%20SAD%201.18.html#TITL_113\r\n\r\nFAQ:\r\nhttps://synopse.info/files/html/Synopse%20mORMot%20Framework%20SAD%201.18.html#TITL_123\r\n\r\nHow to get the source:\r\nhttps://synopse.info/fossil/wiki?name=Get+the+source\r\n\r\nA forum is dedicated to support:\r\nhttps://synopse.info\r\n\r\nA blog is available:\r\nhttp://blog.synopse.info\r\n\r\nIssues and feature requests can be posted (take a look at the forums\r\nand latest unstable version first!):\r\nhttps://synopse.info/fossil/reportlist\r\n\r\nYou can also monitor/fork our projects on GitHub:\r\nhttps://github.com/synopse/mORMot\r\n\r\nYou may also install it as a Delphinus package: Delphinus-Support\r\n\r\nDon't forget to download the documentation (available online or as pdf files,\r\ncreated by our SynProject tool).\r\nIn particular, you should take a look at all general introduction chapters\r\nof the SAD document. It will cover all key-concepts and code modelling\r\nused by the framework.\r\nA developer guide is included in this SAD document, in its 2nd part. You'll\r\nget good practice guidance, presentation of the ORM/SOA approach and other\r\nunderlying concepts.\r\n\r\nFeel free to contribute by posting enhancements and patches to this\r\nquickly evolving project.\r\n  \r\nEnjoy!\r\n\r\n\r\nSome units (e.g. SynPdf, SynGdiPlus, SynBigTable, SynCommons, SynCrypto, \r\nSynDB*, SynSQLite3, SynMongoDB, SynMustache, SynSM, mORMotReport) are used \r\nby mORMot, but do not require the whole framework to be linked.\r\nThat is, you can use e.g. only  PDF generation, SynDB fast database\r\naccess, a static-linked SQLite3 engine, direct MongoDB access, Mustache\r\ntemplates, SpiderMonkey JavaSCript engine, code-generated reports, or \r\nthe TDocVariant, TDynArray, TSynLog classes of SynCommons, without using\r\nthe main mORMot units and features (ORM, Client-Server, services, UI).\r\n\r\nSome of those units can even be compiled with Delphi 5 (e.g. SynPdf, SynDB).\r\n\r\n\r\nQuick Steps when upgrading from a previous 1.17 revision:\r\n\r\n1) Note that some units where renamed, and some breaking changes introduced\r\n   by some enhanced features, therefore a direct update is not possible\r\n\r\n2) Erase or rename your whole previous #\\Lib directory\r\n\r\n3) Download latest 1.18 revision files as stated just above\r\n  \r\n4) Change your references to mORMot units:\r\n - Add in your uses clause SynLog.pas and/or SynTests.pas if needed;\r\n - Rename in your uses clause any SQLite3Commons reference into mORmot;\r\n - Rename in your uses clause any SQLite3 reference into mORMotSQLite3;\r\n - Rename in your uses clause any other SQlite3* reference into mORMot*;\r\n - Add in one uses clause a link to SynSQLite3Static (for Win32).\r\n \r\n5) Consult the units headers about 1.18 for breaking changes, mainly:\r\n - TSQLRecord.ID: TID primary key, TIDDynArray, and TRecordReference are now Int64;\r\n - Renamed Iso8601 low-level structure as TTimeLogBits;\r\n - TJSONSerializerCustomReader/Writer callbacks changed;\r\n - TSQLRestServerCallBackParams replaced by TSQLRestServerURIContext class;\r\n - TSQLRestServerStatic* classes renamed as TSQLRestStorage*;\r\n - rmJSON* enums replaced by TSQLRestRoutingREST/JSON_RPC classes;\r\n - Changed '\xc2\xa4' into '~' character for mORMoti18n language files.\r\n"