b'# WebApp.rs\n\n[![CircleCI](https://circleci.com/gh/saschagrunert/webapp.rs.svg?style=shield)](https://circleci.com/gh/saschagrunert/webapp.rs)\n[![Coverage](https://codecov.io/gh/saschagrunert/webapp.rs/branch/master/graph/badge.svg)](https://codecov.io/gh/saschagrunert/webapp.rs)\n[![Deps](https://deps.rs/repo/github/saschagrunert/webapp.rs/status.svg)](https://deps.rs/repo/github/saschagrunert/webapp.rs)\n[![Docs master](https://img.shields.io/badge/doc-master-orange.svg)](https://saschagrunert.github.io/webapp.rs/doc/webapp/index.html)\n[![Docs release](https://docs.rs/webapp/badge.svg)](https://docs.rs/webapp)\n[![Docs release backend](https://docs.rs/webapp-backend/badge.svg)](https://docs.rs/webapp-backend)\n[![Docs release frontend](https://docs.rs/webapp-frontend/badge.svg)](https://docs.rs/webapp-frontend)\n[![License MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/saschagrunert/webapp.rs/blob/master/LICENSE)\n[![Crates.io](https://img.shields.io/crates/v/webapp.svg)](https://crates.io/crates/webapp)\n[![Crates.io](https://img.shields.io/crates/v/webapp-backend.svg)](https://crates.io/crates/webapp-backend)\n[![Crates.io](https://img.shields.io/crates/v/webapp-frontend.svg)](https://crates.io/crates/webapp-frontend)\n\n## A web application completely written in Rust\n\nTarget of this project is to write a complete web application including backend\nand frontend within Rust.\n\n``` console\nRust wasm             Rust app\nin browser <- REST -> HTTP Server -- actix-web\n |                         |\nYew                   Diesel (ORM) -> PostgreSQL\n```\n### Blog Posts\n\n1. [A Web Application completely in Rust](https://medium.com/@saschagrunert/a-web-application-completely-in-rust-6f6bdb6c4471).\n2. [Lessons learned on writing web applications completely in Rust](https://medium.com/@saschagrunert/lessons-learned-on-writing-web-applications-completely-in-rust-2080d0990287).\n\n## Build\n\nThe following build dependencies needs to be fulfilled to support the full\nfeature set of this application:\n\n- [cargo-web](https://github.com/koute/cargo-web)\n- [diesel_cli](https://github.com/diesel-rs/diesel)\n- [postgresql (libpg)](https://www.postgresql.org/)\n- A container runtime, like [podman](https://podman.io)\n\nThe app consist of a frontend and a backend. For getting started with hacking,\nthe backend can tested via `make run-backend`, whereas the frontend can be\ntested with `make run-frontend`. You can adapt the application configuration\nwithin `Config.toml` if needed.\n\nThis installs build requirements, rust and cargo-web, on Ubuntu or Debian.\n``` console\nwget https://sh.rustup.rs -O rustup-init\nsudo sh rustup-init -y\nsudo apt-get install -y pkg-config libssl-dev\nsudo cargo install cargo-web\n```\nThis builds the project.\n``` console\ngit clone https://github.com/saschagrunert/webapp.rs.git\ncd webapp.rs\nmake all\n```\n## Run\n\n`make deploy` uses podman to start a PostgreSQL container and the Rust backend container.\nIf you wish to use docker instead of podman, set `CONTAINER_RUNTIME=podman` in the top of `Makefile`.\nEdit `Config.toml` if needed to set the backend url and PostgreSQL credentials:\n``` console\n[server]\nurl = "http://127.0.0.1:30080"\n...\n[postgres]\nhost = "127.0.0.1"\nusername = "username"\npassword = ""\ndatabase = "database"\n```\nEnsure the runtime dependencies are installed, and the start the two containers.\n``` console\nsudo apt install -y postgresql-client\ncargo install diesel_cli --no-default-features --features "postgres"\nsudo make deploy\n```\nThe application should now be accessible at\n[`http://127.0.0.1:30080`](http://127.0.0.1:30080).\nDuring development, you can start the containers separately, using \n`make run-app` to start only the rust backend container, and `run-postgres` to start only the PostgreSQL container.\n\nIf both the backend and frontend are running, you can visit the web application\nat [`http://127.0.0.1:30080`](http://127.0.0.1:30080). After the successful\nloading of the application you should see an authentication screen like this:\n\n![authentication screen](.github/authentication_screen.png "Authentication Screen")\n\nThe login screen will accept any username and password that are equal, such as `me` (username) and `me` (password). There is currently no further user\nauthentication yet, but non matching combination will result in an\nauthentication failure. After the successfully login you should be able to see\nthe content of the application:\n\n![content screen](.github/content_screen.png "Content Screen")\n\nThe authentication should persist, even after a manual page reload. Logging out\nof the application via the logout button should also work as intended.\n\n### Control Flow\n\nThe complete control flow of the application looks like this:\n\n![control screen](.github/flow_chart.png "Control Flow")\n\n## Contributing\n\nYou want to contribute to this project? Wow, thanks! So please just fork it and\nsend me a pull request.\n'