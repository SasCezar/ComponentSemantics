b'# Wire\xe2\x84\xa2\n\n[![We are hiring](https://github.com/wireapp/wire/blob/master/assets/header-small.png?raw=true)](https://wire.softgarden.io/job/616102)\n\nThis repository is part of the source code of Wire. You can find more information at [wire.com](https://wire.com) or by contacting opensource@wire.com.\n\nYou can find the published source code at [github.com/wireapp/wire](https://github.com/wireapp/wire).\n\nFor licensing information, see the attached LICENSE file and the list of third-party licenses at [wire.com/legal/licenses/](https://wire.com/legal/licenses/).\n\nIf you compile the open source software that we make available from time to time to develop your own mobile, desktop or web application, and cause that application to connect to our servers for any purposes, we refer to that resulting application as an \xe2\x80\x9cOpen Source App\xe2\x80\x9d. All Open Source Apps are subject to, and may only be used and/or commercialized in accordance with, the Terms of Use applicable to the Wire Application, which can be found at https://wire.com/legal/#terms. Additionally, if you choose to build an Open Source App, certain restrictions apply, as follows:\n\na. You agree not to change the way the Open Source App connects and interacts with our servers; b. You agree not to weaken any of the security features of the Open Source App; c. You agree not to use our servers to store data for purposes other than the intended and original functionality of the Open Source App; d. You acknowledge that you are solely responsible for any and all updates to your Open Source App.\n\nFor clarity, if you compile the open source software that we make available from time to time to develop your own mobile, desktop or web application, and do not cause that application to connect to our servers for any purposes, then that application will not be deemed an Open Source App and the foregoing will not apply to that application.\n\nNo license is granted to the Wire trademark and its associated logos, all of which will continue to be owned exclusively by Wire Swiss GmbH. Any use of the Wire trademark and/or its associated logos is expressly prohibited without the express prior written consent of Wire Swiss GmbH.\n\n# How to build the open source client\n\n## Build\n\n### Installation\n\n1.  Install [Node.js](https://nodejs.org/)\n1.  Install [Yarn](https://yarnpkg.com): `npm install -g yarn`\n1.  Run `yarn`\n1.  Rename `.env.localhost` to `.env` in order to run the app in a local environment\n\n### Execution\n\nRun `yarn start` and Wire\'s web app will be available at: http://localhost:8080/auth/#login\n\nTo login with your existing Wire account use: http://localhost:8080/auth/?env=prod#login\n\n### Testing\n\nTo launch the full test suite (types check + linting + server tests + app tests), simply run\n\n`yarn test`\n\nAlternatively, you can run specific parts of the app:\n\n`yarn test:(server|types|auth|app)`\n\nSince the test suite for the app is the biggest test suite, you might want to run a single test file, in which case, you can use the `--specs` option:\n\n`yarn test:app --specs spec1[,spec2...]`\n\nwhere `specN` is the path to the spec to run relative to `test/unit_tests` and without `Spec.js`.\n\n#### Speed up testing for files fully migrated to the module system\n\nWhen a file (and all its dependencies) does not rely on **any** global dependency (i.e. `window.z.util`), then you can use the `--nolegacy` flag to run the tests on that single file:\n\n`yarn test:app --specs spec1 --nolegacy`\n\nThe test should start very quickly (webpack won\'t have to resolve all the global dependencies).\n\nIf the test doesn\'t run with the `nolegacy` option (but runs without), it means it\'s depending on at least one dependency from the global `window` namespace.\n\n**Example**\n\nIf you want to run the tests for the `ConversationRepository`, the file containing the test is:\n\n`test/unit_tests/conversation/ConversationRepositorySpec.js`\n\nThe command to run is:\n\n`yarn test:app --specs conversation/ConversationRepository`\n\n### Deployment\n\n#### General workflow\n\n| Stage | Branch | Action | Environment | Backend |\n| :-: | :-: | :-: | :-: | :-- |\n| 1 (Feature development) | edge | commit | wire-webapp-edge | Staging |\n| 2 (Nightly test automation) | dev | commit or squash merge from edge | wire-webapp-dev | Staging |\n| 3 (Internal release) | dev | tag (format: YYYY-MM-DD-staging.X) | wire-webapp-staging | Production |\n| 4 (RC testing) | master | merge (don\'t squash) from "dev"; afterwards [generate release notes](#release-notes) | wire-webapp-master | Staging |\n| 5 (Production release) | master | tag (format: YYYY-MM-DD-production.X) | wire-webapp-prod | Production |\n\n#### Staging Bumps for internal releases\n\n**Actions**\n\n1. Checkout commit ID which has been approved by QA team\n1. Create a Git tag with the following format: `YYYY-MM-DD-staging.X`\n1. Push the newly created tag\n\n**Example**\n\n```\ngit fetch origin\ngit checkout 90fda951916f0d60a5bffce69a7267830e313391\ngit tag 2019-04-23-staging.0\ngit push origin --tags\n```\n\nIf everything is done right, you will see a Travis CI job in the [build pipeline](https://travis-ci.org/wireapp/wire-webapp/builds) based on the new tag:\n\n![Staging Release](./docs/release/staging-release.png)\n\n#### RC testing\n\nBefore RC testing we create a merge commit (**don\'t squash!**) from "dev" to "master" branch, so that our QA team can run tests on the latest version of our app.\n\n#### Production Release\n\nSimilar to "Staging Bumps" with the exception that tags are made from "master" branch and contain "production" in the tag name instead of "staging". Example: `2019-07-01-production.0`\n\n##### Release notes\n\nRelease notes need to be generated with `yarn changelog` after merging to "master" and before creating the new production release tag. Release notes will be locally available (not committed to the repository) in [./CHANGELOG.md](./CHANGELOG.md) and sent to our marketing team to create release notes on [Medium](https://medium.com/wire-news/desktop-updates/home).\n\n#### Manual Deployments\n\nBased on the Git branch, builds get deployed automatically by [Travis CI](https://travis-ci.org/). In case Travis CI is not working, a manual deployment can be triggered using `yarn deploy`.\n\nA manual deployment requires the local setup of the Elastic Beanstalk Command Line Interface ([EB CLI](https://docs.aws.amazon.com/en_us/elasticbeanstalk/latest/dg/eb-cli3.html)). Manual deployments are also based on branch defaults which are configured [here](./.elasticbeanstalk/config.yml).\n\n### Status\n\n[![Build Status](https://travis-ci.org/wireapp/wire-webapp.svg?branch=dev)](https://travis-ci.org/wireapp/wire-webapp) [![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\n### Translations\n\nAll Wire translations are crowdsourced via [Crowdin](https://crowdin.com/projects/wire).\n'