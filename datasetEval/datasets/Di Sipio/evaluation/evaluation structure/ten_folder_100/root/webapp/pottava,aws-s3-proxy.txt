b"# Reverse proxy for AWS S3 w/ basic authentication\n\n![circleci status](https://circleci.com/gh/pottava/aws-s3-proxy.svg?style=shield&circle-token=9bc17d02e4513df42196523a1791465e65d8ab01)\n\n[![pottava/s3-proxy](http://dockeri.co/image/pottava/s3-proxy)](https://hub.docker.com/r/pottava/s3-proxy/)\n\nSupported tags and respective `Dockerfile` links:\n\n\xe3\x83\xbblatest ([docker/linux/1.4/Dockerfile](https://github.com/pottava/aws-s3-proxy/blob/master/docker/linux/1.4/Dockerfile))  \n\xe3\x83\xbb2.0rc ([docker/linux/2.0/Dockerfile](https://github.com/pottava/aws-s3-proxy/blob/master/docker/linux/2.0/Dockerfile))  \n\xe3\x83\xbb1.4 ([docker/linux/1.4/Dockerfile](https://github.com/pottava/aws-s3-proxy/blob/master/docker/linux/1.4/Dockerfile))  \n\xe3\x83\xbb1.4-win ([docker/windows/1.4/Dockerfile](https://github.com/pottava/aws-s3-proxy/blob/master/docker/windows/1.4/Dockerfile))  \n\xe3\x83\xbb1 ([docker/linux/1.4/Dockerfile](https://github.com/pottava/aws-s3-proxy/blob/master/docker/linux/1.4/Dockerfile))\n\n## Description\n\nThis is a reverse proxy for AWS S3, which is able to provide basic authentication as well.  \nYou don't need to configure a Bucket for `Website Hosting`.\n\nhttp://this-proxy.com/access/ -> s3://bucket/access/index.html\n\n([\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e\xe3\x81\xaf\xe3\x81\x93\xe3\x81\xa1\xe3\x82\x89](https://github.com/pottava/aws-s3-proxy/blob/master/README-ja.md))\n\n\n## Usage\n\n### 1. Set environment variables\n\nEnvironment Variables     | Description                                       | Required | Default\n------------------------- | ------------------------------------------------- | -------- | -----------------\nAWS_S3_BUCKET             | The `S3 bucket` to be proxied with this app.      | *        |\nAWS_S3_KEY_PREFIX         | You can configure `S3 object key` prefix.         |          | -\nAWS_REGION                | The AWS `region` where the S3 bucket exists.      |          | us-east-1\nAWS_ACCESS_KEY_ID         | AWS `access key` for API access.                  |          | EC2 Instance Role\nAWS_SECRET_ACCESS_KEY     | AWS `secret key` for API access.                  |          | EC2 Instance Role\nAWS_API_ENDPOINT          | The endpoint for AWS API for local development.   |          | -\nINDEX_DOCUMENT            | Name of your index document.                      |          | index.html\nDIRECTORY_LISTINGS        | List files when a specified URL ends with /.      |          | false\nDIRECTORY_LISTINGS_FORMAT | Configures directory listing to be `html` (spider parsable) |       | -\nHTTP_CACHE_CONTROL        | Overrides S3's HTTP `Cache-Control` header.       |          | S3 Object metadata\nHTTP_EXPIRES              | Overrides S3's HTTP `Expires` header.             |          | S3 Object metadata\nBASIC_AUTH_USER           | User for basic authentication.                    |          | -\nBASIC_AUTH_PASS           | Password for basic authentication.                |          | -\nSSL_CERT_PATH             | TLS: cert.pem file path.                          |          | -\nSSL_KEY_PATH              | TLS: key.pem file path.                           |          | -\nCORS_ALLOW_ORIGIN         | CORS: a URI that may access the resource.         |          | -\nCORS_ALLOW_METHODS        | CORS: Comma-delimited list of the allowed [HTTP request methods](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html). |          | -\nCORS_ALLOW_HEADERS        | CORS: Comma-delimited list of the supported request headers. |          | -\nCORS_MAX_AGE              | CORS: Maximum number of seconds the results of a preflight request can be cached. |          | 600\nAPP_PORT                  | The port number to be assigned for listening.     |          | 80\nAPP_HOST                  | The host name used to the listener                |          | Listens on all available unicast and anycast IP addresses of the local system.\nACCESS_LOG                | Send access logs to /dev/stdout.                  |          | false\nSTRIP_PATH                | Strip path prefix.                                |          | -\nCONTENT_ENCODING          | Compress response data if the request allows.     |          | true\nHEALTHCHECK_PATH          | If it's specified, the path always returns 200 OK |          | -\nGET_ALL_PAGES_IN_DIR      | If true will make several calls to get all pages of destination directory | | false\nMAX_IDLE_CONNECTIONS      | Allowed number of idle connections to the S3 storage |       | 150\nIDLE_CONNECTION_TIMEOUT   | Allowed timeout to the S3 storage.                |          | 10\nDISABLE_COMPRESSION       | If true will pass encoded content through as-is.  |          | true\nINSECURE_TLS              | If true it will skip cert checks                  |          | false\n\n### 2. Run the application\n\n`docker run -d -p 8080:80 -e AWS_REGION -e AWS_S3_BUCKET pottava/s3-proxy`\n\n* with basic auth:\n\n`docker run -d -p 8080:80 -e AWS_REGION -e AWS_S3_BUCKET -e BASIC_AUTH_USER -e BASIC_AUTH_PASS pottava/s3-proxy`\n\n* with TLS:\n\n`docker run -d -p 8080:80 -e AWS_REGION -e AWS_S3_BUCKET -e SSL_CERT_PATH -e SSL_KEY_PATH pottava/s3-proxy`\n\n* with CORS:\n\n`docker run -d -p 8080:80 -e CORS_ALLOW_ORIGIN -e CORS_ALLOW_METHODS -e CORS_ALLOW_HEADERS -e CORS_MAX_AGE pottava/s3-proxy`\n\n* with docker-compose.yml:\n\n```\nproxy:\n  image: pottava/s3-proxy\n  ports:\n    - 8080:80\n  environment:\n    - AWS_REGION=ap-northeast-1\n    - AWS_ACCESS_KEY_ID\n    - AWS_SECRET_ACCESS_KEY\n    - AWS_S3_BUCKET\n    - BASIC_AUTH_USER=admin\n    - BASIC_AUTH_PASS=password\n    - ACCESS_LOG=true\n  container_name: proxy\n```\n\n\n## Copyright and license\n\nCode released under the [MIT license](https://github.com/pottava/aws-s3-proxy/blob/master/LICENSE).\n"