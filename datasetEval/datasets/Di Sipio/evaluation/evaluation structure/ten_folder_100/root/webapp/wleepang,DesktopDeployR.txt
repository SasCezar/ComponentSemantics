b'# DesktopDeployR\nA framework for deploying self-contained R-based applications to the desktop\n\n## Overview\nAllows developers to share R based applications to users as desktop applications\nby providing both a portable R executable environment and a private application\npackage library.\n\nFor more information on how this framework was developed please read:\n\n* http://oddhypothesis.blogspot.com/2014/04/deploying-self-contained-r-apps-to.html\n* http://oddhypothesis.blogspot.com/2016/04/desktop-deployr.html\n\n## Target Audience\nSoftware Developers and Research Scientists who need to share applications in an\nenvironment where installing system / OS level software can be challenging and\nwhere use of other isolation and portability techniques (e.g. Docker containers)\nis not feasible.\n\n## Usage\n\n### Develop an Application\nThis deployment strategy has been tested with R based applications developed\nwith Shiny, RGTK, and Tcl/Tk UIs.  The specifics of how to make applications\nwith each of these frameworks are beyond the scope of these instructions.\n\n### Clone this repository\n```bash\ncd /path/to/deployment/staging\ngit clone https://github.com/wleepang/DesktopDeployR.git MyApplication\n```\n\nThe `git clone` command above will clone the framework into a folder named\n`MyApplication`.\n\nAlternatively, you can fork this repository into your own Github account and\nclone from there.\n\n### Create a branch for your app\nIt is highly recommended that you create a branch for your application:\n```bash\ncd /path/to/MyApplication\ngit checkout -b MyApplication\n```\n\nThis will allow you to easily track your application code and any customizations\nyou make to the framework.\n\n### "Install" R-Portable into the framework\nThe framework can be used with both a system installed version of R or R-Portable.\nThe latter is recommended as it provides the most application isolation and allows\nfor applications to be deployed to users unable to install R on their own (i.e.\nthey lack sufficient system privileges).\n\nDownload R-portable from:\nhttps://sourceforge.net/projects/rportable/\n\nInstall it into:\n```\n/<appname/dist/\n```\n\n### Customize the framework for your application\n\n#### Install application scripts / assets\nFor example - a shiny app:\n\n* create a folder called `app/shiny`\n* put `ui.R`, `server.R`, and any other related files into `app/shiny`\n* edit `app/app.R`:\n\n\t```r\n\t# assuming all shiny app code (ui.R and server.R are in ./app/shiny)\n\tshiny::runApp(\'./app/shiny\')\n\t```\n\n#### Specify package dependencies\nEdit `app/packages.txt` - adding your app\'s primary package dependencies, one\npackage per line.\n\nFor a `shiny` app that depends on `ggplot`, `app/packages.txt` should look like:\n```\njsonlite  # required by DesktopDeployR\nshiny\nggplot\n```\n\nPackages listed here, along with their dependencies, are installed in a private\napplication library (`app/library`) when the application is run for the first\ntime.\n\nNote, the above only works for packages available on CRAN. Custom packages need\nto be installed manually.  The recommended method is to use `devtools`:\n```\n$ Rscript -e "devtools::install(\'path/to/package\', lib = \'<appname>/app/library\')"\n```\n\n#### Configure application launch options\nThe file `app/config.cfg` is a JSON-ish formatted file that configures how the\napplication is launched.  Block (`/* ... */`) and line level (`// ...`) comments\nare allowed - they are removed to create valid JSON before the file is parsed.\n\n**Root level options:**\n\n| Option     | Description |\n| :---       | :--- |\n| `appname`  | The name of the application.  Displayed in the title of the progress bar shown during initialization, and used to name folders for logs based on logging settings (see below). |\n| `packages` | (Optional: Default: `"http://cran.rstudio.com"`) An object with a single element `cran` that specifies the CRAN mirror to use for installing packages.  Alternatively, this can point to a private CRAN-like package repository for more control over package versions. |\n| `r_exec` | (Optional; Default: `"dist\\\\R-Portable\\\\App\\\\R-Portable\\\\bin\\\\"`) An object with elements specifying  R execution options (see below). |\n| `logging`  | (Optional; Default: `undefined`) An object with elements specifying logging options (see below) |\n\n\n**R Executable Options**\n\n| Option            | Description |\n| :---              | :--- |\n| `home`        | (Optional; Default: `"dist\\\\R-Portable\\\\App\\\\R-Portable\\\\bin\\\\"`) Path to `<R_HOME>/bin` - the R environment to use to run the app.  |\n| `command` | (Optional; Default: `Rscript.exe`) Name of the specific R interpreter executable to use.  |\n| `options` | (Optional; Default: `--vanilla`) Options to pass to the R interpreter executable.  |\n\n\n**Logging Options:**\n\n| Option            | Description |\n| :---              | :--- |\n| `filename`        | (Optional; Default: `"error.log"`) Name of the application log file.  This file captures all text sent to `stdout` and `stderr` by the application.  |\n| `use_userprofile` | (Optional; Default: `false`) Boolean flag to set where application logs are kept.  If `true` the application log file is written to `%USERPROFILE%/.<appname>/`.  |\n\n#### Rename the application launching batch script file\nRename `appname.bat` as appropriate - e.g. to `MyApplication.bat`.\n\n\n### Deploy your application\n#### Option 1\nThe entire application folder is copied to the deployed location.  This is the\neasiest way to deploy.  Note, it is possible to place / launch an application\nfrom a network share.  If this is the case, be sure to set `logging.use_userprofile: true`\nin the application launch configuration.\n\n#### Option 2\nCreate an installer using NSIS installer or InnoSetup.  This is ideal for installing\non isolated workstations.  Both R-portable and package dependencies can be compiled\nwith the installer.  This means that a "first run" that ensures all package\ndependencies, must occur before compiling an installer.\n\n**TBD**: an example InnoSetup installer compile script\n\n\n## Notes\n\n### Using a different (newer) version of R\nEither replace `./dist/R-Portable/` with the version of `R-Portable` that is\nrequired or modify `./app/config.cfg` to point to the desired R installation\n(e.g. a system install).\n\n\n### Version tracking\nDue to their potentially large sizes, it is not recommended that the following\nfolders be tracked by version control (i.e. Git):\n\n* `/app/library/`\n* `/dist/R-Portable`\n\n### Application Structure\n```\n/<appname>          # - application deployment root\n./app/              # - application working directory\n\n\t./library/        # - application specific package library\n\n\t./shiny/          # - application framework folder (in this case, shiny)\n\t\t./global.R      # - global constants and functions for shiny-app\n\t\t./server.R      # - server processing function for shiny-app\n\t\t./ui.R          # - user interface definition function for shiny-app\n\n\t./app.R           # - application launch entry script\n\t./config.cfg      # - application configuration file\n\t./packages.txt    # - list of primary package dependencies\n\t./...             # - other application files\n\n./dist/             # - application launch framework\n\t./R-Portable/     # - "vanilla" R interpreter (downloaded separately)\n\t./script/\n\t\t./R\n\t\t\t./run.R       # - R environment initialization and application launch\n\t\t./wsf\n\t\t\t./js\n\t\t\t\t./JSON.minify.js  # - JS to JSON minifier, allows comments in JSON files\n\t\t\t\t./json2.js  # - JSON parsing library\n\t\t\t\t./run.js    # - OS application launch script\n\t\t\t./run.wsf     # - merges javascript dependencies and launch script\n\t./USAGE.md        # - notes on how the dist folder is structured\n\n/<appname>.bat      # - batch file to start application\n/README.md          # - this file or brief description of application\n```\n'