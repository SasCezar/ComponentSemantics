b'# Terminal in React\n[![Downloads][npm-dm]][package-url]\n[![Downloads][npm-dt]][package-url]\n[![NPM Version][npm-v]][package-url]\n[![Dependencies][deps]][package-url]\n[![Dev Dependencies][dev-deps]][package-url]\n[![License][license]][package-url]\n![size](https://img.shields.io/badge/size-31.4%20KB-brightgreen.svg)\n![size](https://img.shields.io/badge/gzip-8.63%20KB-brightgreen.svg)\n\n<p align="center">\n  <img src="http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/terminal-icon.png"  width="300" height="300" />\n</p>\n\n> A component that renders a terminal\n\n## Table of contents\n\n* [Install](#install)\n\n* [Usage](#usage)\n\n* [Working](#working)\n\n* [Plugins](#using-plugins-)\n\n* [Features](#more-features)\n\n* [Customization](#customization)\n\n* [API reference](#api)\n\n* [Built-in commands](#built-in-commands)\n\n* [Where to use ?](#where-to-use-)\n\n* [Add a feature](#you-want-a-x-feature)\n\n* [Contributing](#contributing)\n\n* [Troubleshooting](#troubleshooting)\n\n* [Detailed reference](https://github.com/nitin42/terminal-in-react/wiki)\n\n## Install\n\n```\nnpm install terminal-in-react --save\n```\nor if you use `yarn`\n\n```\nyarn add terminal-in-react\n```\n\nThis package also depends on `react` so make sure you\'ve already installed it.\n\n## Usage\n\n\n```jsx\nimport React, { Component } from \'react\';\nimport Terminal from \'terminal-in-react\';\n\nclass App extends Component {\n  showMsg = () => \'Hello World\'\n\n  render() {\n    return (\n      <div\n        style={{\n          display: "flex",\n          justifyContent: "center",\n          alignItems: "center",\n          height: "100vh"\n        }}\n      >\n        <Terminal\n          color=\'green\'\n          backgroundColor=\'black\'\n          barColor=\'black\'\n          style={{ fontWeight: "bold", fontSize: "1em" }}\n          commands={{\n            \'open-google\': () => window.open(\'https://www.google.com/\', \'_blank\'),\n            showmsg: this.showMsg,\n            popup: () => alert(\'Terminal in React\')\n          }}\n          descriptions={{\n            \'open-google\': \'opens google.com\',\n            showmsg: \'shows a message\',\n            alert: \'alert\', popup: \'alert\'\n          }}\n          msg=\'You can write anything here. Example - Hello! My name is Foo and I like Bar.\'\n        />\n      </div>\n    );\n  }\n}\n```\n\n> Be careful when copying this example because it uses `window` object (`\'open-google\': () => window.open("https://www.google.com/", "_blank"),`) which is only available on the client-side and it will give you an error if you\'re doing server side rendering.\n\n<p align="center">\n  <img src="https://i.gyazo.com/a7e35f346b909349a02438ee17678956.gif" />\n</p>\n\n## Working\n\n### Adding commands \xe2\x9c\x8d\xef\xb8\x8f\n\nTo add your own command, use prop `commands` which accepts an object. This objects then maps `command name -> command function`.\n\nLet\'s take an example. You want to open a website with a command `open-google`\n\n```jsx\n<Terminal commands={{ \'open-google\': () => window.open("https://www.google.com/", "_blank")}} />\n```\n\n### Adding description of your command \xf0\x9f\x92\x81\xf0\x9f\x8f\xbc\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f\n\nAdd a description of your command using prop `description`.\n\n```jsx\n<Terminal descriptions={{ \'open-google\': \'opens google\' }} />\n```\n\n### Console logging\n\nYou can have the terminal watch console.log/info function and print out.\nIt does so by default.\n\n```jsx\n<Terminal watchConsoleLogging />\n```\n\n<p align="center">\n  <img src="http://g.recordit.co/a6D6PCtTcL.gif"/>\n</p>\n\n### Command passthrough\n\nYou can have the terminal pass out the cmd that was input\n\n```jsx\n<Terminal commandPassThrough={cmd => `-PassedThrough:${cmd}: command not found`} />\n```\n\n### Async handling of commands \xf0\x9f\x98\x8e\nyou can also handle the result with a callback\n```jsx\n<Terminal\n  commandPassThrough={(cmd, print) => {\n    // do something async\n    print(`-PassedThrough:${cmd}: command not found`);\n  }}\n/>\n```\n\n### Minimise, maximise and close the window\n\n```jsx\n<Terminal\n  closedTitle=\'OOPS! You closed the window.\'\n  closedMessage=\'Click on the icon to reopen.\'\n/>\n```\n\n<p align="center">\n  <img src="https://camo.githubusercontent.com/3748e38abc72cb7860ba8f2272c0329ded5bfe23/687474703a2f2f672e7265636f726469742e636f2f5a5965554b6d62414e512e676966" />\n</p>\n\n### Hide the default options\n\n```jsx\n<Terminal descriptions={{ color: false, show: false, clear: false }} />\n```\n\nThis will hide the option color, show and clear.\n\n\n### Advanced commands \xf0\x9f\x91\xa8\xe2\x80\x8d\xf0\x9f\x92\xbb\n\nYou can give your commands options and get them back parsed to the method.\nUsing this method will also give your command a build in help output.\nWith the option `-h` or `--help`.\n\n```jsx\n<Terminal\n  commands={{\n    color: {\n      method: (args, print, runCommand) => {\n        print(`The color is ${args._[0] || args.color}`);\n      },\n      options: [\n        {\n          name: \'color\',\n          description: \'The color the output should be\',\n          defaultValue: \'white\',\n        },\n      ],\n    },\n  }}\n/>\n```\n<p align="center">\n  <img src="https://i.gyazo.com/65468696bece70704bd8bcc50e6504e9.gif"/>\n</p>\n\nThe command API has three parameters `arguments`, `print`, and `runCommand`.\n\n - `arguments` will be an array of the input split on spaces or and object with\n parameters meeting the options given as well as a `_` option with any strings given\n after the options.\n - `print` is a method to write a new line to the terminals output. Any string returned\n as a result of a command will also be printed.\n - `runCommand` is a method to call other commands it takes a string and will\n attempt to run the command given\n\nLet\'s take an another example -\n\n```jsx\n<Terminal\n  commands={{\n    \'type-text\': (args, print, runCommand) => {\n      const text = args.slice(1).join(\' \');\n      print(\'\');\n      for (let i = 0; i < text.length; i += 1) {\n        setTimeout(() => {\n          runCommand(`edit-line ${text.slice(0, i + 1)}`);\n        }, 100 * i);\n      }\n    }\n  }}\n/>\n\n```\n\n<p align="center">\n  <img src="https://i.gyazo.com/ef2427464989b1ce14bc44bb4fc94689.gif" />\n</p>\n\n## Using plugins \xf0\x9f\x94\xa5\n\n[Plugin Documentation](PLUGINS.md).\n\nWe have also developed a plugin system for the `<Terminal />` component which helps you develop custom plugins. Here is one example of plugin which creates a fake file system called [terminal-in-react-pseudo-file-system-plugin](https://github.com/jcgertig/terminal-in-react-pseudo-file-system-plugin).\n\n### Instantiating the plugin\n\n```jsx\nimport pseudoFileSystem from \'terminal-in-react-pseudo-file-system-plugin\';\nconst FileSystemPlugin = pseudoFileSystem();\n\n<Terminal\n  plugins={[\n    FileSystemPlugin,\n  ]}\n/>\n```\n\nor if the plugin requires config\n\n```jsx\nimport NodeEvalPlugin from \'terminal-in-react-node-eval-plugin\';\nimport pseudoFileSystemPlugin from \'terminal-in-react-pseudo-file-system-plugin\';\nconst FileSystemPlugin = pseudoFileSystemPlugin();\n\n...\n<Terminal\n  plugins={[\n    FileSystemPlugin,\n    {\n      class: NodeEvalPlugin,\n      config: {\n        filesystem: FileSystemPlugin.displayName\n      }\n    }\n  ]}\n/>\n...\n```\n\n<p align="center">\n  <img src="http://g.recordit.co/4xcIZRKJCD.gif" />\n</p>\n\nAwesome! Right? Let us know if you make something interesting \xf0\x9f\x98\x83\n\n## Plugin List\n\n - [terminal-in-react-pseudo-file-system-plugin](https://github.com/jcgertig/terminal-in-react-pseudo-file-system-plugin) : A client-side only filesystem\n - [terminal-in-react-node-eval-plugin](https://github.com/jcgertig/terminal-in-react-node-eval-plugin) : used with a filesystem to evaluate js code\n - [terminal-in-react-vi-plugin](https://github.com/jcgertig/terminal-in-react-vi-plugin) : used with a filesystem to edit the contents of files more easily\n\n\n## More features\n\n### Tab autocomplete\n\n<p align="center">\n  <img src="https://i.gyazo.com/3e719f4091cbd72f3e1f99209493e50d.gif" />\n</p>\n\n### Multiline input \xf0\x9f\xa4\xb9\xf0\x9f\x8f\xbc\xe2\x80\x8d\xe2\x99\x80\xef\xb8\x8f\n\nvia `shift + enter`\n\n<p align="center">\n  <img src="http://g.recordit.co/AznpOohzJL.gif" />\n</p>\n\n### Check history of your commands \xf0\x9f\x96\xb1\xef\xb8\x8f\n\nusing arrow down and up keys\n\n<p align="center">\n  <img src="https://i.gyazo.com/6fa55a8fbb961787c51e406e612e0bb8.gif" />\n</p>\n\n### Keyboard shortcuts \xe2\x8c\xa8\nYou can define keyboard shortcuts. They have to be grouped by os. The three available are\n`win`, `darwin`, and `linux`. You can group multiple os by a `,` for example if the\nshortcut was for all platforms `win,darwin,linux` would be fine as a key\n\n```jsx\n<Terminal\n  shortcuts={{\n    \'darwin,win,linux\': {\n      \'ctrl + a\': \'echo whoo\',\n    },\n  }}\n/>\n```\n\nBut you might want to specific\n\n```jsx\n<Terminal\n  shortcuts={{\n    \'win\': {\n      \'ctrl + a\': \'echo hi windows\',\n    },\n    \'darwin\': {\n      \'cmd + a\': \'echo hi mac\'\n    },\n    \'linux\': {\n      \'ctrl + a\': \'echo hi linux\'\n    }\n  }}\n/>\n```\n\nYou can mix and match\n\n```jsx\n<Terminal\n  shortcuts={{\n    \'win,linux\': {\n      \'ctrl + b\': \'echo we are special\',\n    },\n    \'win\': {\n      \'ctrl + a\': \'echo hi windows\',\n    },\n    \'darwin\': {\n      \'cmd + a\': \'echo hi mac\'\n    },\n    \'linux\': {\n      \'ctrl + a\': \'echo hi linux\'\n    }\n  }}\n/>\n```\n\nThe value of the shortcut should be a command to run.\n\n\n## Override the top bar buttons actionHandlers\n\nUse the prop `actionHandlers`.\n\nThe object allows for 3 methods `handleClose`, `handleMaximise`, `handleMinimise`;\n\nEach one is a function and will pass in the default method as the first param.\nAny method not passed in will use the default.\n\n```jsx\n<Terminal\n  actionHandlers={{\n    handleClose: (toggleClose) => {\n      // do something on close\n      toggleClose();\n    },\n    handleMaximise: (toggleMaximise) => {\n      // do something on maximise\n      toggleMaximise();\n    }\n  }}\n/>\n```\n\n## Customization\n\nUse\n\n* prop `color` to change the color of the text.\n* prop `outputColor` to change the color of the output text defaults to color prop.\n* prop `backgroundColor` to change the background.\n* prop `barColor` to change the color of bar.\n* prop `prompt` to change the prompt (`>`) color.\n* prop `showActions` to change if the three circles are shown.\n* prop `hideTopBar` to hide the top bar altogether.\n* prop `allowTabs` to allow multiple tabs.\n\n## API\n\n**component props**\n\n| Props        | Type           | Default  |\n| ------------- |:-------------:| -----:|\n| **color**      | string | \'green\' |\n| **outputColor** | string | props.color |\n| **backgroundColor**      | string      |   \'black\' |\n| **prompt** | string      |    \'green\' |\n| **barColor** | string      |    \'black\' |\n| **description** | object      |    {} |\n| **commands** | object      |    { clear, help, show, } |\n| **msg** | string      |    - |\n| **closedTitle** | string      |    OOPS! You closed the window. |\n| **closedMessage** | string      |    Click on the icon to reopen. |\n| **watchConsoleLogging** | bool | false |\n| **commandPassThrough** | function | null |\n| **promptSymbol** | string | > |\n| **plugins** | array | [ { name: \'\', load: new Plugin(), commands: {} descriptions: {} } ] |\n| **startState** | string [\'open\', \'maximised\', \'minimised\', \'closed\'] | \'open\' |\n| **showActions** | bool | true |\n| **hideTopBar** | bool | false |\n| **allowTabs** | bool | true |\n| **actionHandlers** | object | - |\n\n## Built-in commands\n\n* `clear` - Clears the screen\n* `help` - List all the commands\n* `show` - Shows a msg if any\n* `echo` - Display the input message\n* `edit-line` - Edits the last line or a given line using the `-l` argument\n\n## Where to use ?\n\n* Embed it as a toy on your website\n* For showcasing\n* Explain any of your projects using this terminal component\n* or just play with it\n\n## You want a X feature\n\nSure! Check our [todolist](./todo.md) or create an issue.\n\n## Contributing\n\n[Contributing Guide](./CONTRIBUTING.md)\n\n## Troubleshooting\n\n**Build errors when using with `create-react-app`**<br/>\n\nEject from `create-react-app` and use a custom webpack configuration with [`babili-webpack-plugin`](https://github.com/webpack-contrib/babili-webpack-plugin). Read more about this [here](https://github.com/facebookincubator/create-react-app/issues/984).\n\n**Style issues when maximizing**\n\nSet the style to `height: 100vh` on parent element.\n\n[npm-dm]: https://img.shields.io/npm/dm/terminal-in-react.svg\n[npm-dt]: https://img.shields.io/npm/dt/terminal-in-react.svg\n[npm-v]: https://img.shields.io/npm/v/terminal-in-react.svg\n[deps]: https://img.shields.io/david/nitin42/terminal-in-react.svg\n[dev-deps]: https://img.shields.io/david/dev/nitin42/terminal-in-react.svg\n[license]: https://img.shields.io/npm/l/terminal-in-react.svg\n[package-url]: https://npmjs.com/package/terminal-in-react\n\n<a href="https://app.codesponsor.io/link/FCRW65HPiwhNtebDx2tTc53E/nitin42/terminal-in-react" rel="nofollow"><img src="https://app.codesponsor.io/embed/FCRW65HPiwhNtebDx2tTc53E/nitin42/terminal-in-react.svg" style="width: 888px; height: 68px;" alt="Sponsor" /></a>\n'